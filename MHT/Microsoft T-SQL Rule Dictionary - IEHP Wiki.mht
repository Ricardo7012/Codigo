From: "Saved by Internet Explorer 11"
Subject: Microsoft T-SQL Rule Dictionary - IEHP Wiki
Date: Thu, 7 Jan 2021 15:10:54 -0800
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_0120_01D6E507.4B0F8B50"
X-MimeOLE: Produced By Microsoft MimeOLE V10.0.10011.16506

This is a multi-part message in MIME format.

------=_NextPart_000_0120_01D6E507.4B0F8B50
Content-Type: text/html;
	charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Location: https://iehpwiki.iehp.org/wiki/Microsoft_T-SQL_Rule_Dictionary

=EF=BB=BF<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML lang=3Den class=3Dclient-nojs dir=3Dltr><HEAD><META =
content=3D"IE=3D7.0000"=20
http-equiv=3D"X-UA-Compatible">
<TITLE>Microsoft T-SQL Rule Dictionary - IEHP Wiki</TITLE>
<META charset=3DUTF-8>
<SCRIPT>document.documentElement.className =3D =
document.documentElement.className.replace( /(^|\s)client-nojs(\s|$)/, =
"$1client-js$2" );</SCRIPT>

<SCRIPT>(window.RLQ=3Dwindow.RLQ||[]).push(function(){mw.config.set({"wgC=
anonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumb=
er":0,"wgPageName":"Microsoft_T-SQL_Rule_Dictionary","wgTitle":"Microsoft=
 T-SQL Rule =
Dictionary","wgCurRevisionId":11456,"wgRevisionId":11456,"wgArticleId":28=
08,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName"=
:"Fernandez-r@iehp.org","wgUserGroups":["sysop","*","user","autoconfirmed=
"],"wgCategories":["Data Systems","Data Systems A-Z =
Policy"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgPageConten=
tModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformT=
able":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","F=
ebruary","March","April","May","June","July","August","September","Octobe=
r","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr"=
,"May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"M=
icrosoft_T-SQL_Rule_Dictionary","wgRelevantArticleId":2808,"wgRequestId":=
"d9b6471f2e7fb888adb27cf2","wgCSPNonce":false,"wgUserId":150,"wgUserEditC=
ount":376,"wgUserRegistration":1573158503000,"wgUserNewMsgRevisionId":nul=
l,"wgIsProbablyEditable":true,"wgRelevantPageIsProbablyEditable":true,"wg=
RestrictionEdit":[],"wgRestrictionMove":[],"wgEchoInteractionLogging":fal=
se,"wgEchoEventLoggingVersion":"1.12","wgVisualEditor":{"pageLanguageCode=
":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en","usePageImages=
":false,"usePageDescriptions":false},"wgWikiEditorEnabledModules":[],"wgV=
isualEditorToolbarScrollOffset":0,"wgVisualEditorUnsupportedEditParams":[=
"undo","undoafter","veswitched"],"wgEditSubmitButtonLabelPublish":false,"=
wgEchoSeenTime":{"alert":"2020-05-28T18:30:51Z","notice":"2020-05-28T18:3=
0:45Z"},"wgWikiId":"mediawiki"});mw.loader.state({"site.styles":"ready","=
noscript":"ready","user.styles":"ready","user":"ready","user.options":"lo=
ading","user.tokens":"loading","mediawiki.legacy.shared":"ready","mediawi=
ki.legacy.commonPrint":"ready","mediawiki.toc.styles":"ready","ext.echo.s=
tyles.badge":"ready","ext.echo.badgeicons":"ready","ext.visualEditor.desk=
topArticleTarget.noscript":"ready","mediawiki.skinning.interface":"ready"=
,"skins.vector.styles":"ready"});mw.loader.implement("user.options@0o0mmy=
0",function($,jQuery,require,module){/*@nomin*/mw.user.options.set({"visu=
aleditor-hidebetawelcome":"1","visualeditor-editor":"visualeditor","nickn=
ame":"Ricardo","echo-subscriptions-email-edit-user-talk":1,"rcfilters-lim=
it":"50","rcfilters-rc-collapsed":0,"rcfilters-saved-queries":"{\"queries=
\":{},\"version\":\"2\"}","rcfilters-wl-collapsed":0,"rcfilters-wl-saved-=
queries":"{\"queries\":{},\"version\":\"2\"}","visualeditor-hideusered":"=
1"});=0A=
});mw.loader.implement("user.tokens@0tffind",function($,jQuery,require,mo=
dule){/*@nomin*/mw.user.tokens.set({"editToken":"8f3f018f3e6d4c303eff77be=
47601e7b5ff794fd+\\","patrolToken":"cc6778e6d0a3d959115e80017e793ad75ff79=
4fd+\\","watchToken":"e1ec3c656037474a5b5e3a30782edaca5ff794fd+\\","csrfT=
oken":"8f3f018f3e6d4c303eff77be47601e7b5ff794fd+\\"});=0A=
});RLPAGEMODULES=3D["site","mediawiki.page.startup","mediawiki.user","med=
iawiki.page.ready","mediawiki.toc","mediawiki.searchSuggest","mediawiki.p=
age.watch.ajax","ext.echo.init","ext.visualEditor.desktopArticleTarget.in=
it","ext.visualEditor.targetLoader","skins.vector.js"];mw.loader.load(RLP=
AGEMODULES);});</SCRIPT>
<LINK rel=3Dstylesheet=20
href=3D"https://iehpwiki.iehp.org/load.php?debug=3Dfalse&amp;lang=3Den&am=
p;modules=3Dext.echo.badgeicons%7Cext.echo.styles.badge%7Cext.visualEdito=
r.desktopArticleTarget.noscript%7Cmediawiki.legacy.commonPrint%2Cshared%7=
Cmediawiki.skinning.interface%7Cmediawiki.toc.styles%7Cskins.vector.style=
s&amp;only=3Dstyles&amp;skin=3Dvector">
<SCRIPT=20
src=3D"/load.php?debug=3Dfalse&amp;lang=3Den&amp;modules=3Dstartup&amp;on=
ly=3Dscripts&amp;skin=3Dvector"=20
async=3D""></SCRIPT>

<META name=3DResourceLoaderDynamicStyles content=3D"">
<META name=3DGENERATOR content=3D"MSHTML 11.00.10240.18756"><LINK =
title=3DEdit=20
rel=3Dalternate type=3Dapplication/x-wiki=20
href=3D"/index.php?title=3DMicrosoft_T-SQL_Rule_Dictionary&amp;action=3De=
dit"><LINK=20
title=3DEdit rel=3Dedit=20
href=3D"/index.php?title=3DMicrosoft_T-SQL_Rule_Dictionary&amp;action=3De=
dit"><LINK=20
rel=3D"shortcut icon" href=3D"/favicon.ico"><LINK title=3D"IEHP Wiki =
(en)" rel=3Dsearch=20
type=3Dapplication/opensearchdescription+xml =
href=3D"/opensearch_desc.php"><LINK=20
rel=3DEditURI type=3Dapplication/rsd+xml=20
href=3D"//iehpwiki.iehp.org/api.php?action=3Drsd"><LINK title=3D"IEHP =
Wiki Atom feed"=20
rel=3Dalternate type=3Dapplication/atom+xml=20
href=3D"/index.php?title=3DSpecial:RecentChanges&amp;feed=3Datom"><!--[if=
 lt IE 9]>
<SCRIPT=20
src=3D"/load.php?debug=3Dfalse&amp;lang=3Den&amp;modules=3Dhtml5shiv&amp;=
only=3Dscripts&amp;skin=3Dvector&amp;sync=3D1"></SCRIPT>
<![endif]-->
<STYLE type=3Dtext/css>#turnkey-credit {
	FONT-SIZE: 11px; FONT-FAMILY: =
Tahoma,Sans,Arial,Helvetica,Verdana,sans-serif; TEXT-ALIGN: center
}
#turnkey-credit A {
	TEXT-DECORATION: none
}
#turnkey-credit A:hover {
	TEXT-DECORATION: underline
}
</STYLE>
</HEAD>
<BODY=20
class=3D"mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject =
page-Microsoft_T-SQL_Rule_Dictionary =
rootpage-Microsoft_T-SQL_Rule_Dictionary skin-vector action-view">
<DIV id=3Dmw-page-base class=3Dnoprint></DIV>
<DIV id=3Dmw-head-base class=3Dnoprint></DIV>
<DIV role=3Dmain id=3Dcontent class=3Dmw-body><A id=3Dtop></A>
<DIV class=3D"mw-indicators mw-body-content"></DIV>
<H1 lang=3Den id=3DfirstHeading class=3DfirstHeading>Microsoft T-SQL =
Rule=20
Dictionary</H1>
<DIV id=3DbodyContent class=3Dmw-body-content>
<DIV id=3DsiteSub class=3Dnoprint>From IEHP Wiki</DIV>
<DIV id=3DcontentSub></DIV>
<DIV id=3Djump-to-nav></DIV><A class=3Dmw-jump-link=20
href=3D"https://iehpwiki.iehp.org/wiki/Microsoft_T-SQL_Rule_Dictionary#mw=
-head">Jump=20
to navigation</A> <A class=3Dmw-jump-link=20
href=3D"https://iehpwiki.iehp.org/wiki/Microsoft_T-SQL_Rule_Dictionary#p-=
search">Jump=20
to search</A>=20
<DIV lang=3Den id=3Dmw-content-text class=3Dmw-content-ltr dir=3Dltr>
<DIV class=3Dmw-parser-output>
<DIV id=3Dtoc class=3Dtoc><INPUT role=3Dbutton id=3Dtoctogglecheckbox=20
class=3Dtoctogglecheckbox style=3D"DISPLAY: none" type=3Dcheckbox>
<DIV lang=3Den class=3Dtoctitle dir=3Dltr>
<H2>Contents</H2><SPAN class=3Dtoctogglespan><LABEL =
class=3Dtoctogglelabel=20
for=3Dtoctogglecheckbox></LABEL></SPAN></DIV>
<UL>
  <LI class=3D"toclevel-1 tocsection-1"><A=20
  =
href=3D"https://iehpwiki.iehp.org/wiki/Microsoft_T-SQL_Rule_Dictionary#WO=
RK_PERFORMED"><SPAN=20
  class=3Dtocnumber>1</SPAN> <SPAN class=3Dtoctext><B>WORK =
PERFORMED</B></SPAN></A>=20
  <LI class=3D"toclevel-1 tocsection-2"><A=20
  =
href=3D"https://iehpwiki.iehp.org/wiki/Microsoft_T-SQL_Rule_Dictionary#Vi=
deo"><SPAN=20
  class=3Dtocnumber>2</SPAN> <SPAN class=3Dtoctext>Video</SPAN></A>=20
  <LI class=3D"toclevel-1 tocsection-3"><A=20
  =
href=3D"https://iehpwiki.iehp.org/wiki/Microsoft_T-SQL_Rule_Dictionary#MS=
_WORD_Version"><SPAN=20
  class=3Dtocnumber>3</SPAN> <SPAN class=3Dtoctext>MS WORD =
Version</SPAN></A>=20
  <LI class=3D"toclevel-1 tocsection-4"><A=20
  =
href=3D"https://iehpwiki.iehp.org/wiki/Microsoft_T-SQL_Rule_Dictionary#RE=
COMMENDATIONS_TO_IEHP"><SPAN=20
  class=3Dtocnumber>4</SPAN> <SPAN class=3Dtoctext><B>RECOMMENDATIONS TO =

  IEHP</B></SPAN></A>=20
  <LI class=3D"toclevel-1 tocsection-5"><A=20
  =
href=3D"https://iehpwiki.iehp.org/wiki/Microsoft_T-SQL_Rule_Dictionary#TA=
BLE_1.1"><SPAN=20
  class=3Dtocnumber>5</SPAN> <SPAN class=3Dtoctext>TABLE 1.1</SPAN></A>=20
</LI></UL></DIV>
<H1><SPAN id=3DWORK_PERFORMED class=3Dmw-headline><B>WORK =
PERFORMED</B></SPAN><SPAN=20
class=3Dmw-editsection><SPAN class=3Dmw-editsection-bracket>[</SPAN><A=20
title=3D"Edit section: WORK PERFORMED" =
class=3Dmw-editsection-visualeditor=20
href=3D"https://iehpwiki.iehp.org/index.php?title=3DMicrosoft_T-SQL_Rule_=
Dictionary&amp;veaction=3Dedit&amp;section=3D1">edit</A><SPAN=20
class=3Dmw-editsection-divider> | </SPAN><A title=3D"Edit section: WORK =
PERFORMED"=20
href=3D"https://iehpwiki.iehp.org/index.php?title=3DMicrosoft_T-SQL_Rule_=
Dictionary&amp;action=3Dedit&amp;section=3D1">edit=20
source</A><SPAN class=3Dmw-editsection-bracket>]</SPAN></SPAN></H1>
<P>T-SQL Patterns and Practices Review=E2=80=9D which essentially =
provides a means of=20
connecting to your code and database schema, and further helps with =
analyzing=20
deep/nested/complex T-SQL statements using more than 100 intricate T-SQL =
Pattern=20
rules based on Microsoft T-SQL coding best practices. <BR>=E2=80=A2 =
Delivered code=20
review and knowledge transfer sessions with your developers and =
DBAs<BR>=E2=80=A2 Shared=20
with you an Executive Summary Report Word document, a Power BI =
Remediation=20
Dashboard, and a Remediation Plan excel file to help you identify and =
manage the=20
work you are going to perform to solve the issues listed on the =
reports.<BR></P>
<H1><SPAN id=3DVideo class=3Dmw-headline>Video</SPAN><SPAN=20
class=3Dmw-editsection><SPAN class=3Dmw-editsection-bracket>[</SPAN><A=20
title=3D"Edit section: Video" class=3Dmw-editsection-visualeditor=20
href=3D"https://iehpwiki.iehp.org/index.php?title=3DMicrosoft_T-SQL_Rule_=
Dictionary&amp;veaction=3Dedit&amp;section=3D2">edit</A><SPAN=20
class=3Dmw-editsection-divider> | </SPAN><A title=3D"Edit section: =
Video"=20
href=3D"https://iehpwiki.iehp.org/index.php?title=3DMicrosoft_T-SQL_Rule_=
Dictionary&amp;action=3Dedit&amp;section=3D2">edit=20
source</A><SPAN class=3Dmw-editsection-bracket>]</SPAN></SPAN></H1>
<P><A class=3D"external free"=20
href=3D"https://channel9.msdn.com/Events/TechEd/NewZealand/2014/DBI316"=20
rel=3Dnofollow>https://channel9.msdn.com/Events/TechEd/NewZealand/2014/DB=
I316</A>=20
</P>
<H1><SPAN id=3DMS_WORD_Version class=3Dmw-headline>MS WORD =
Version</SPAN><SPAN=20
class=3Dmw-editsection><SPAN class=3Dmw-editsection-bracket>[</SPAN><A=20
title=3D"Edit section: MS WORD Version" =
class=3Dmw-editsection-visualeditor=20
href=3D"https://iehpwiki.iehp.org/index.php?title=3DMicrosoft_T-SQL_Rule_=
Dictionary&amp;veaction=3Dedit&amp;section=3D3">edit</A><SPAN=20
class=3Dmw-editsection-divider> | </SPAN><A title=3D"Edit section: MS =
WORD Version"=20
href=3D"https://iehpwiki.iehp.org/index.php?title=3DMicrosoft_T-SQL_Rule_=
Dictionary&amp;action=3Dedit&amp;section=3D3">edit=20
source</A><SPAN class=3Dmw-editsection-bracket>]</SPAN></SPAN></H1>
<P>To see the full version with hyperlinks <A =
title=3DFile:RuleDictionary.doc=20
href=3D"https://iehpwiki.iehp.org/wiki/File:RuleDictionary.doc">File:Rule=
Dictionary.doc</A>=20
</P>
<H1><SPAN id=3DRECOMMENDATIONS_TO_IEHP =
class=3Dmw-headline><B>RECOMMENDATIONS TO=20
IEHP</B></SPAN><SPAN class=3Dmw-editsection><SPAN=20
class=3Dmw-editsection-bracket>[</SPAN><A=20
title=3D"Edit section: RECOMMENDATIONS TO IEHP" =
class=3Dmw-editsection-visualeditor=20
href=3D"https://iehpwiki.iehp.org/index.php?title=3DMicrosoft_T-SQL_Rule_=
Dictionary&amp;veaction=3Dedit&amp;section=3D4">edit</A><SPAN=20
class=3Dmw-editsection-divider> | </SPAN><A=20
title=3D"Edit section: RECOMMENDATIONS TO IEHP"=20
href=3D"https://iehpwiki.iehp.org/index.php?title=3DMicrosoft_T-SQL_Rule_=
Dictionary&amp;action=3Dedit&amp;section=3D4">edit=20
source</A><SPAN class=3Dmw-editsection-bracket>]</SPAN></SPAN></H1>
<UL>
  <LI>Use the shared materials and re-coded discussions to develop a =
=E2=80=9Ccode best=20
  practices=E2=80=9D set of standards.=20
  <LI>Benefit from the files Microsoft shared with you to perform and =
consistent=20
  and thorough remediation of the exposed issues.=20
  <LI>Perform regular code reviews to confirm that your developers and =
vendors=20
  are following the best practices suggested by Microsoft during this=20
  engagement.</LI></UL>
<H1><SPAN id=3DTABLE_1.1 class=3Dmw-headline>TABLE 1.1</SPAN><SPAN=20
class=3Dmw-editsection><SPAN class=3Dmw-editsection-bracket>[</SPAN><A=20
title=3D"Edit section: TABLE 1.1" class=3Dmw-editsection-visualeditor=20
href=3D"https://iehpwiki.iehp.org/index.php?title=3DMicrosoft_T-SQL_Rule_=
Dictionary&amp;veaction=3Dedit&amp;section=3D5">edit</A><SPAN=20
class=3Dmw-editsection-divider> | </SPAN><A title=3D"Edit section: TABLE =
1.1"=20
href=3D"https://iehpwiki.iehp.org/index.php?title=3DMicrosoft_T-SQL_Rule_=
Dictionary&amp;action=3Dedit&amp;section=3D5">edit=20
source</A><SPAN class=3Dmw-editsection-bracket>]</SPAN></SPAN></H1>
<P><BR></P>
<TABLE class=3Dwikitable>
  <TBODY>
  <TR>
    <TD></TD>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD>
      <TABLE class=3Dwikitable>
        <TBODY>
        <TR>
          <TD colSpan=3D2><B>Collations</B> </TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Case mismatch between column declaration and usage</B> =
</TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Compatibility issues can have an impact on organizations =
that use=20
            multiple collations to store their data. The column was =
declared=20
            with one type of case, but you are using it with another =
one. </P>
            <P>&nbsp; &nbsp; &nbsp; Example: Column declared as "NAME", =
but it=20
            is being used as "name" </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>It is generally a good idea to develop and test on a =
fully=20
            case-sensitive instance. That way, such problems can be =
detected and=20
            fixed. Please note that this issue is only relevant if you =
intend to=20
            create your database from a script on another instance which =
has=20
            case-sensitive collation. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Collations | Microsoft =
Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Changing Database =
Collation and=20
            dealing with TempDB Objects - Kimberly L. Tripp </P>
            <P>DISCLAIMER: Third-party link(s) are provided on an =
'as-is' basis.=20
            Microsoft does not offer any guarantees or warranties =
regarding the=20
            content on the third-party site(s). </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Case mismatch between variable declaration and =
usage</B>=20
        </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>The identifiers for variables, GOTO labels, temporary =
stored=20
            procedures, and temporary tables are in the default =
collation of the=20
            server instance. So even if a case-insensitive database is =
hosted in=20
            a case-sensitive instance of SQL Server, it will cause =
problems with=20
            variable declarations which are of the incorrect case. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>It is generally a good idea to develop and test on a =
fully=20
            case-sensitive instance. That way, such problems can be =
detected and=20
            fixed. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Collations | Microsoft =
Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Changing Database =
Collation and=20
            dealing with TempDB Objects - Kimberly L. Tripp </P>
            <P>DISCLAIMER: Third-party link(s) are provided on an =
'as-is' basis.=20
            Microsoft does not offer any guarantees or warranties =
regarding the=20
            content on the third-party site(s). </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Column defined with explicit collation other than =
database=20
            collation</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Collation differences may cause performance issues, as =
detailed=20
            in the articles referenced below. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Evaluate if this explicit collation is really required.=20
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SQL collation and =
performance =E2=80=93=20
            Esoteric </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SQL Collation and =
related=20
            performance impact, viewing collation in query plans =
=E2=80=93 SQL Server=20
            Premier Field Engineer Blog </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Collations | Microsoft =
Docs=20
        </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR></TBODY></TABLE></TD>
    <TD></TD></TR></TBODY></TABLE>
<TABLE class=3Dwikitable>
  <TBODY>
  <TR>
    <TD></TD>
    <TD>
      <TABLE class=3Dwikitable>
        <TBODY>
        <TR>
          <TD colSpan=3D2><B>Concurrency</B> </TD></TR>
        <TR>
          <TD></TD>
          <TD><B>SERIALIZABLE isolation level usage</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>The usage of SERIALIZABLE isolation level makes shared =
locks more=20
            restrictive by holding them until a transaction is =
completed,=20
            instead of releasing the shared lock as soon as the required =
table=20
            or data page is no longer needed whether the transaction has =
been=20
            completed or not. Here are the implications of operating at =
this=20
            isolation level: </P>
            <P><BR>1. Statements cannot read data that has been modified =
but not=20
            yet committed by other transactions. </P>
            <P>2. No other transactions can modify data that has been =
read by=20
            the current transaction until the current transaction =
completes.=20
</P>
            <P>3. Other transactions cannot insert new rows with key =
values that=20
            would fall in the range of keys read by any statements in =
the=20
            current transaction until the current transaction completes. =
</P>
            <P><BR>Therefore, usage of this isolation level (if not =
carefully=20
            designed and implemented) can lead to blocking. In addition, =
there=20
            are specific side effects of using SERIALIZABLE isolation in =
lock=20
            escalation scenario for partitioned tables. </P>
            <P><BR>Important Note: If a connection is pooled, resetting =
its=20
            isolation level does not reset the isolation level at the =
server. As=20
            a result, subsequent connections that use the same pooled =
inner=20
            connection start with their isolation levels set to that of =
the=20
            pooled connection. An alternative to turning off connection =
pooling=20
            is to set the isolation level explicitly for each =
connection, or use=20
            the SET TRANSACTION ISOLATION LEVEL statement in each batch =
to=20
            specify the isolation level required. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Review the usage of this isolation level and check if any =
lower=20
            levels will suffice. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Table Hints =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Snapshot Isolation in =
SQL Server=20
            </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Inappropriate usage of =
high=20
            isolation level isn=E2=80=99t just about blocking when it =
comes to=20
            performance =E2=80=93 CSS SQL Server Engineers </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Enabling Partition =
Level Locking in=20
            SQL Server 2008 | SQL Server Customer Advisory Team </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Serializable vs. =
Snapshot Isolation=20
            Level =E2=80=93 Craig Freedman's SQL Server Blog </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SERIALIZABLE isolation =
level=20
            (serialized transactions) and duplicate key insertion =
attempts =E2=80=93 Sql=20
            Stuff </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Range locks | SQL =
Server Database=20
            Engine Blog </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Some tips for using =
table hints in=20
            SQL Server 2016 - SSWUG.ORG </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Tips for using table =
hints in SQL=20
            Server 2014 - SSWUG.ORG </P>
            <P>DISCLAIMER: Third-party link(s) are provided on an =
'as-is' basis.=20
            Microsoft does not offer any guarantees or warranties =
regarding the=20
            content on the third-party site(s). </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>SET DEADLOCK PRIORITY usage</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>In some cases, the usage of this statement masks the real =
root=20
            cause. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>While setting deadlock priority can be a good practice in =

            specific cases, the reasons for the deadlock should also be =
reviewed=20
            in the first place. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SET DEADLOCK_PRIORITY=20
            (Transact-SQL) | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Detecting and Ending =
Deadlocks </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Monitoring SQL =
Database Deadlocks=20
            </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Deadlock =
Troubleshooting, Part 1 =E2=80=93=20
            Bart Duncan's SQL Weblog </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Deadlock =
Troubleshooting, Part 2 =E2=80=93=20
            Bart Duncan's SQL Weblog </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Deadlock =
Troubleshooting, Part 3 =E2=80=93=20
            Bart Duncan's SQL Weblog </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Kalen Delaney&nbsp;: =
Did you know?=20
            -- New Deadlock Priorities </P>
            <P>DISCLAIMER: Third-party link(s) are provided on an =
'as-is' basis.=20
            Microsoft does not offer any guarantees or warranties =
regarding the=20
            content on the third-party site(s). </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>WAITFOR DELAY/TIME usage</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Each WAITFOR statement has a thread associated with it. =
If many=20
            WAITFOR statements are specified on the same server, many =
threads=20
            can be tied up waiting for these statements to run. SQL =
Server=20
            monitors the number of threads associated with WAITFOR =
statements,=20
            and randomly selects some of these threads to exit if the =
server=20
            starts to experience thread starvation. You can create a =
deadlock by=20
            running a query with WAITFOR within a transaction that also =
holds=20
            locks preventing changes to the rowset that the WAITFOR =
statement is=20
            trying to access. SQL Server identifies these scenarios and =
returns=20
            an empty result set if the chance of such a deadlock exists. =

        </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Ensure that the statement which uses WAITFOR specifies =
the=20
            minimum wait interval possible. Also avoid using this =
statement=20
            during a long-running transaction. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; WAITFOR (Transact-SQL) =
| Microsoft=20
            Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR></TBODY></TABLE></TD>
    <TD></TD></TR></TBODY></TABLE>
<TABLE class=3Dwikitable>
  <TBODY>
  <TR>
    <TD></TD>
    <TD>
      <TABLE class=3Dwikitable>
        <TBODY>
        <TR>
          <TD colSpan=3D2><B>Cursors</B> </TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Cursor declared as Dynamic</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Dynamic cursors do not retrieve all information when the =
cursor=20
            is defined, but instead retrieve new records at each fetch. =
This=20
            results in the defining query being executed multiple times. =

        </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Minimize the usage of dynamic cursors. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Dynamic Cursors =
(Database Engine)=20
            </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Cursor declared as Forward-Only</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>This rule is provided for informational purposes. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Review the links provided below for more information. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Scope of Transact-SQL =
Cursor Names=20
            </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; sys.dm_exec_cursors =
(Transact-SQL)=20
            | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; DECLARE CURSOR =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Types of Cursors </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Choosing a Cursor Type =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Cursor declared as Global</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Global cursors are implicitly deallocated only at =
disconnect.=20
            However, the resources and locks being used to serve that =
cursor=20
            will be in use much longer than with a normal cursor. If the =

            connection is not closed in a timely manner, this could =
cause=20
            various performance issues. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Minimize the usage of global cursors. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Scope of Transact-SQL =
Cursor Names=20
            </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; sys.dm_exec_cursors =
(Transact-SQL)=20
            | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; DECLARE CURSOR =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Types of Cursors </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Choosing a Cursor Type =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Cursor declared as Insensitive</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Insensitive cursor will create a temporary table in =
TEMPDB, which=20
            increases overhead and can cause resource contention issues. =

        </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Minimize the usage of insensitive cursors. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; sys.dm_exec_cursors =
(Transact-SQL)=20
            | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; DECLARE CURSOR =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Types of Cursors </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Choosing a Cursor Type =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Cursor declared as Keyset</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Keyset cursors create a temporary table in tempdb that =
stores a=20
            copy of the keys used to uniquely identify a row. In =
addition,=20
            retrieving the data defined in the keyset cursor requires a =
join to=20
            the keyset. However, keyset cursors can increase the amount =
of=20
            contention in tempdb, especially if they are commonly used =
on a=20
            system. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Minimize the usage of keyset cursors. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; sys.dm_exec_cursors =
(Transact-SQL)=20
            | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; DECLARE CURSOR =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Types of Cursors </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Choosing a Cursor Type =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Cursor declared as Static</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Static cursors are slower and use more memory than =
forward-only=20
            cursors. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Minimize the usage of static cursors. Consider static =
cursors,=20
            only if scrolling is required and a keyset cursor is not=20
            appropriate. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; DMV =
sys.dm_exec_cursors=20
            (Transact-SQL) | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; DECLARE CURSOR =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Types of Cursors </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Choosing a Cursor Type =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Cursor is not closed</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Dangling cursors can leak memory and can be a potential =
security=20
            issue. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Close the cursor as quickly as possible. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; CLOSE (Transact-SQL) | =
Microsoft=20
            Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; sys.dm_exec_cursors =
(Transact-SQL)=20
            | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; DECLARE CURSOR =
(Transact-SQL) |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Cursor is not deallocated</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Dangling cursors can leak memory and can be a potential =
security=20
            issue. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Close and deallocate the cursor as quickly as possible.=20
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; DEALLOCATE =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; sys.dm_exec_cursors =
(Transact-SQL)=20
            | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; DECLARE CURSOR =
(Transact-SQL) |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>List all instances of cursor usage</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Cursor usage can be impactful on performance, as it =
induces a=20
            row-by-row processing instead of the preferred relational=20
            processing. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Carefully review the use of cursors. In many cases the =
use of=20
            modern T-SQL constructs like Common Table Expressions, the =
OUTPUT=20
            clause and others can mitigate the need to use cursors. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; sys.dm_exec_cursors =
(Transact-SQL)=20
            | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; DECLARE CURSOR =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Types of Cursors =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR></TBODY></TABLE></TD>
    <TD></TD></TR></TBODY></TABLE>
<TABLE class=3Dwikitable>
  <TBODY>
  <TR>
    <TD></TD>
    <TD>
      <TABLE class=3Dwikitable>
        <TBODY>
        <TR>
          <TD colSpan=3D2><B>Database Design</B> </TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Avoid using types of variable length that are size 1 or =
2</B>=20
          </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>When you use data types of variable length such as =
VARCHAR,=20
            NVARCHAR, and VARBINARY, you incur an additional storage =
cost to=20
            track the length of the value stored in the data type. In =
addition,=20
            columns of variable length are stored after all columns of =
fixed=20
            length, which can have performance implications. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>If the length of the type will be very small (size 1 or =
2) and=20
            consistent, declare them as a type of fixed length, such as =
CHAR,=20
            NCHAR, and BINARY. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; nchar and nvarchar =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Using char and varchar =
Data=20
        </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Check for VARCHAR / NVARCHAR of length MAX</B> =
</TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>The large object data types like varchar(max), =
nvarchar(max),=20
            varbinary(max), text, ntext, image, and xml can be up to 2 =
GB in=20
            size and can be used as variables or parameters in stored=20
            procedures. Parameters and variables that are defined as a =
LOB data=20
            type use main memory as storage if the values are small. =
However,=20
            large values are stored in TEMPDB. Therefore, they are prone =
to=20
            potential physical and logical bottlenecks in TEMPDB. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Use the appropriate data type as per the anticipated =
sizes of=20
            data. If you are using SQL 2008 and above, consider these to =
pass in=20
            larger (delimited) strings to a stored procedure, like new =
Table=20
            Valued Parameter feature. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Capacity Planning for =
tempdb </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; How It Works: Gotcha: =
*VARCHAR(MAX)=20
            caused my queries to be slower =E2=80=93 CSS SQL Server =
Engineers </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; nchar and nvarchar =
(Transact-SQL) |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Clustered GUIDs identified</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>GUIDs are poor choices for clustered keys, they are not =
useful in=20
            BETWEEN clauses, neither are they narrow or sequential. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Please review the article in the Reading section for =
guidance of=20
            how to choose a good clustered index. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Clustered Index Design =
Guidelines=20
            </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Finding a better =
candidate for your=20
            SQL Server clustered indexes </P>
            <P>DISCLAIMER: Third-party link(s) are provided on an =
'as-is' basis.=20
            Microsoft does not offer any guarantees or warranties =
regarding the=20
            content on the third-party site(s). </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Constraint with NOCHECK</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Potential for data integrity issues. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Review whether the NOCHECK is by design and carefully =
examine the=20
            impacts if NOCHECK is required. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SQL Constraints =
=E2=80=93 CHECK and NOCHECK=20
            </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Unique Constraints and =
Check=20
            Constraints | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Disable Check =
Constraints with=20
            INSERT and UPDATE Statements | Microsoft Docs </P>
            <P>DISCLAIMER: Third-party link(s) are provided on an =
'as-is' basis.=20
            Microsoft does not offer any guarantees or warranties =
regarding the=20
            content on the third-party site(s). </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Heap tables identified</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Heaps have impact on performance of INSERTs due to free =
space=20
            scans. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Please review the article in the Reading section for =
guidance. If=20
            a table should have just one index, it should generally be a =

            clustered index. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Clustered Tables vs =
Heap Tables=20
</P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SQL Server Tables =
without a=20
            Clustered Index </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Clustered Index Design =
Guidelines=20
            </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Finding a better =
candidate for your=20
            SQL Server clustered indexes </P>
            <P>DISCLAIMER: Third-party link(s) are provided on an =
'as-is' basis.=20
            Microsoft does not offer any guarantees or warranties =
regarding the=20
            content on the third-party site(s). </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Partitioned tables have non-partitioned indexes</B> =
</TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Non-partitioned indexes on partitioned tables affects =
partial=20
            restores, maintenance, switches, etc. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>This issue should be fired when we have a partitioned =
table and=20
            found indexes that are not partitioned in that table. The=20
            recommendation is to align the index with the partitioned =
table.=20
          </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Special Guidelines for =
Partitioned=20
            Indexes </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Indexing for =
Partitioned Tables SQL=20
            Fool </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Partitioned Tables and =
Indexes |=20
            Microsoft Docs </P>
            <P>DISCLAIMER: Third-party link(s) are provided on an =
'as-is' basis.=20
            Microsoft does not offer any guarantees or warranties =
regarding the=20
            content on the third-party site(s). </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Tables have been identified that have duplicate =
indexes</B>=20
          </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>An index is considered to be a duplicate if it references =
the=20
            same column and ordinal position as another index in the =
same=20
            database. Duplicate indexes provide no performance or =
manageability=20
            benefits. In addition, each duplicate index increases the =
I/O=20
            overhead of ongoing insert, update, and delete operations, =
as well=20
            as index rebuilds and index reorganizations. The overall =
result is=20
            reduced insert, update, and delete performance, and also =
prolonged=20
            index maintenance periods and wasted disk space. </P>
            <P> </P>
            <P>Eliminating the duplicate index or indexes can provide an =

            immediate performance benefit for data modifications and =
also for=20
            index rebuilds and reorganizations. Existing queries that =
reference=20
            the index will continue to use the original, non-duplicated =
index.=20
            </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Duplicate indexes should always be avoided and usually =
indicate=20
            that correct processes for developer change control are not =
being=20
            enforced. You should remove duplicate indexes from the =
database=20
            unless they are explicitly referenced within the calling=20
            application. If they are referenced in the calling =
application, try=20
            to remove the referencing index hints or the batch =
references so=20
            that you can drop the duplicate indexes from the database. =
</P>
            <P><BR>Ensure that no applications explicitly reference the=20
            duplicate indexes that you plan to drop. Also, script out =
the=20
            duplicate index in SQL Server Management Studio in the event =
that=20
            you will have to create it again. </P>
            <P> </P>
            <P>After scripting the index, issue a DROP INDEX command =
against the=20
            duplicate index in order to remove it from the database. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; CREATE INDEX =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; DROP INDEX =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; How to: Generate a =
Script (SQL=20
            Server Management Studio) </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SQL Swiss Army Knife =
#15 =E2=80=93 Handling=20
            duplicate indexes =E2=80=93 Blog do Ezequiel </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Tables with indexes having key length exceeding 900 =
bytes</B>=20
          </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>The maximum key length for indexes is 900 bytes prior to =
SQL 2016=20
            and 1700 bytes for SQL Server 2016. Creating indexes with =
key=20
            lengths greater than maximum size causes a warning at =
creation time=20
            and can cause runtime errors during INSERTs. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Select short key lengths as far as possible. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Create Indexes with =
Included=20
            Columns | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SQL Server Index =
Design Guide </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Maximum Size of Index =
Keys=20
        </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Tables with indexes having too many included =
columns.</B>=20
        </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Having too many included columns in an index will reduce =
data=20
            update performance and would also increase storage space=20
            requirements. This rule checks and will raise issues when =
the number=20
            of included columns is over twice the number of key columns =
or when=20
            the number of key columns is more than 1. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Minimize included columns to those absolutely required to =
avoid=20
            frequent key / row lookups. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Create Indexes with =
Included=20
            Columns | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SQL Server Index =
Design Guide=20
          </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Tables with more indexes than columns</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>The following tables have more indexes created on them =
than there=20
            are columns in the table. This will generally degrade INSERT =
/=20
            UPDATE / DELETE activity. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Carefully review each table to see if all the indexes are =

            required. Drop redundant / duplicate indexes. Test and check =
the=20
            execution plans for improvements. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Clustered Index Design =
Guidelines=20
            </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Finding a better =
candidate for your=20
            SQL Server clustered indexes </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SQL Server Index =
Design Guide </P>
            <P>DISCLAIMER: Third-party link(s) are provided on an =
'as-is' basis.=20
            Microsoft does not offer any guarantees or warranties =
regarding the=20
            content on the third-party site(s). </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Tables without any indexes</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>The following tables do not have any indexes created on =
them.=20
            This may be oversight or may be a result of the fact that =
they were=20
            tables created for a temporary purpose. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Review this result in conjunction with the "No supporting =
index=20
            for WHERE clause columns" issue and create indexes as =
appropriate.=20
            Test and check the execution plans for improvements. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Clustered Index Design =
Guidelines=20
            </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Finding a better =
candidate for your=20
            SQL Server clustered indexes </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SQL Server Index =
Design Guide </P>
            <P>DISCLAIMER: Third-party link(s) are provided on an =
'as-is' basis.=20
            Microsoft does not offer any guarantees or warranties =
regarding the=20
            content on the third-party site(s). </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Tables without any primary or unique keys</B> =
</TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>The following tables do not have any primary key or =
unique key=20
            constraints created on them. While not all tables require =
such=20
            constraints, most updateable tables should have such a key =
defined=20
            to avoid update anomaly. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>This is a database design issue. Careful review of the =
logical=20
            design of the tables is required before fixing this. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Database Design and =
Performance=20
            (SQL Server Compact) </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Lesson 3: Optimizing =
the Database=20
            Design by Denormalizing </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Normalization </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Lesson 2: Designing a =
Normalized=20
            Database </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Unique or primary key constraint should be explicitly=20
            named</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>If the primary key constraint is not explicitly named it =
can=20
            complicate database maintenance scripts as the name will =
then be=20
            auto-generated. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Always explicitly name any primary / unique key =
constraints.=20
          </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Doing Something About =
Auto=20
            Generated Names | Strate SQL </P>
            <P>DISCLAIMER: Third-party link(s) are provided on an =
'as-is' basis.=20
            Microsoft does not offer any guarantees or warranties =
regarding the=20
            content on the third-party site(s). </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Unreferenced Tables</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>The following tables were not observed to have any =
reference from=20
            the T-SQL objects examined. They may be truly unused. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Carefully review if there are any other references, such =
as=20
            Ad-Hoc queries from the front-end application, which may be =
using=20
            these tables. Otherwise, consider dropping these tables. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR></TBODY></TABLE></TD>
    <TD></TD></TR></TBODY></TABLE>
<TABLE class=3Dwikitable>
  <TBODY>
  <TR>
    <TD></TD>
    <TD>
      <TABLE class=3Dwikitable>
        <TBODY>
        <TR>
          <TD colSpan=3D2><B>Deprecation</B> </TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Ability to return result sets from triggers is =
deprecated</B>=20
          </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>The ability to return results from triggers will be =
removed in=20
            the next version of SQL Server (still works in SQL Server =
2016).=20
            Triggers that return result sets may cause unexpected =
behavior in=20
            applications that are not designed to work with them. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Avoid returning result sets from triggers in new =
development=20
            work, and plan to modify applications that currently do =
this.=20
        </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; CREATE TRIGGER =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Deprecated Database =
Engine Features=20
            in SQL Server 2016 | Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Avoid using a string literal to alias a column</B> =
</TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>We detected the usage of column alias syntax of one of =
the types:=20
            </P>
            <P>&nbsp;'colAlias' =3D someColName </P>
            <P> </P>
            <P>&nbsp;or </P>
            <P> </P>
            <P>&nbsp;someColName 'colAlias'. </P>
            <P><BR>The usage of string literal values as column aliases =
has been=20
            deprecated since SQL Server 2005 and may cause issues in =
specific=20
            scenarios such as BACPAC export. In addition, the support =
for this=20
            language feature may be removed in future releases of SQL =
Server. It=20
            still works in SQL Server 2016. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Avoid the usage of string literals as column aliases and =
instead=20
            use the AS syntax as recommended in the reading links below. =

        </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Deprecated Database =
Engine Features=20
            in SQL Server 2016 | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Aaron Bertrand&nbsp;: =
Bad Habits to=20
            Kick&nbsp;: Using AS instead of =3D for column aliases </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; No longer able to =
create a bacpac:=20
            SQL70015: Deprecated feature 'String literals as column =
aliases' is=20
            not supported on SQL Azure - Stack Overflow </P>
            <P>DISCLAIMER: Third-party link(s) are provided on an =
'as-is' basis.=20
            Microsoft does not offer any guarantees or warranties =
regarding the=20
            content on the third-party site(s). </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Certain XPath functions are not allowed in OPENXML=20
            queries</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>MSXML 3.0 is now the underlying engine that is used to =
process=20
            XPath expressions that are used within OPENXML queries. =
MSXML 3.0=20
            has a stricter XPath 1.0 engine in which support for the =
following=20
            functions has been removed: </P>
            <P><BR>format-number() </P>
            <P>formatNumber() </P>
            <P>current() </P>
            <P>element-available() </P>
            <P>function-available() </P>
            <P>system-property() </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>In the case of format-number() and formatNumber(), you =
can use=20
            Transact-SQL. For the other unsupported functions listed =
earlier,=20
            there is no direct workaround. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Update OPENXML XPath =
expressions to=20
            remove unsupported functions </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Column aliases in ORDER BY clause cannot be prefixed by =
table=20
            alias</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>In SQL Server 2005 or later, column aliases in the ORDER =
BY=20
            clause cannot be prefixed by the table alias. For example, =
the=20
            following query executes in SQL Server 2000, but returns an =
error in=20
            SQL Server 2008: </P>
            <P><BR>SELECT FirstName AS f, LastName AS l </P>
            <P>FROM Person.Contact p </P>
            <P>ORDER BY p.l </P>
            <P><BR>The SQL Server 2008 Database Engine does not match =
p.l in the=20
            ORDER BY clause to a valid column in the table. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Modify queries that use column aliases prefixed by table =
aliases=20
            in the ORDER BY clause in either of the following ways: </P>
            <P><BR>- Do not prefix the column alias in the ORDER BY =
clause, if=20
            possible. </P>
            <P>- Replace the column alias with the column name(s). =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Column aliases in =
ORDER BY clause=20
            cannot be prefixed by table alias </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Tibor Karaszi&nbsp;: =
Why can't we=20
            have column alias in ORDER BY? </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Column Alias Usage =
Everywhere in a=20
            Query | Microsoft Connect </P>
            <P>DISCLAIMER: Third-party link(s) are provided on an =
'as-is' basis.=20
            Microsoft does not offer any guarantees or warranties =
regarding the=20
            content on the third-party site(s). </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Column named NEXT</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Tables or columns named NEXT were detected. Sequences, =
introduced=20
            in Microsoft SQL Server 2012, use the ANSI standard NEXT =
VALUE FOR=20
            function. If a table or a column is named NEXT and the =
column is=20
            aliased as VALUE, and if the ANSI standard AS is omitted, =
the=20
            resulting statement can cause an error. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Rewrite statements to include the ANSI standard AS =
keyword when=20
            aliasing a table or column. For example, when a column is =
named NEXT=20
            and that column is aliased as VALUE, the query SELECT NEXT =
VALUE=20
            FROM Table will cause an error and should be rewritten as =
SELECT=20
            NEXT AS VALUE FROM Table. Similarly, when a table is named =
NEXT and=20
            that table is aliased as VALUE, the query SELECT Col1 FROM =
NEXT=20
            VALUE will cause an error and should be rewritten as SELECT =
Col1=20
            FROM NEXT AS VALUE. Also, check the list of reserved =
keywords for=20
            SQL Server and do not use them in future development. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Reserved Keywords =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; NEXT VALUE FOR =
(Transact-SQL) |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>COMPUTE clause is not allowed in database compatibility =

            110</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>The COMPUTE clause generates totals that appear as =
additional=20
            summary columns at the end of the result set. However, this =
clause=20
            is no longer supported in SQL Server 2012. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Use ROLLUP operator instead. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; COMPUTE (Transact-SQL) =
</P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; GROUP BY =
(Transact-SQL) | Microsoft=20
            Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Constant expressions are not allowed in the ORDER BY =
clause=20
            in 90 or later compatibility modes</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Constant expressions are allowed (and ignored) in the =
ORDER BY=20
            clause when the database compatibility mode is set to 80 and =

            earlier. However, these expressions in the ORDER BY clause =
will=20
            cause the statement to fail when the database compatibility =
mode is=20
            set to 90 or later. </P>
            <P><BR>Here is an example of such problematic statements: =
</P>
            <P><BR>SELECT * FROM Production.Product </P>
            <P>ORDER BY CASE WHEN&nbsp; 1 =3D 2 THEN 3 ELSE 2 END </P>
            <P><BR>Do note that this is valid though: </P>
            <P><BR>declare @i int =3D 0 </P>
            <P>SELECT * FROM Production.Product </P>
            <P>ORDER BY CASE WHEN @i + 1 =3D 2 THEN 3 ELSE 2 END =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Before you change the database compatibility mode to 90 =
or later,=20
            modify statements that use constant expressions in the ORDER =
BY=20
            clause to use a column name or column alias representing the =

            position of the name or alias in the select list. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SQL Server Performance =
A constant=20
            expression was encountered in the ORDER BY list, position =
%i. </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Breaking Changes to =
Database Engine=20
            Features in SQL Server 2005 </P>
            <P>DISCLAIMER: Third-party link(s) are provided on an =
'as-is' basis.=20
            Microsoft does not offer any guarantees or warranties =
regarding the=20
            content on the third-party site(s). </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Database options ANSI_NULLS, ANSI_PADDING and=20
            CONCAT_NULLS_YIELDS_NULL will always be set to ON</B> =
</TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>In a future version of SQL Server, ANSI_NULLS, =
ANSI_PADDING and=20
            CONCAT_NULLS_YIELDS_NULL will always be set to ON, =
regardless of the=20
            ALTER DATABASE option turning it off. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>There is no remedial action other than awareness. If this =
change=20
            impacts code, you will need to handle that accordingly in =
the future=20
            before migrating to a new version of SQL Server. This =
behavior did=20
            not change yet in SQL Server 2016. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Deprecated Database =
Engine Features=20
            in SQL Server 2016 | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SET ANSI_NULLS =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SET ANSI_PADDING =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SET =
CONCAT_NULL_YIELDS_NULL=20
            (Transact-SQL) | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; ALTER DATABASE SET =
Options=20
            (Transact-SQL) | Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>DATABASEPROPERTY is deprecated</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>This has been discontinued in SQL Server 2012. Do not use =
this=20
            feature in new development work, and modify applications =
that=20
            currently use this feature as soon as possible. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Use DATABASEPROPERTYEX instead. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; DATABASEPROPERTY =
(Transact-SQL)=20
</P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; DATABASEPROPERTYEX =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Discontinued Database =
Engine=20
            Functionality in SQL Server 2012 </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Deprecated data types TEXT, IMAGE or NTEXT</B> =
</TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>In some cases, using TEXT, IMAGE or NTEXT might harm =
performance.=20
            These data types are checked as deprecated. Still works in =
SQL=20
            Server 2016. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Deprecated data types are marked to be discontinued on =
next=20
            versions of SQL Server, should use new data types such as:=20
            (varchar(max), nvarchar(max), varbinary(max) and etc.) =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; ntext, text, and image =

            (Transact-SQL) | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Deprecated Database =
Engine Features=20
            in SQL Server 2016 | Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Deprecated DBCC commands</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Many DBCC commands that were available in prior releases =
have=20
            been replaced with DMVs and DMFs, or no longer exist in SQL =
Server=20
            2005 and above. Therefore, using these commands may cause =
errors and=20
            unforeseen effects after upgrading SQL Server. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>SQL Server Upgrade Advisor and SQL Books Online may =
contain=20
            documentation for equivalent DMVs and DMFs. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SQL Server, Deprecated =
Features=20
            Object | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Discontinued Database =
Engine=20
            Functionality in SQL Server 2016 | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Deprecated DBCC =
commands have now=20
            been removed </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Deprecated functions READTEXT, WRITETEXT or =
UPDATETEXT</B>=20
        </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>In some cases, using READTEXT, WRITETEXT or UPDATETEXT =
could harm=20
            the performance. Start using the new features available. =
These=20
            functions are marked as deprecated. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Deprecated functions are marked to be discontinued on =
next=20
            versions of SQL Server, should avoid their uses. Still works =
in SQL=20
            Server 2016 </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; READTEXT =
(Transact-SQL) | Microsoft=20
            Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; WRITETEXT =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; UPDATETEXT =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Deprecated Database =
Engine Features=20
            in SQL Server 2016 | Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Deprecated Procedures</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Detected statements that reference undocumented system =
stored=20
            procedures and extended stored procedures that are not =
available in=20
            SQL Server 2008 and above. Statements that reference these =
objects=20
            will fail. Do not use undocumented system objects or APIs as =
the=20
            functionality might change or be removed without =
notification in a=20
            future release. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Deprecated procedures will be removed in a future version =
of SQL=20
            Server. Avoid using deprecated procedures in new development =
and=20
            modify applications which currently use them. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Deprecated Database =
Engine Features=20
            in SQL Server 2016 | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Breaking Changes to =
Database Engine=20
            Features in SQL Server 2012 </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Encryption using RC4 or RC4_128 is deprecated</B> =
</TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>We detected a symmetric key which uses a deprecated =
encryption=20
            algorithm. The RC4 algorithm is only supported for backward=20
            compatibility. New material can only be encrypted using RC4 =
or=20
            RC4_128 when the database is in compatibility level 90 or =
100. (Not=20
            recommended.) Use a newer algorithm such as one of the AES=20
            algorithms instead. In SQL Server 2012 and higher material =
encrypted=20
            using RC4 or RC4_128 can be decrypted in any compatibility =
level.=20
            Repeated use of the same RC4 or RC4_128 KEY_GUID on =
different blocks=20
            of data will result in the same RC4 key because SQL Server =
does not=20
            provide a salt automatically. Using the same RC4 key =
repeatedly is a=20
            well-known error that will result in very weak encryption.=20
            Therefore, we have deprecated the RC4 and RC4_128 keywords. =
This=20
            feature will be removed in a future version of Microsoft SQL =
Server.=20
            </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Do not use this feature in new development work, and =
modify=20
            applications that currently use this feature as soon as =
possible.=20
            Use another encryption algorithm such as AES. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Choose an Encryption =
Algorithm |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Deprecated Database =
Engine Features=20
            in SQL Server 2016 | Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>FASTFIRSTROW table hint usage</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>The usage of FASTFIRSTROW as a table hint has been =
discontinued=20
            in SQL 2012. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>We recommend that hints be used only as a last resource =
by=20
            experienced developers and database administrators. =
Specifically,=20
            for FASTFIRSTROW hint, you can evaluate the query hint =
OPTION (FAST=20
            1) instead. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Discontinued Database =
Engine=20
            Functionality in SQL Server 2012 </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Query Hints =
(Transact-SQL) |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>FOR BROWSE is not allowed in views in 90 or later=20
            compatibility modes</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>The FOR BROWSE clause is allowed (and ignored) in views =
when the=20
            database compatibility mode is set to 80. The FOR BROWSE =
clause is=20
            not allowed in views when the database compatibility mode is =
set to=20
            90 or later. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Before you change the database compatibility mode to 90 =
or later,=20
            remove the FOR BROWSE clause from view definitions. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; FOR BROWSE is not =
allowed in views=20
            in 90 or later compatibility modes </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>FOR XML AUTO queries return derived table references in =
90 or=20
            later compatibility modes</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>When the database compatibility level is set to 90 or =
later, FOR=20
            XML queries that execute in AUTO mode return references to =
derived=20
            table aliases. When the compatibility level is set to 80, =
FOR XML=20
            AUTO queries return references to the base tables that =
define a=20
            derived table. For example, the following query, which =
includes a=20
            derived table, produces different results under =
compatibility levels=20
            80, 90, or later: </P>
            <P><BR>SELECT * FROM </P>
            <P>&nbsp;&nbsp; (SELECT a.id AS a, b.id AS b </P>
            <P>&nbsp; &nbsp; FROM Test a JOIN Test b ON a.id=3Db.id) AS=20
            DerivedTest FOR XML AUTO; </P>
            <P><BR>Under compatibility level 80, the query returns the =
following=20
            results. The results reference the base table aliases a and =
b of the=20
            derived table instead of the derived table alias. </P>
            <P><BR>&nbsp;&lt;a a=3D"1"&gt;&lt;b=20
            b=3D"1"/&gt;&lt;/a&gt;&lt;/li&gt;&lt;a a=3D"2"&gt;&lt;b=20
            b=3D"2"/&gt;&lt;/a&gt;&lt;/li&gt; </P>
            <P><BR>Under compatibility level 90 or later, the query =
returns=20
            references to the derived table alias DerivedTest instead of =
to the=20
            derived table's base tables. </P>
            <P><BR>&nbsp;&lt;DerivedTest a=3D"1" =
b=3D"1"/&gt;&lt;DerivedTest a=3D"2"=20
            b=3D"2"/&gt; </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Modify your application as required to account for the =
changes in=20
            results of FOR XML AUTO queries that include derived tables =
and that=20
            run under compatibility level 90 or later. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; FOR XML AUTO queries =
return derived=20
            table references in 90 or later compatibility modes =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Identical table names in the same FROM clause should be =

            prefixed by table alias</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>In SQL Server 2005 or later, duplicate table names (even =
if they=20
            are fully qualified using the DBname.schema.tablename =
convention)=20
            are only allowed in a FROM clause if they have unique =
aliases. In=20
            SQL 2000, these would have been allowed, even without the =
alias.=20
</P>
            <P>Here is an example of what is no longer allowed: </P>
            <P><BR>SELECT t.x FROM db1.dbo.t, db2.dbo.t </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Prefix all tables in the FROM clause with aliases, and =
refer to=20
            the columns with the alias prefixed. In the example provided =
above,=20
            the fix would look like the below: </P>
            <P><BR>SELECT T1.x FROM db1.dbo.t as T1, db2.dbo.t as T2 =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Msg 1013: The object =
"%s" and "%s"=20
            in the FROM clause have the same exposed names. Use =
correlation=20
            names to distinguish them. =E2=80=93 La bodeguita de Nacho =
</P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; "FROM clause have the =
same exposed=20
            names. Use correlation names to distinguish them" </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; sql server - How can I =
correct the=20
            correlation names on this sql join? - Stack Overflow </P>
            <P>DISCLAIMER: Third-party link(s) are provided on an =
'as-is' basis.=20
            Microsoft does not offer any guarantees or warranties =
regarding the=20
            content on the third-party site(s). </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Inline XDR Schema Generation is deprecated</B> =
</TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>The XMLDATA directive to the FOR XML option is =
deprecated. Still=20
            works in SQL Server 2016. The XMLDATA directive in FOR XML =
returns=20
            an inline XDR schema together with the query result. =
However, the=20
            XDR schema does not support all the new data types and other =

            enhancements introduced in SQL Server 2005. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Use XSD generation in the case of RAW and AUTO modes. =
There is no=20
            replacement for the XMLDATA directive in EXPLICIT mode. You =
can also=20
            request an inline XSD schema by using the XMLSCHEMA =
directive.=20
          </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Generate an Inline XDR =
Schema |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Deprecated Database =
Engine Features=20
            in SQL Server 2016 | Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Legacy style RAISERROR calls should be replaced with =
modern=20
            equivalents</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>RAISERROR calls like the below example are termed as =
legacy-style=20
            because they do not include the commas and the parenthesis. =
</P>
            <P><BR>&nbsp;RAISERROR 50001 'this is a test' </P>
            <P><BR>This method of calling RAISERROR is deprecated in SQL =
Server=20
            2008 and removed in SQL Server 2012. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Rewrite the statement using the current RAISERROR syntax, =
or=20
            evaluate if the modern approach of TRY...CATCH...THROW is =
feasible=20
            if you are using SQL Server 2012 or above. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Discontinued Database =
Engine=20
            Functionality in SQL Server 2012 </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Please clarify which =
RAISERROR=20
            variation is on the deprecation list </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; TRY...CATCH =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; THROW (Transact-SQL) | =
Microsoft=20
            Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Multiple table hints specified without a comma =
separator</B>=20
          </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Separating hints by spaces rather than commas is a =
deprecated=20
            feature. This feature will be removed in a future version of =

            Microsoft SQL Server. Still works in SQL Server 2016. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Use hints as a last resource. We recommend using commas =
between=20
            table hints. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Table Hints =
(Transact-SQL) |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>NOLOCK table hint usage in FROM clause of DELETE</B> =
</TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>READUNCOMMITTED and NOLOCK cannot be specified for tables =

            modified by INSERT, UPDATE or DELETE operations. The SQL =
Server=20
            query optimizer ignores the READUNCOMMITTED and NOLOCK hints =
in the=20
            FROM clause that apply to the target table of an UPDATE or =
DELETE=20
            statement. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Support for use of the NOLOCK hint in the FROM clause =
that apply=20
            to the target table of a DELETE statement will be removed in =
a=20
            future version. Still wotks in SQL Server 2016. Avoid using =
these=20
            hints in this context in new development work, and plan to =
modify=20
            applications that currently use them. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Table Hints =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; DELETE (Transact-SQL) =
</P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Deprecated Database =
Engine Features=20
            in SQL Server 2016 | Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>NOLOCK table hint usage in FROM clause of UPDATE</B> =
</TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>READUNCOMMITTED and NOLOCK cannot be specified for tables =

            modified by INSERT, UPDATE or DELETE operations. The SQL =
Server=20
            query optimizer ignores the READUNCOMMITTED and NOLOCK hints =
in the=20
            FROM clause that apply to the target table of an UPDATE or =
DELETE=20
            statement. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Support for use of the NOLOCK hint in the FROM clause =
that apply=20
            to the target table of a DELETE statement will be removed in =
a=20
            future version. Still wotks in SQL Server 2016. Avoid using =
these=20
            hints in this context in new development work, and plan to =
modify=20
            applications that currently use them. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Table Hints =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; UPDATE (Transact-SQL) =
| Microsoft=20
            Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Deprecated Database =
Engine Features=20
            in SQL Server 2016 | Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Non ANSI style left outer join usage</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Will not work in compatibility levels 90+ </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Refactor to use ANSI syntax (LEFT OUTER JOIN). =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SQL Server Upgrade =
Advisor:=20
            Considerations when upgrading from SQL 2000 to SQL 2012 =
=E2=80=93 Premier=20
            Field Engineering Developer Blog </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Discontinued Database =
Engine=20
            Functionality in SQL Server 2005 </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; FROM (Transact-SQL) | =
Microsoft=20
            Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Visual Representation =
of SQL Joins=20
            - CodeProject </P>
            <P>DISCLAIMER: Third-party link(s) are provided on an =
'as-is' basis.=20
            Microsoft does not offer any guarantees or warranties =
regarding the=20
            content on the third-party site(s). </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Non ANSI style right outer join usage</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Will not work in compatibility levels 90+ </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Refactor to use ANSI syntax (RIGHT OUTER JOIN). =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SQL Server Upgrade =
Advisor:=20
            Considerations when upgrading from SQL 2000 to SQL 2012 =
=E2=80=93 Premier=20
            Field Engineering Developer Blog </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Discontinued Database =
Engine=20
            Functionality in SQL Server 2005 </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; FROM (Transact-SQL) | =
Microsoft=20
            Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Visual Representation =
of SQL Joins=20
            - CodeProject </P>
            <P>DISCLAIMER: Third-party link(s) are provided on an =
'as-is' basis.=20
            Microsoft does not offer any guarantees or warranties =
regarding the=20
            content on the third-party site(s). </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Numbered Procedures are deprecated</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Numbered procedures are deprecated in SQL Server 2005 and =
above.=20
            Still works in SQL Server 2016. Use of numbered procedures =
is=20
            discouraged. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Do not use numbered stored procedures. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; =
sys.numbered_procedures=20
            (Transact-SQL) | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Deprecated Database =
Engine Features=20
            in SQL Server 2016 | Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Objects have been identified that use XML FOR EXPLICIT=20
            clause</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Avoid using FOR XML EXPLICIT in Microsoft SQL Server 2005 =
or=20
            later. Using FOR XML TYPE, PATH will generally provide more =
compact=20
            and maintainable code. In addition, it will typically =
perform=20
            better. </P>
            <P><BR>In SQL Server 2000, there is no alternative to FOR =
XML=20
            EXPLICIT. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>SQL Server 2005 and above XML generation should be coded =
using=20
            FOR XML TYPE, PATH. However, FOR XML EXPLICIT should be used =
only in=20
            rare situations, when it provides better performance and =
more=20
            compact code. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Use EXPLICIT Mode with =
FOR XML |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; FOR XML (SQL Server) | =
Microsoft=20
            Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>ORDER BY clauses in views</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>The ORDER BY clause is not valid in views, inline =
functions,=20
            derived tables, and subqueries, unless the TOP or OFFSET and =
FETCH=20
            clauses are also specified. In SQL Server 2005 and above, =
the ORDER=20
            BY clause in a view definition is used only to determine the =
rows=20
            that are returned by the TOP or OFFSET and FETCH clauses. =
The ORDER=20
            BY clause does not guarantee ordered results when the view =
is=20
            queried, unless ORDER BY is also specified in the query =
itself.=20
          </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Specify the ORDER BY clause only in the outermost query =
and not=20
            inside views. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; FIX: When you query =
through a view=20
            that uses the ORDER BY clause in SQL Server 2008, the result =
is=20
            still returned in random order </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; TOP 100 Percent ORDER =
BY Considered=20
            Harmful. =E2=80=93 Tips, Tricks, and Advice from the SQL =
Server Query=20
            Optimization Team </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Management Studio =
generates invalid=20
            TOP 100 PERCENT ... ORDER BY in views | Microsoft Connect =
</P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Breaking Changes to =
Database Engine=20
            Features in SQL Server 2005 </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>ORDER BY specifies integer ordinal</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>This rule checks stored procedures, functions, views and =
triggers=20
            for use of ORDER BY clause specifying ordinal column numbers =
as sort=20
            columns. A sort column can be specified as a nonnegative =
integer=20
            representing the position of the name or alias in the select =
list,=20
            but this is not recommended. An integer cannot be specified =
when the=20
            order_by_expression appears in a ranking function. A sort =
column can=20
            include an expression, but when the database is in SQL 90=20
            compatibility mode or higher, the expression cannot resolve =
to a=20
            constant. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Specify the sort column as a name or column alias rather =
than=20
            hard coding the ordinal. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Aaron Bertrand&nbsp;: =
Bad habits to=20
            kick&nbsp;: ORDER BY ordinal </P>
            <P>DISCLAIMER: Third-party link(s) are provided on an =
'as-is' basis.=20
            Microsoft does not offer any guarantees or warranties =
regarding the=20
            content on the third-party site(s). </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Remove references to undocumented system tables</B> =
</TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Many system tables that were undocumented in prior =
releases have=20
            changed or no longer exists, therefore, using these tables =
may cause=20
            errors after upgrading to SQL Server 2008 or above. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>SQL Server Upgrade Advisor and SQL Books Online may =
contain=20
            documentation for equivalent tables. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Deprecated Database =
Engine Features=20
            in SQL Server 2016 | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Breaking Changes to =
Database Engine=20
            Features in SQL Server 2012 </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>SERVERPROPERTY('LCID') result differs from SQL 2000</B> =

</TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>In SQL Server 2000, when SERVERPROPERTY('LCID') is run on =
binary=20
            collation servers, the function always returns a value of =
33280,=20
            regardless of the actual collation of the server. In SQL =
Server 2005=20
            or later versions, SERVERPROPERTY('LCID') returns the =
Windows locale=20
            identifier (LCID) that corresponds to the collation of the =
server.=20
            </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>This can be a consideration when upgrading to SQL Server =
2005 or=20
            above. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SERVERPROPERTY returns =
correct=20
            result for LCID property in SQL Server 2005 </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>SET options ANSI_NULLS, ANSI_PADDING and=20
            CONCAT_NULLS_YIELDS_NULL will always be set to ON</B> =
</TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>In a future version of SQL Server, ANSI_NULLS, =
ANSI_PADDING and=20
            CONCAT_NULLS_YIELDS_NULL will always be set to ON, =
regardless of the=20
            SET option turning it off. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>There is no remedial action other than awareness. If this =
change=20
            impacts code, you will need to handle that accordingly in =
the future=20
            before migrating to a new version of SQL Server. This =
behavior did=20
            not change yet in SQL Server 2016. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Deprecated Database =
Engine Features=20
            in SQL Server 2016 | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SET ANSI_NULLS =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SET ANSI_PADDING =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SET =
CONCAT_NULL_YIELDS_NULL=20
            (Transact-SQL) | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; ALTER DATABASE SET =
Options=20
            (Transact-SQL) | Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>SET ROWCOUNT used in context of an INSERT / UPDATE /=20
            DELETE</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Using SET ROWCOUNT will not affect DELETE, INSERT, and =
UPDATE=20
            statements in the next release of SQL Server. Avoid using =
SET=20
            ROWCOUNT with DELETE, INSERT, and UPDATE statements in new=20
            development work, and plan to modify applications that =
currently use=20
            it. It still works in SQL Server 2016. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Use the TOP clause instead. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SET ROWCOUNT =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Deprecated Database =
Engine Features=20
            in SQL Server 2016 | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; TOP (Transact-SQL) | =
Microsoft Docs=20
            </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>SETUSER statement usage</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>SETUSER is marked as deprecated and will be removed in a =
future=20
            release of SQL Server. It still works in SQL Server 2016. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>We recommend that you use EXECUTE AS instead. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SETUSER (Transact-SQL) =
| Microsoft=20
            Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Deprecated Database =
Engine Features=20
            in SQL Server 2016 | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; EXECUTE AS =
(Transact-SQL) |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Subqueries are not supported in GROUP BY clause</B> =
</TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>In SQL 2008 and above, subqueries are no longer supported =
inside=20
            a GROUP BY. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Be aware of this breaking change and revise query logic=20
            accordingly. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Subquery in group by =
works in SQL=20
            2005, does not work in SQL 2008 | Microsoft Connect </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SQL 2008 R2 Upgrade =
Advisor is not=20
            detecting Breaking Changes | Microsoft Connect </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SQL 2008 Upgrade =
Advisor unable to=20
            detect a deprecated Feature | Microsoft Connect </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Breaking Changes to =
Database Engine=20
            Features in SQL Server 2014 </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Table Hint specified without the WITH clause</B> =
</TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>With some exceptions, table hints are supported in the =
FROM=20
            clause only when the hints are specified with the WITH =
keyword.=20
            Table hints also must be specified with parentheses. =
Omitting the=20
            WITH keyword is a deprecated feature. It still works in SQL =
Server=20
            2016. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Use the WITH keyword when specifying table hints. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Table Hints =
(Transact-SQL) |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>The&nbsp;:: prefix is no longer required for table =
valued=20
            functions</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>In SQL 2000, a double colon prefix was necessary to =
invoke=20
            table-valued functions. In SQL 2005 and above, the same is =
no longer=20
            required and is deprecated. Still works in SQL Server 2016.=20
        </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>For system table-valued functions, you can use the 'sys' =
schema=20
            prefix, or many times no prefix is needed. For user-defined =
TVFs, no=20
            prefix is needed. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Deprecated Database =
Engine Features=20
            in SQL Server 2016 | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Kalen Delaney&nbsp;: =
Did you know?=20
            -- Syntax relaxation </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; What is the function =
or purpose of=20
            the colons in&nbsp;::fn_trace_gettable()? </P>
            <P>DISCLAIMER: Third-party link(s) are provided on an =
'as-is' basis.=20
            Microsoft does not offer any guarantees or warranties =
regarding the=20
            content on the third-party site(s). </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>The GROUP BY ALL clause is deprecated</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Transact-SQL provides the ALL keyword in the GROUP BY =
clause.=20
            GROUP BY ALL will be removed in a future version of =
Microsoft SQL=20
            Server. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Avoid using GROUP BY ALL in new development work, and =
plan to=20
            modify applications that currently use it. Use custom =
case-by-case=20
            solution with UNION or derived table. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; GROUP BY and ALL </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; GROUP BY =
(Transact-SQL) | Microsoft=20
            Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Deprecated Database =
Engine Features=20
            in SQL Server 2016 | Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>TORN_PAGE_DETECTION option for ALTER DATABASE is=20
            deprecated</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>TORN_PAGE_DETECTION option of ALTER DATABASE is a =
deprecated=20
            feature. It still works in SQL Server 2016. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Use the ALTER DATABASE ... SET PAGE_VERIFY... syntax =
instead.=20
          </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Set the PAGE_VERIFY =
Database Option=20
            to CHECKSUM | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Deprecated Database =
Engine Features=20
            in SQL Server 2016 | Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Unqualified Joins</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>SQL Server normally handles 'old-style' join syntax quite =
well in=20
            most cases. However, in certain rare conditions, the use of =
an=20
            'unqualified' join syntax can cause SQL Server to get =
confused. In=20
            some cases, this can lead to the infamous 'missing join =
predicate'=20
            warning in Profiler. More importantly, in those cases, it =
can cause=20
            extremely poor query performance. Some 'old-style' join =
syntax does=20
            not work on SQL Server 2005 and above. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>The usage of explicit JOIN syntax is recommended in all =
cases=20
            with the JOIN predicates as well. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Missing Join Predicate =
Event Class=20
            | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Deprecation of "Old =
Style" JOIN=20
            Syntax: Only A Partial Thing =E2=80=93 Ward Pond's SQL =
Server blog </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; DOC&nbsp;: Please =
strive to use=20
            ANSI-style joins instead of deprecated syntax | Microsoft =
Connect=20
            </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; The old INNER JOIN =
syntax vs. the=20
            new INNER JOIN syntax - SQLServerCentral </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; No Join Predicate - =
Grant Fritchey=20
            </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SQL Server Upgrade =
Advisor:=20
            Considerations when upgrading from SQL 2000 to SQL 2012 =
=E2=80=93 Premier=20
            Field Engineering Developer Blog </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Discontinued Database =
Engine=20
            Functionality in SQL Server 2005 </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; FROM (Transact-SQL) | =
Microsoft=20
            Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Visual Representation =
of SQL Joins=20
            - CodeProject </P>
            <P>DISCLAIMER: Third-party link(s) are provided on an =
'as-is' basis.=20
            Microsoft does not offer any guarantees or warranties =
regarding the=20
            content on the third-party site(s). </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Use data compression instead of the vardecimal =
compression=20
            feature</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Vardecimal storage format is deprecated. SQL Server 2017 =
data=20
            compression, compresses decimal values as well as other data =
types.=20
            </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>We recommend that you use data compression instead of the =

            vardecimal storage format. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Deprecated Database =
Engine Features=20
            in SQL Server 2016 | Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Use of PASSWORD in BACKUP command</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Some BACKUP commands detected were discontinued or are=20
            deprecated. BACKUP { DATABASE | LOG } WITH PASSWORD and =
BACKUP {=20
            DATABASE | LOG } WITH MEDIAPASSWORD are discontinued =
starting in SQL=20
            Server 2012. RESTORE { DATABASE | LOG } WITH [MEDIA]PASSWORD =

            continues to be deprecated and still works in SQL Server =
2016.=20
          </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Remove the use of BACKUP { DATABASE | LOG } WITH PASSWORD =
and=20
            BACKUP { DATABASE | LOG } WITH MEDIAPASSWORD commands. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; BACKUP (Transact-SQL) =
| Microsoft=20
            Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Deprecated Database =
Engine Features=20
            in SQL Server 2016 | Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Use parentheses when specifying TOP in SELECT =
statements</B>=20
          </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>For backward compatibility, the parentheses are optional =
in=20
            SELECT statements. However, in cases where a variable or a =
scalar=20
            subquery is used to specify the value of the TOP filter, =
parentheses=20
            are mandatory. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>We recommend that you always use parentheses for TOP in =
SELECT=20
            statements for consistency with the otherwise required use =
of=20
            parentheses in INSERT, UPDATE, MERGE and DELETE statements.=20
        </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; TOP (Transact-SQL) | =
Microsoft Docs=20
            </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SELECT Clause =
(Transact-SQL) |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>User-defined functions are not allowed in=20
            system_function_schema</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>We detected user-defined functions that are owned by the=20
            undocumented user system_function_schema. In SQL Server =
2000, you=20
            can create a user-defined system function by specifying this =
user.=20
            However, in SQL Server 2005 and later, this action is not =
permitted.=20
            The system_function_schema user name does not exist and the =
user ID=20
            that is associated with this name (UID =3D 4) is reserved =
for the sys=20
            schema and is restricted to internal use only. </P>
            <P><BR>Beginning with SQL Server 2005, system objects are =
stored in=20
            the read-only resource database and direct system object =
updates are=20
            not permitted. </P>
            <P><BR>System objects logically appear in the sys schema of =
every=20
            database. This maintains the ability to invoke system =
functions from=20
            any database by specifying a one-part function name. For =
example,=20
            the statement SELECT * FROM fn_helpcollations() can be run =
from any=20
            database. </P>
            <P><BR>Therefore, Data Definition Language (DDL) statements =
that=20
            reference system_function_schema will fail. For example, the =

            statement CREATE FUNCTION =
system_function_schema.fn_MySystemFunction=20
            will not succeed. </P>
            <P><BR>After you upgrade to SQL Server 2008, existing =
objects that=20
            are owned by system_function_schema are contained only in =
the sys=20
            schema of the master database. Because system objects cannot =
be=20
            modified, these functions can never be changed or dropped =
from the=20
            master database. Additionally, these functions cannot be =
invoked=20
            from other databases by specifying only a one-part function =
name.=20
            </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Before you upgrade to SQL Server 2012, complete the =
following=20
            tasks: </P>
            <P><BR>1. Change the ownership of existing user-defined =
functions to=20
            dbo by using the sp_changeobjectowner system stored =
procedure. </P>
            <P><BR>2. Consider renaming the function so that is does not =
use the=20
            prefix 'fn_'. This will avoid potential name conflicts with =
current=20
            or future system functions. </P>
            <P><BR>3. Add a copy of the modified functions in every =
database=20
            that uses them. </P>
            <P><BR>4. Replace references to system_function_schema with =
dbo in=20
            all scripts that contain user-defined function DDL =
statements. </P>
            <P><BR>5. Modify scripts that invoke these functions to use =
either=20
            the two-part name dbo.function_name, or the three-part name=20
            database_name.dbo.function_name. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; sp_changeobjectowner =
(Transact-SQL)=20
            | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; User-Schema Separation =
</P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Resource Database | =
Microsoft Docs=20
            </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>WITH CHECK OPTION is not supported in views that =
contain TOP=20
            in 90 or later compatibility modes</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>We detected a view that uses the WITH CHECK OPTION and a =
TOP=20
            clause in the SELECT statement of the view or in a =
referenced view.=20
            Views defined this way incorrectly allow data to be modified =
through=20
            the view and may produce inaccurate results when the =
database=20
            compatibility mode is set to 80 and earlier. Data cannot be =
inserted=20
            or updated through a view that uses WITH CHECK OPTION when =
the view=20
            or a referenced view uses the TOP clause and the database=20
            compatibility mode is set to 90 or later. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Modify views that use both WITH CHECK OPTION and TOP if =
data=20
            modification through the view is required. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; WITH CHECK OPTION is =
not supported=20
            in views that contain TOP in 90 or later compatibility modes =
</P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; CREATE VIEW =
(Transact-SQL) |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR></TBODY></TABLE></TD>
    <TD></TD></TR></TBODY></TABLE>
<TABLE class=3Dwikitable>
  <TBODY>
  <TR>
    <TD></TD>
    <TD>
      <TABLE class=3Dwikitable>
        <TBODY>
        <TR>
          <TD colSpan=3D2><B>Inventory</B> </TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Cross server join usage</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Potential for performance issues. Also, cross server join =
makes=20
            migration more complex. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>See the resources in the 'References' section for more =
inputs on=20
            how to resolve the issue. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Linked Server behavior =
when used on=20
            JOIN clauses =E2=80=93 Microsoft Premier Support (PFE) Latin =
America </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Conor vs. Distributed =
Query=20
            Provider Hints =E2=80=93 Conor vs. SQL </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Distributed Query Deep =
Dive with=20
            Conor Cunningham </P>
            <P>DISCLAIMER: Third-party link(s) are provided on an =
'as-is' basis.=20
            Microsoft does not offer any guarantees or warranties =
regarding the=20
            content on the third-party site(s). </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Dependencies</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>N/A </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>N/A </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>List all cross database object references</B> =
</TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Inventory all instances of three-part naming in table /=20
            executable procedure references which indicate =
cross-database or=20
            even cross-server object usage. This pattern can represent a =
blocker=20
            to use some High Availability features. Also, makes =
migration more=20
            complex. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Use this pattern only when is really necessary. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>List all input parameters of type XML</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Usually, XML can contain a large rowset. Using this type =
as a=20
            parameter can lead to performance problems. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Evaluate if it is necessary to use the XML as a =
parameter, since=20
            sometimes you just need some part of that information and =
not all of=20
            it. If it is required, pass it in multiple rows, in the form =
of a=20
            XML input parameter. You can also evaluate the usage of =
table valued=20
            parameters, which are supported in SQL Server 2008 and =
above.=20
        </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Specifying XML Values =
as Parameters=20
            </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Table-Valued =
Parameters (Database=20
            Engine) </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Use Table-Valued =
Parameters=20
            (Database Engine) | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Table-Valued =
Parameters </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>List all instances of nested views</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Nested views can cause performance degradation and =
complexity of=20
            maintainability. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Instead, replace by using JOIN statement or separated =
views.=20
          </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Nested Views and=20
            Performance...or...LEFT vs RIGHT JOINs | DaveWentzel.com =
</P>
            <P>DISCLAIMER: Third-party link(s) are provided on an =
'as-is' basis.=20
            Microsoft does not offer any guarantees or warranties =
regarding the=20
            content on the third-party site(s). </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>List all instances of table variable usage</B> =
</TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Table variables are not supported in the SQL Server =
optimizer's=20
            cost-based reasoning model. Therefore, they should not be =
used when=20
            cost-based choices are required to achieve an efficient =
query plan.=20
            Plan choices may not be optimal or stable when a table =
variable=20
            contains a large amount of data. Also, queries that modify =
table=20
            variables do not generate parallel query execution plans. =
Finally,=20
            Indexes cannot be created explicitly on table variables, and =
no=20
            statistics are kept on table variables. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Do not use table variables to store large amounts of data =
(more=20
            than 100 rows). Consider rewriting such queries to use =
temporary=20
            tables or use the USE PLAN query hint to ensure the =
optimizer uses=20
            an existing query plan that works well for your scenario. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; table (Transact-SQL) | =
Microsoft=20
            Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; 11.0 Temporary Tables, =
Table=20
            Variables and Recompiles =E2=80=93 SQL Programmability &amp; =
API Development=20
            Team Blog </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; DECLARE =
@local_variable=20
            (Transact-SQL) | Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>List all instances of WHILE statement usage</B> =
</TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>WHILE loops which contain statements accessing tables can =

            potentially lead to cursor-like performance semantics. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Carefully review the use of such loops. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; WHILE (Transact-SQL) | =
Microsoft=20
            Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR></TBODY></TABLE></TD>
    <TD></TD></TR></TBODY></TABLE>
<TABLE class=3Dwikitable>
  <TBODY>
  <TR>
    <TD></TD>
    <TD>
      <TABLE class=3Dwikitable>
        <TBODY>
        <TR>
          <TD colSpan=3D2><B>Join Hints</B> </TD></TR>
        <TR>
          <TD></TD>
          <TD><B>HASH JOIN hint usage</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Hash join, unlike the other join methods, requires a =
memory grant=20
            to store the hash table. Thus, there is a limit to the =
number of=20
            concurrent hash joins that SQL Server can run at any given =
time.=20
            While these characteristics are generally not a problem for =
data=20
            warehouses, they are undesirable for most OLTP applications. =

            Explicit usage of this hint can cause sub-optimal plan to be =

            selected. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>As far as possible let the optimizer decide what join =
strategy to=20
            use. Keep statistics up to date to reduce the risk of the =
optimizer=20
            choosing a bad join strategy. We recommend that hints be =
used only=20
            as a last resource by experienced developers and database=20
            administrators. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Hash Join =E2=80=93 =
Craig Freedman's SQL=20
            Server Blog </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Understanding Hash =
Joins </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Join Hints =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Conor vs. Join =
Algorithms =E2=80=93 Conor=20
            vs. SQL </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>LOOP JOIN hint usage</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>In its simplest form, a nested loop join compares each =
row from=20
            one table (known as the outer table) to each row from the =
other=20
            table (known as the inner table), looking for rows that =
satisfy the=20
            join predicate. The total number of rows compared and, thus, =
the=20
            cost of this algorithm, is proportional to the size of the =
outer=20
            table, multiplied by the size of the inner table.&nbsp; =
Since this=20
            cost grows quickly as the size of the input tables grow, in=20
            practice, we try to minimize the cost by reducing the number =
of=20
            inner rows that we must consider for each outer row. =
Explicit usage=20
            of this hint can cause sub-optimal plan to be selected. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>As far as possible let the optimizer decide what join =
strategy to=20
            use. Keep statistics up to date to reduce the risk of the =
optimizer=20
            choosing a bad join strategy. We recommend that hints be =
used only=20
            as a last resource by experienced developers and database=20
            administrators. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Conor vs. Join =
Algorithms =E2=80=93 Conor=20
            vs. SQL </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Join Hints =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Understanding Nested =
Loops Joins=20
            </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>MERGE JOIN hint usage</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Merge join requires the inputs to be sorted on the join =
keys. If=20
            the inputs are not sorted, a Sort operator may be =
introduced.=20
            Explicit usage of this hint can cause sub-optimal plan to be =

            selected. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>As far as possible let the optimizer decide what join =
strategy to=20
            use. Keep statistics up to date to reduce the risk of the =
optimizer=20
            choosing a bad join strategy. We recommend that hints be =
used only=20
            as a last resource by experienced developers and database=20
            administrators. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Merge Join =E2=80=93 =
Craig Freedman's SQL=20
            Server Blog </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Conor vs. Join =
Algorithms =E2=80=93 Conor=20
            vs. SQL </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Join Hints =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Understanding Merge =
Joins=20
</P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>REMOTE JOIN hint usage</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Hints override the query optimizer and affect the =
resulting query=20
            optimizer plan. Thus, hints should be used judiciously and =
never by=20
            default in your code. In addition, misusing hints can result =
in=20
            unsatisfactory query performance and reduced database =
concurrency.=20
            In some cases, misusing hints can also result in data =
integrity=20
            issues. In particular, the REMOTE JOIN hint specifies that =
the JOIN=20
            operation is performed on the site of the right-hand table =
in the=20
            query. This is useful when the left table is a local table =
and the=20
            right table is a remote table. REMOTE should only be used =
when the=20
            left table has fewer rows that the right table. REMOTE can =
only be=20
            used for INNER JOIN operations. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Determine the cause of the hint usage and test whether =
the hint=20
            is still overriding the original behavior that was intended. =
If=20
            possible, remove the hint from the code. If this is not =
possible,=20
            document the location and background of the hint so you can =
evaluate=20
            the benefits of using it in future service packs and =
versions of SQL=20
            Server. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Revisit your use of =
the SQL Server=20
            REMOTE join hint </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Join Hints =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Distributed Query Deep =
Dive with=20
            Conor Cunningham </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Conor vs. Distributed =
Query=20
            Provider Hints =E2=80=93 Conor vs. SQL </P>
            <P>DISCLAIMER: Third-party link(s) are provided on an =
'as-is' basis.=20
            Microsoft does not offer any guarantees or warranties =
regarding the=20
            content on the third-party site(s). </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR></TBODY></TABLE></TD>
    <TD></TD></TR></TBODY></TABLE>
<TABLE class=3Dwikitable>
  <TBODY>
  <TR>
    <TD></TD>
    <TD>
      <TABLE class=3Dwikitable>
        <TBODY>
        <TR>
          <TD colSpan=3D2><B>Logical Expressions</B> </TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Considerations when using ORDER BY with a 'random'=20
            function</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Using the random functions - such as RAND() and NEWID() - =
in an=20
            ORDER BY clause, to return random ordered rows from a result =
set,=20
            has potential problems. In the case of RAND() this is not =
effective=20
            at all and does not randomize the order. In the case of =
NEWID() it=20
            does not scale well. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Investigate alternate methods for returning a set of =
randomly=20
            ordered rows from a large dataset. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Selecting Rows =
Randomly from a=20
            Large Table </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>COUNT will exclude NULL values</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>The usage of COUNT(ColumnName) when ColumnName is a =
NULLable=20
            column could return an unexpected value, since aggregate =
functions=20
            exclude NULLs. Also, this can hurt performance if the =
optimizer=20
            cannot use the smallest (non-filtered index) to get a row =
count.=20
          </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Verify if the logic is correct and that the application =
is=20
            returning the expected value. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SQL Tip: COUNTing NULL =
values =E2=80=93=20
            Benjamin's blog </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; COUNT (Transact-SQL) | =
Microsoft=20
            Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>DELETE statement without a WHERE clause</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>A missing WHERE clause on a large or frequently executed, =

            mid-sized result set can lead to query performance issues =
and=20
            excessive table scanning. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Check if this is intentional or an accidental construct. =
In some=20
            cases, DELETE without WHERE clauses can be replaced with a =
TRUNCATE=20
            TABLE statement for improved performance. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; DELETE (Transact-SQL) =
</P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; TRUNCATE TABLE =
(Transact-SQL) |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>In-Memory statements using&nbsp;!&lt; or&nbsp;!&gt;=20
            syntax</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Index seek on inequality predicates cannot use Range =
Index for=20
            Seek Operations </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Queries must include equality predicates for all index =
key=20
            columns to benefit from the point lookup performance of hash =

            indexes. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Guidelines for Using =
Indexes on=20
            Memory-Optimized Tables </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Nesting a subquery within another is not =
recommended</B>=20
        </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Nested subqueries can cause performance degradation and=20
            complexity of maintainability. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Instead, replace by using JOIN statement. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; The "Nested WHERE-IN" =
SQL=20
            Anti-Pattern </P>
            <P>DISCLAIMER: Third-party link(s) are provided on an =
'as-is' basis.=20
            Microsoft does not offer any guarantees or warranties =
regarding the=20
            content on the third-party site(s). </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>NULL Comparisons</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>This rule scans stored procedures, views, functions and =
triggers=20
            to flag use of equality and inequality comparisons involving =
a NULL=20
            constant. These comparisons are undefined when ANSI_NULLS =
option is=20
            set to ON. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>It is recommended to set ANSI_NULLS to ON and use the IS =
keyword=20
            to compare against NULL constants. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; How to Get NULLs =
Horribly Wrong in=20
            SQL Server - Simple Talk </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SET ANSI_NULLS =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>DISCLAIMER: Third-party link(s) are provided on an =
'as-is' basis.=20
            Microsoft does not offer any guarantees or warranties =
regarding the=20
            content on the third-party site(s). </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>ORDER BY has no guarantees in a SELECT INTO context</B> =

</TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>When used together with a SELECT...INTO statement to =
insert rows=20
            from another source, the ORDER BY clause does not guarantee =
the rows=20
            are inserted in the specified order. Potential to have =
higher cost=20
            plan with no logical guarantees on insert order. </P>
            <P><BR>Also note that in SQL Server 2000, the presence of =
ORDER BY=20
            along with an IDENTITY function does not guarantee that the =
identity=20
            values will be in the desired sequence. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Reevaluate why the ORDER BY is used. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; ORDER BY Clause =
(Transact-SQL) |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>ORDER BY has no guarantees in the context of an =
INSERT</B>=20
        </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>When used together with an INSERT statement to insert =
rows from=20
            another source, the ORDER BY clause does not guarantee the =
rows are=20
            inserted in the specified order. Potential to have higher =
cost plan=20
            with no logical guarantees on insert order. </P>
            <P><BR>Also note that in SQL Server 2000, the presence of =
ORDER BY=20
            along with an IDENTITY function does not guarantee that the =
identity=20
            values will be in the desired sequence. </P>
            <P><BR>Note: this issue will not be triggered if a TOP is =
specified=20
            in the corresponding SELECT query for the INSERT. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Reevaluate why the ORDER BY is used. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; ORDER BY Clause =
(Transact-SQL) |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Procedure / Function without exception handling</B> =
</TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Coding standardization. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Follow your organization's coding standards for error =
handling.=20
            In SQL 2005 and above, TRY...CATCH constructs are the =
preferred way=20
            to do this. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; TRY...CATCH =
(Transact-SQL) |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>SELECT or SET used to assign value to a variable from a =

            subquery</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>A SELECT or SET statement is used to assign a value to a=20
            variable. If that value comes from a subquery which might =
return=20
            more than 1 row then Msg 512 (Subquery returned more than 1 =
value)=20
            will be returned by SQL Server. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Catch such errors using error handling (TRY...CATCH) and =
look at=20
            the logical design of the query to avoid this kind of issue. =

        </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; TRY...CATCH =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Technical: Microsoft =
=E2=80=93 SQL Server =E2=80=93=20
            Error =E2=80=93 =E2=80=9CAuto Subquery returned more than 1 =
value. This is not=20
            permitted when the subquery follows =3D,&nbsp;!=3D, &lt;, , =
&gt;=3D or=20
            when the subquery is used as an expression.=E2=80=9D =
=E2=80=93 Msg 512, Level 16,=20
            State 1 | Learning in the Open </P>
            <P>DISCLAIMER: Third-party link(s) are provided on an =
'as-is' basis.=20
            Microsoft does not offer any guarantees or warranties =
regarding the=20
            content on the third-party site(s). </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>SELECT statement without a WHERE clause</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>A missing WHERE clause on a large or frequently executed, =

            mid-sized result set can lead to query performance issues =
and=20
            excessive table scanning. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Evaluate how the query is used and look for opportunities =
to=20
            reduce the result set. Also consider adding a WHERE clause =
and=20
            associated search conditions. In addition, if a WHERE clause =
cannot=20
            be used, consider whether the TOP keyword or ROW_NUMBER can =
be used=20
            to restrict or page through the dataset. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; ROW_NUMBER =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; TOP (Transact-SQL) | =
Microsoft Docs=20
            </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SELECT Clause =
(Transact-SQL) |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>SELECT TOP (1) statement without ORDER BY could cause =
wrong=20
            results</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Using TOP (1) you should guarantee result order of lines =
to avoid=20
            wrong result set </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Whenever possible use ORDER BY with TOP(1) avoiding =
undesirable=20
            result sets, or change query code to use EXISTS instead. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; TOP (Transact-SQL) | =
Microsoft Docs=20
            </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SELECT Clause =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SQL: If Exists Update =
Else Insert =E2=80=93=20
            Jeremiah Clark's Blog </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>SELECT used to assign to a variable</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>If a SELECT statement from a base table is used to assign =
values=20
            to a variable and that statement happens to access multiple =
rows,=20
            then the results might be unpredictable. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Check @@ROWCOUNT after such statements to ensure a single =
value=20
            was returned. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; @@ROWCOUNT =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SELECT Clause =
(Transact-SQL) |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Statements using&nbsp;!&lt; or&nbsp;!&gt; syntax</B> =
</TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>"NOT" logic can limit overall query performance. =
Furthermore, it=20
            introduces additional contention because it often results in =

            evaluation of each row (index scans) in order to determine =
if a=20
            search condition is met for the query. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Avoid using such conditions in search expressions. =
Instead, elect=20
            to use inclusive "equals" and range queries. In addition, =
construct=20
            your WHERE clause to reference high-cardinality, indexed =
columns. It=20
            is not always possible to rewrite this type of logical =
expression.=20
            However, if you are experiencing excessive scanning and I/O =
issues,=20
            rewriting the search conditions can help improve query =
performance=20
            significantly. Try to find more inclusive conditions for =
filtering=20
            the result set. The key objective is to reduce the number of =
rows=20
            that must be evaluated by SQL Server. Focus on search =
conditions=20
            that affect as few rows as possible and evaluate the query =
execution=20
            plan to ensure that SQL Server is using index seeks whenever =

            possible. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Predicates | Microsoft =
Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Search Condition =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Inequality predicates =
do not=20
            trigger scans =E2=80=93 Mohamed Sharaf's Blog </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Statements using &lt;&gt; or&nbsp;!=3D syntax</B> =
</TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>"NOT" logic can limit overall query performance. =
Furthermore, it=20
            introduces additional contention because it often results in =

            evaluation of each row (index scans) in order to determine =
if a=20
            search condition is met for the query. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Avoid using "&lt;&gt;" in search expressions. Instead, =
elect to=20
            use inclusive "equals" and range queries. In addition, =
construct=20
            your WHERE clause to reference high-cardinality, indexed =
columns. It=20
            is not always possible to rewrite this type of logical =
expression.=20
            However, if you are experiencing excessive scanning and I/O =
issues,=20
            rewriting the search conditions can help improve query =
performance=20
            significantly. Try to find more inclusive conditions for =
filtering=20
            the result set. The key objective is to reduce the number of =
rows=20
            that must be evaluated by SQL Server. Focus on search =
conditions=20
            that affect as few rows as possible and evaluate the query =
execution=20
            plan to ensure that SQL Server is using index seeks whenever =

            possible. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Predicates | Microsoft =
Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Search Condition =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Inequality predicates =
do not=20
            trigger scans =E2=80=93 Mohamed Sharaf's Blog </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Statements using NOT BETWEEN syntax</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>"NOT" logic can limit overall query performance. =
Furthermore, it=20
            introduces additional contention because it often results in =

            evaluation of each row (index scans) in order to determine =
if a=20
            search condition is met for the query. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Avoid using such conditions in search expressions. =
Instead, elect=20
            to use inclusive "equals" and range queries. In addition, =
construct=20
            your WHERE clause to reference high-cardinality, indexed =
columns. It=20
            is not always possible to rewrite this type of logical =
expression.=20
            However, if you are experiencing excessive scanning and I/O =
issues,=20
            rewriting the search conditions can help improve query =
performance=20
            significantly. Try to find more inclusive conditions for =
filtering=20
            the result set. The key objective is to reduce the number of =
rows=20
            that must be evaluated by SQL Server. Focus on search =
conditions=20
            that affect as few rows as possible and evaluate the query =
execution=20
            plan to ensure that SQL Server is using index seeks whenever =

            possible. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Predicates | Microsoft =
Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Search Condition =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Inequality predicates =
do not=20
            trigger scans =E2=80=93 Mohamed Sharaf's Blog </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Statements using NOT IN syntax</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>"NOT" logic can limit overall query performance. =
Furthermore, it=20
            introduces additional contention because it often results in =

            evaluation of each row (index scans) in order to determine =
if a=20
            search condition is met for the query. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Avoid using such conditions in search expressions. =
Instead, elect=20
            to use inclusive "equals" and range queries. In addition, =
construct=20
            your WHERE clause to reference high-cardinality, indexed =
columns. It=20
            is not always possible to rewrite this type of logical =
expression.=20
            However, if you are experiencing excessive scanning and I/O =
issues,=20
            rewriting the search conditions can help improve query =
performance=20
            significantly. Try to find more inclusive conditions for =
filtering=20
            the result set. The key objective is to reduce the number of =
rows=20
            that must be evaluated by SQL Server. Focus on search =
conditions=20
            that affect as few rows as possible and evaluate the query =
execution=20
            plan to ensure that SQL Server is using index seeks whenever =

            possible. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Predicates | Microsoft =
Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Search Condition =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Inequality predicates =
do not=20
            trigger scans =E2=80=93 Mohamed Sharaf's Blog </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Statements using NOT LIKE syntax</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>"NOT" logic can limit overall query performance. =
Furthermore, it=20
            introduces additional contention because it often results in =

            evaluation of each row (index scans) in order to determine =
if a=20
            search condition is met for the query. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Avoid using such conditions in search expressions. =
Instead, elect=20
            to use inclusive "equals" and range queries. In addition, =
construct=20
            your WHERE clause to reference high-cardinality, indexed =
columns. It=20
            is not always possible to rewrite this type of logical =
expression.=20
            However, if you are experiencing excessive scanning and I/O =
issues,=20
            rewriting the search conditions can help improve query =
performance=20
            significantly. Try to find more inclusive conditions for =
filtering=20
            the result set. The key objective is to reduce the number of =
rows=20
            that must be evaluated by SQL Server. Focus on search =
conditions=20
            that affect as few rows as possible and evaluate the query =
execution=20
            plan to ensure that SQL Server is using index seeks whenever =

            possible. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Predicates | Microsoft =
Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Search Condition =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Inequality predicates =
do not=20
            trigger scans =E2=80=93 Mohamed Sharaf's Blog </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; LIKE (Transact-SQL) | =
Microsoft=20
            Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>TRY block implementation in native compilation</B> =
</TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Coding standardization. Also, avoid applications to break =
with an=20
            error that is not detailed and clear for the user. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Use an inter-op wrapper stored procedure with a try catch =

            implementation </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Using Natively =
Compiled Stored=20
            Procedures in SQL Server 2014 | SQL Server Blog =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>UPDATE statement without a WHERE clause</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>A missing WHERE clause on a large or frequently executed, =

            mid-sized result set can lead to query performance issues =
and=20
            excessive table scanning. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Check if this is intentional or an accidental construct.=20
        </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; UPDATE (Transact-SQL) =
| Microsoft=20
            Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Usage of SELECT * observed</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>The SELECT * syntax is impacted by schema changes or =
ordinal=20
            changes. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Please use explicit column list as far as possible. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SELECT (Transact-SQL) =
| Microsoft=20
            Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Use IF...EXISTS instead of IF ... COUNT(*) =
comparisons</B>=20
        </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>The usage of COUNT(*) such as IF (SELECT COUNT(*) FROM =
..) &gt; 0=20
            can cause table scans to occur. </P>
            <P>Use COUNT(*) only when there is a need for the exact row =
count.=20
            If you just need to know if there is any row on an specific=20
            condition, use IF EXISTS instead. </P>
            <P><BR>Note: This rule will only detect conditions where =
there is a=20
            predicate of the form '&lt;operator&gt; 0' or =
'&lt;operator&gt; 1'=20
            applied to the result of the subquery; where =
&lt;operator&gt; can be=20
            =3D, &gt;, &lt;, &lt;&gt;. Please manually review the =
results to=20
            verify the applicability of this issue. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Instead, it is recommended to use IF EXISTS(..) which =
will return=20
            immediately on the first matching row to be found, which is=20
            potentially much quicker. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SQL: If Exists Update =
Else Insert =E2=80=93=20
            Jeremiah Clark's Blog </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR></TBODY></TABLE></TD>
    <TD></TD></TR></TBODY></TABLE>
<TABLE class=3Dwikitable>
  <TBODY>
  <TR>
    <TD></TD>
    <TD>
      <TABLE class=3Dwikitable>
        <TBODY>
        <TR>
          <TD colSpan=3D2><B>Naming</B> </TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Constraints on base tables should be explicitly =
named</B>=20
        </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>If constraint name is not supplied, a system-generated =
name is=20
            assigned to the constraint. This may increase schema =
maintenance=20
            overheads. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Constraint definitions for base tables should be named to =
ease=20
            future maintenance operations. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; table_constraint =
(Transact-SQL) |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Functions with fn_ naming prefix</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>The "fn_" programmability object naming convention has =
special=20
            meaning and functionality inside SQL Server.&nbsp; </P>
            <P><BR>User-created programmability objects should never be =
created=20
            with names identical to those of system functions (e.g.,=20
            "fn_trace_getinfo", "fn_get_sql", "fn_get_audit_file", =
etc.). Not=20
            only does this cause additional overhead in qualifying the =
object=20
            during query compilation, but also increases the difficulty =
in=20
            locating functions. </P>
            <P><BR>A healthy naming convention assists in easily =
identifying the=20
            code as a function, its ownership, as well as its purpose, =
without=20
            the need to review the actual code within the function. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Examine all references to functions that have the "fn_" =
naming=20
            convention prefix and rename the function with a new naming=20
            convention. If the functions are vendor-written, contact the =
vendor=20
            about this issue and work with them to arrange a resolution =
date.=20
            Microsoft also recommends that you address all objects =
before=20
            upgrading to a new version of SQL Server. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; CREATE FUNCTION =
(Transact-SQL) |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Keywords used as column names</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>SQL Server reserves certain keywords for its exclusive =
use. No=20
            user-defined objects or columns in the database should be =
given a=20
            name that matches a reserved keyword. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Avoid using reserved keywords for user-defined objects =
and column=20
            names. If you identify objects or columns using reserved =
keywords,=20
            rename them to avoid issues with future versions of SQL =
Server. If=20
            you cannot modify the column name immediately, the column =
must=20
            always be referred using delimited identifiers. However, you =
should=20
            still plan to rename the column before updating to a new =
version of=20
            SQL Server. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Reserved Keywords =
(Transact-SQL) |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Keywords used as schema object names</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>SQL Server reserves certain keywords for its exclusive =
use. No=20
            user-defined objects or columns in the database should be =
given a=20
            name that matches a reserved keyword. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Avoid using reserved keywords for user-defined objects =
and column=20
            names. If you identify objects or columns using reserved =
keywords,=20
            rename them in order to avoid issues with future versions of =
SQL=20
            Server. If you cannot modify the column name immediately, =
the column=20
            must always be referred to using delimited identifiers. =
However, you=20
            should still plan to rename the column before updating to a =
new=20
            version of SQL Server. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Reserved Keywords =
(Transact-SQL) |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Single character object names are not recommended</B> =
</TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Single character object names tend to be confusing, as =
they may=20
            cause confusion between object names and aliases. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>It should be named appropriately to clarify object type =
and its=20
            purpose. </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Stored Procedure with sp_ naming prefix</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>The "sp_" programmability object naming convention has =
special=20
            meaning and functionality in SQL Server.&nbsp; </P>
            <P><BR>User-created programmability objects should never be =
created=20
            with names identical to those of system stored procedures =
(e.g.,=20
            "sp_who", "sp_lock", "sp_monitor", "sp_datatype_info", etc). =
For=20
            these "special" stored procedures, SQL Server will always =
execute=20
            the copy in master. </P>
            <P><BR>If a user-created programmability object is created =
in the=20
            master database and its name begins with "sp_", it is =
accessible=20
            from other databases via a one-part call. However, say a=20
            programmability object with the same "sp_" name is created =
in a user=20
            database. A one-part call to that object from that database =
will=20
            execute the local copy rather than the one in master. If one =
intends=20
            to create these objects in a user database but instead =
creates them=20
            in master, this can lead to unanticipated results, =
especially if it=20
            is intended to create different objects in different =
databases with=20
            the same name. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Examine all references to stored procedures that have the =
"sp_"=20
            naming convention prefix and rename the stored procedures =
with a new=20
            naming convention. If the stored procedures are =
vendor-written,=20
            contact the vendor about this issue and work with them to =
arrange a=20
            resolution date. Microsoft also recommends that you address =
all=20
            objects before upgrading to a new version of SQL Server. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; System Stored =
Procedures=20
            (Transact-SQL) | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; CREATE PROCEDURE =
(Transact-SQL) |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Variables declared with @@ prefix</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>The names of some Transact-SQL system functions begin =
with two at=20
            signs (@@). Although in earlier versions of Microsoft SQL =
Server,=20
            the @@functions are referred to as global variables, they =
are not=20
            variables and do not have the same behaviors as variables. =
The=20
            @@functions are system functions, and their syntax usage =
follows the=20
            rules for functions. So, using the same naming convention =
for=20
            variables affects readability of code and can cause =
confusion with=20
            the reader. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Do not use the @@ prefix for naming your own variables. =
Use a=20
            normal naming convention with a single @ symbol. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Transact-SQL Variables =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR></TBODY></TABLE></TD>
    <TD></TD></TR></TBODY></TABLE>
<TABLE class=3Dwikitable>
  <TBODY>
  <TR>
    <TD></TD>
    <TD>
      <TABLE class=3Dwikitable>
        <TBODY>
        <TR>
          <TD colSpan=3D2><B>Performance</B> </TD></TR>
        <TR>
          <TD></TD>
          <TD><B>ALTER TABLE for temporary table</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>ALTER TABLE when applied to a temporary table can affect =
the=20
            caching behavior for temp table metadata. More importantly =
such=20
            schema modifications will cause a recompile activity. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Review the considerations for temp table caching and act=20
            accordingly. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; tempdb Database | =
Microsoft Docs=20
            </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Batch Compilation, =
Recompilation,=20
            and Plan Caching Issues in SQL Server 2005 </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Stored procedure =
recompile caused=20
            by alter table on temp table =E2=80=93 CSS SQL Server =
Engineers </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Troubleshooting stored =
procedure=20
            recompilation </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Is Tempdb Affecting =
Your Day-to-Day=20
            SQL Server Performance? | SQL Server content from SQL Server =
Pro=20
</P>
            <P>DISCLAIMER: Third-party link(s) are provided on an =
'as-is' basis.=20
            Microsoft does not offer any guarantees or warranties =
regarding the=20
            content on the third-party site(s). </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Avoid using intrinsic functions on Xquery expressions =
in=20
            Microsoft SQL Server 2005 and above</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Using intrinsic functions on Xquery expressions results =
in a=20
            25-percent performance penalty compared to performing the =
Xquery=20
            work in a derived table and then applying the intrinsic =
functions to=20
            the derived table. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Given the performance implications, you should avoid =
applying=20
            intrinsic functions to Xquery expressions. </P>
            <P><BR>Using the following code as an example: </P>
            <P><BR>UPDATE [DomainValue] </P>
            <P>SET [SortSequence] =3D=20
            =
NULLIF(ISNULL(ref.value('@SortSequence','int'),[SortSequence]),=20
            -32000) FROM [DomainValue] </P>
            <P>JOIN @ParamWorkerXml.nodes('/Domain[1]/DomainValue') AS =
node(ref)=20
            </P>
            <P>ON [DomainValue].[DomainId] =3D ref.value('@DomainId', =
'int') </P>
            <P>AND [DomainValue].[DomainValueId] =3D =
ref.value('@DomainValueId',=20
            'int') </P>
            <P>AND ref.value('@Action','nchar(1)') =3D N'U' </P>
            <P>WHERE [LastModifiedDate] =3D CASE @ParamAllowDirtyWrite =
</P>
            <P>WHEN 0 THEN ref.value('@LastModifiedDate', 'datetime') =
</P>
            <P>ELSE [LastModifiedDate] </P>
            <P>END </P>
            <P><BR>It should be replaced with this code: </P>
            <P><BR>UPDATE [dv] </P>
            <P>SET [SortSequence] =3D=20
            NULLIF(ISNULL(InputXml.SortSequence,[dv].[SortSequence]), =
-32000)=20
            FROM ( </P>
            <P>SELECT ref.value('@DomainId', 'int') AS DomainId, </P>
            <P>ref.value('@DomainValueId', 'int') AS DomainValueId, </P>
            <P>ref.value('@SortSequence','int') AS SortSequence, </P>
            <P>ref.value('@ParentDomainValueId','int') AS =
ParentDomainValueId,=20
            </P>
            <P>ref.value('@IsVisible','bit') AS IsVisible, </P>
            <P>ref.value('@ActiveDate','datetime') AS ActiveDate, </P>
            <P>ref.value('@ExpirationDate','datetime') AS =
ExpirationDate, </P>
            <P>ref.value('@ObjectStatusReasonId','int') AS =
ObjectStatusReasonId,=20
            </P>
            <P>ref.value('@ObjectActiveFlag','bit') AS ObjectActiveFlag, =
</P>
            <P>ref.value('@LastModifiedDate', 'datetime') AS =
LastModifiedDate=20
            </P>
            <P>FROM @ParamWorkerXml.nodes('/Domain[1]/DomainValue') </P>
            <P>AS node(ref) </P>
            <P>WHERE ref.value('@Action','nchar(1)') =3D N'U' </P>
            <P>) AS InputXml </P>
            <P>JOIN [dbo].[DomainValue] [dv] </P>
            <P>ON [dv].[DomainId] =3D InputXml.DomainId </P>
            <P>AND [dv].[DomainValueId] =3D InputXml.DomainValueId </P>
            <P>AND [dv].[LastModifiedDate] =3D CASE =
@ParamAllowDirtyWrite </P>
            <P>WHEN 0 THEN InputXml.LastModifiedDate </P>
            <P>ELSE [dv].[LastModifiedDate] </P>
            <P>END </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; XQuery Expressions | =
Microsoft Docs=20
            </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Calling a scalar UDF in the context of a SELECT...INTO=20
            operation might result in full logging</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>In SQL Server 2012 and above, SELECT ... INTO operations =
are not=20
            minimally logged if there is a reference to a scalar UDF in =
the=20
            output list. In prior versions (2008 R2 and below) such =
operations=20
            were always minimally logged. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Be aware of this change in behavior in SQL 2012 and =
above.=20
        </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Behavior Changes to =
Database Engine=20
            Features in SQL Server 2012 </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Operations That Can Be =
Minimally=20
            Logged </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Prerequisites for =
Minimal Logging=20
            in Bulk Import | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Create User-defined =
Functions=20
            (Database Engine) | Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>COALESCE with subquery expression</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>The sub-query is evaluated multiple times, potentially =
degrading=20
            performance. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>A simple workaround that still uses coalesce would be to =
store=20
            the subquery result in a variable and use that in the =
coalesce=20
            statement. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; COALESCE((subquery), =
1) may return=20
            NULL | Microsoft Connect </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Unnecessarily bad =
performance for=20
            coalesce(subquery) | Microsoft Connect </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Columns with FLOAT datatype used in JOIN predicate</B> =
</TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Since floating point datatypes are imprecise, such usage =
may=20
            cause incorrect results to be returned. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>If a precise comparison and result is required, it is =
better to=20
            use money or decimal datatypes. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Using decimal, float, =
and real Data=20
            </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Columnstore index pushdown for aggregate function</B> =
</TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>In SQL Server 2016, certain aggregate functions can =
actually be=20
            pushed into the columnstore scan itself. However, other =
aggregate=20
            functions cannot leverage this. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>This is a subtle but important issue, so please review =
the=20
            referenced article for the full set of conditions in which =
the=20
            pushdown can happen. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Columnstore indexes - =
query=20
            performance | Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Columnstore string predicate push down</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Applying predicates on String values is a lot more =
expensive than=20
            filtering on an Integer column. Also, it can slow down =
analytics=20
            queries significantly, specially on large DWs </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>The columnstore index in SQL Server 2016 allows string =
predicates=20
            to be pushed down to the SCAN node, resulting in significant =

            improvement in query performance. Like before, this speed up =
is=20
            automatic when you upgrade to SQL Server 2016, requiring no =
changes=20
            to your query or workload. In case of SQL Server 2014, avoid =
filter=20
            condition using string type only. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Columnstore Index =
Performance: SQL=20
            Server 2016 =E2=80=93 String Predicate Pushdown =E2=80=93 =
MSSQL Tiger Team=20
</P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Conditional Join usage</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Conditional Join will cause Index scan operation =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Instead of either JOIN a table to more than one other =
table or to=20
            JOIN a column in a table to different columns in a second =
table,=20
            choose the JOIN column based. The JOIN can be based on a =
condition,=20
            partitioning the data and then use union all to reduce =
number of=20
            scan </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Join Conditions for =
Tables,=20
            Queries, and Views </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Conditional Joins in =
SQL Server=20
</P>
            <P>DISCLAIMER: Third-party link(s) are provided on an =
'as-is' basis.=20
            Microsoft does not offer any guarantees or warranties =
regarding the=20
            content on the third-party site(s). </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Consider using memory optimized (non-durable) tables =
instead=20
            of global temporary tables</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Lock-free nature of memory-optimized tables and no =
logging of=20
            schema only table improve performance </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Memory-optimized table types and SCHEMA_ONLY =
memory-optimized=20
            tables can be used to replace traditional table types and=20
            traditional temp tables, bypassing tempdb completely and =
providing=20
            additional performance improvements, through =
memory-optimized data=20
            structures and data access methods. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Improving temp table =
and table=20
            variable performance using memory optimization | SQL Server =
Database=20
            Engine Blog </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>CTEs are not always efficient when the SELECT relies on =
the=20
            DISTINCT of all the columns</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Using CTEs is not the most efficient approach when the =
statement=20
            immediately following the CTE expression relies on the =
DISTINCT of=20
            all the columns. Essentially this implies that the recursive =
logic=20
            doesn't have a primary key in the anchor, and thereby =
allowing each=20
            recursive member to not be unique. This creates a scenario =
where a=20
            huge number of duplicate rows are generated. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Recursive CTE queries do have a reliance on the unique=20
            parent/child keys in order to get the best performance. If =
this is=20
            not possible to achieve, then a WHILE loop is potentially a =
much=20
            more efficient approach to handling the recursive query. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Optimize Recursive CTE =
Query | SQL=20
            Server Customer Advisory Team </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Recursive Queries =
Using Common=20
            Table Expressions </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Data type mismatch comparing column and string =
literal</B>=20
        </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Comparing columns to string or integer literals in a =
Boolean=20
            comparison expression will potentially lead to performance =
issues=20
            and typically will negate the index seek. Sometimes, the =
literal=20
            value can be 'up-cast' to the column datatype, but this is a =

            sub-optimal coding practice. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Review the affected expressions for literals with =
different=20
            datatypes than the columns they are being compared with. Use =
the=20
            right type of literal wherever possible. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Data Type Precedence =
(Transact-SQL)=20
            | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Implicit Conversions =
=E2=80=93 Craig=20
            Freedman's SQL Server Blog </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Data type mismatch comparing column and variable</B> =
</TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>A mismatch between the data types of column and variable =
involved=20
            in a Boolean comparison expression will lead to performance =
issues=20
            and typically will negate the index seek. </P>
            <P><BR>As always, please test the implemented =
recommendations=20
            thoroughly before entering production. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Review the affected column and variable for data type =
selection.=20
            Use the right type of variable wherever possible. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Data Type Precedence =
(Transact-SQL)=20
            | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Implicit Conversions =
=E2=80=93 Craig=20
            Freedman's SQL Server Blog </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Data type mismatch comparing two columns</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>A mismatch between the data types of columns involved in =
a=20
            Boolean comparison expression will lead to performance =
issues and=20
            typically will negate the index seek. </P>
            <P><BR>As always, please test the implemented =
recommendations=20
            thoroughly before entering production. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Review the affected columns for data type selection. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Data Type Precedence =
(Transact-SQL)=20
            | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Implicit Conversions =
=E2=80=93 Craig=20
            Freedman's SQL Server Blog </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Data type mismatch in stored procedure parameter =
values</B>=20
          </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Silent truncation, data loss and / or performance issues =
in=20
            specific cases. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Use the correct data types for parameter values. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Data Type Precedence =
(Transact-SQL)=20
            | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Implicit Conversions =
=E2=80=93 Craig=20
            Freedman's SQL Server Blog </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; CREATE PROCEDURE =
(Transact-SQL) |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Distinct within aggregate Function</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Distinct within the aggregate function performs extra =
sort=20
            operation to remove duplicate values </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Remove distinct clause from the aggregate function and =
use=20
            appropriate join and filter condition to remove duplicate =
rows=20
          </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; CREATE FUNCTION =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SELECT Clause =
(Transact-SQL) |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>EXECUTE statements should specify schema identifier</B> =

</TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>The lack of owner-qualification forces SQL Server to =
perform a=20
            second cache lookup and obtain an exclusive compile lock =
before the=20
            program determines that the existing cached execution plan =
can be=20
            reused. Obtaining the lock and performing lookups and other =
work=20
            that is needed to reach this point can introduce a delay for =
the=20
            compile locks that leads to blocking. This is especially =
true if=20
            many users who are not the stored procedure's owner =
concurrently run=20
            the procedure without supplying the owner's name. Be aware =
that even=20
            if you do not see SPIDs waiting for compile locks, lack of=20
            owner-qualification can introduce delays in stored procedure =

            execution and cause unnecessarily high CPU utilization. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>When executing a user-defined procedure, we recommend =
qualifying=20
            the procedure name with the schema name. This practice gives =
a small=20
            performance boost, because the Database Engine does not have =
to=20
            search multiple schemas. It also prevents executing the =
wrong=20
            procedure if a database has procedures with the same name in =

            multiple schemas. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Description of SQL =
Server blocking=20
            caused by compile locks </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Execute a Stored =
Procedure |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>In-Memory Statements using &lt;&gt; or&nbsp;!=3D =
syntax</B>=20
        </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Index seek on inequality predicates cannot use Range =
Index for=20
            Seek Operations </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Queries must include equality predicates for all index =
key=20
            columns to benefit from the point lookup performance of hash =

            indexes. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Guidelines for Using =
Indexes on=20
            Memory-Optimized Tables </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>In-Memory Statements using BETWEEN syntax cannot use =
Hash=20
            Index</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Index seek on inequality predicates cannot use Range =
Index for=20
            Seek Operations </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Queries must include equality predicates for all index =
key=20
            columns to benefit from the point lookup performance of hash =

            indexes. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Guidelines for Using =
Indexes on=20
            Memory-Optimized Tables </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>In-Memory Statements using LIKE statement cannot use =
Hash=20
            Index</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Index seek on inequality predicates cannot use Range =
Index for=20
            Seek Operations </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Queries must include equality predicates for all index =
key=20
            columns to benefit from the point lookup performance of hash =

            indexes. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Guidelines for Using =
Indexes on=20
            Memory-Optimized Tables </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>In-Memory statements using NOT IN syntax cannot use =
Hash=20
            Index</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Index seek on inequality predicates cannot use Range =
Index for=20
            Seek Operations </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Queries must include equality predicates for all index =
key=20
            columns to benefit from the point lookup performance of hash =

            indexes. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Guidelines for Using =
Indexes on=20
            Memory-Optimized Tables </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Input parameter is modified inside a procedure</B> =
</TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>The execution plan is computed with the input parameter =
as a=20
            baseline. If the actual value of the parameter changes =
inside the=20
            stored procedure, then it may increase the risk of poor =
performance.=20
            </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>For best query performance, in some situations you'll =
need to=20
            avoid assigning a new value to a parameter of a stored =
procedure=20
            within the procedure body, and then using the parameter =
value in a=20
            query. The stored procedure and all queries in it are =
initially=20
            compiled with the parameter value first passed in as a =
parameter to=20
            the query. This is sometimes called parameter sniffing. If =
really=20
            needed, consider OPTIMIZE FOR UNKNOWN </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Don=E2=80=99t change =
value of that=20
            parameter =E2=80=93 CSS SQL Server Engineers </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; OPTIMIZE FOR UNKNOWN =
=E2=80=93 a little=20
            known SQL Server 2008 feature =E2=80=93 SQL Programmability =
&amp; API=20
            Development Team Blog </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>INSERT can execute in parallel if TABLOCK is =
specified</B>=20
        </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>In SQL Server 2016 with compatibility level 130, =
INSERT...SELECT=20
            operations into on-disk tables can utilize multiple threads =
for the=20
            INSERT only if the TABLOCK hint is specified for the target =
table=20
            (please review the Reading links for exceptions for local =
temp=20
            tables). </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Usage of TABLOCK can help in bulk data loading scenarios, =
but=20
            obviously at the cost of concurrency. Evaluate the =
application=20
            scenario and accordingly decide if this optimization should =
be=20
            leveraged. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SQLSweet16!, Episode =
3: Parallel=20
            INSERT =E2=80=A6 SELECT | SQL Server Customer Advisory Team =
</P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Real World Parallel =
INSERT=E2=80=A6SELECT:=20
            What else you need to know! | SQL Server Customer Advisory =
Team=20
          </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Intrinsic function usage on columns in JOIN =
predicate</B>=20
        </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>When a column is wrapped around in a function call within =
a=20
            predicate, the processing can be extremely slow due to the =
potential=20
            resultant scan. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Try minimizing this kind of construct. Using it on =
smaller result=20
            sets is less of an impact than when used on very large data =
sets. In=20
            unavoidable circumstances, persisted computed columns or =
indexed=20
            views might be an alternative. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; CREATE FUNCTION =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Removing Function =
Calls for Better=20
            Performance in SQL Server </P>
            <P>DISCLAIMER: Third-party link(s) are provided on an =
'as-is' basis.=20
            Microsoft does not offer any guarantees or warranties =
regarding the=20
            content on the third-party site(s). </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Intrinsic function usage on columns in predicate</B> =
</TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>When a column is wrapped around in a function call within =
a=20
            predicate, the processing can be extremely slow due to the =
potential=20
            resultant scan. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Try minimizing this kind of construct. Using it on =
smaller result=20
            sets is less of an impact than when used on very large data =
sets. In=20
            unavoidable circumstances, persisted computed columns or =
indexed=20
            views might be an alternative. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; CREATE FUNCTION =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Removing Function =
Calls for Better=20
            Performance in SQL Server </P>
            <P>DISCLAIMER: Third-party link(s) are provided on an =
'as-is' basis.=20
            Microsoft does not offer any guarantees or warranties =
regarding the=20
            content on the third-party site(s). </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>LIKE predicate with leading wildcard</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>A LIKE predicate with a leading&nbsp;% wildcard can lead =
to=20
            non-usage of otherwise suitable indexes, thereby reducing=20
            performance. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>If LIKE is really necessary, try to use&nbsp;% at the end =
of the=20
            word, not the beginning LIKE name%. Also, if you want to =
look for=20
            words within large text fields, Full-Text Search might be =
more=20
            appropriate. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; LIKE (Transact-SQL) | =
Microsoft=20
            Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Full-Text Search | =
Microsoft Docs=20
            </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Query with Full-Text =
Search |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Multiple DISTINCT aggregations in the same statement =
can=20
            perform poorly</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Distinct aggregation can results in some very slow =
queries.=20
            Mixing two or more distinct aggregates, leads to spooling =
and=20
            rereading. </P>
            <P>See reference links for more information. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Rewrite to improve performance. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Aggregation =E2=80=93 =
Craig Freedman's SQL=20
            Server Blog </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Distinct Aggregation =
Considered=20
            Harmful =E2=80=93 Tips, Tricks, and Advice from the SQL =
Server Query=20
            Processing Team </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Page Free Space&nbsp;: =
Is Distinct=20
            Aggregation Still Considered Harmful? </P>
            <P>DISCLAIMER: Third-party link(s) are provided on an =
'as-is' basis.=20
            Microsoft does not offer any guarantees or warranties =
regarding the=20
            content on the third-party site(s). </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>No supporting index for WHERE clause columns</B> =
</TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>The lack of supporting indexes will lead to table scans.=20
            Currently, this is a conservative check: </P>
            <P><BR>1. Iterates through statements in each batch; =
considering=20
            only SELECT / INSERT / UPDATE / MERGE statements. </P>
            <P>2. Make a list of all the tables accessed in the current=20
            statement. </P>
            <P>3. Then, for each WHERE clause, identify boolean =
comparison=20
            expressions involving columns. </P>
            <P>4. For each such expression, check if at least one column =
for=20
            each table has an associated index where that column is the =
leading=20
            column. If this is found, set a 'safe' flag for that table, =
for this=20
            statement. </P>
            <P>5. After combing through all the expressions, dump out =
all the=20
            tables (and columns therein) where there is not even a =
single index=20
            to support the WHERE clause predicates. </P>
            <P><BR>Based on the list of columns per table, the designer =
/=20
            programmer can select columns with high cardinality and =
create=20
            non-clustered indexes on them. The key here is to look for =
repeated=20
            patterns, and to tie these observations back to 'heavy =
hitter' T-SQL=20
            code. </P>
            <P><BR>IMPORTANT: This automated logic has been tested =
across many=20
            patterns and proven to be largely accurate. However, we =
cannot=20
            guarantee that all missing indexes will be detected. And in =
rare=20
            cases there may be the occasional false positive. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Review the affected predicate and tune it by adding a =
supporting=20
            index. As always, please test the implemented =
recommendations=20
            thoroughly before entering production. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Clustered Index Design =
Guidelines=20
            </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Finding a better =
candidate for your=20
            SQL Server clustered indexes </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SQL Server Index =
Design Guide </P>
            <P>DISCLAIMER: Third-party link(s) are provided on an =
'as-is' basis.=20
            Microsoft does not offer any guarantees or warranties =
regarding the=20
            content on the third-party site(s). </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Objects have been identified that use the parent axis=20
            access</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Parent axis access is a programming technique in which =
data from=20
            multiple levels of an XML document can be pulled back in a =
single=20
            SELECT statement. </P>
            <P> </P>
            <P>In Microsoft SQL Server 2000, there is no alternative to =
using=20
            parent axis access except to code multiple SELECT =
statements.=20
            However, this is frequently impractical. In SQL Server 2005 =
and=20
            above, the CROSS APPLY operator provides an alternative that =
is more=20
            effective than parent axis access. </P>
            <P> </P>
            <P>Widespread use of parent axis access in a SQL Server 2000 =
system=20
            may justify upgrading an instance to earlier versions of SQL =
Server,=20
            particularly if performance of the programmability objects =
is an=20
            issue. However, note that such programmability objects would =
require=20
            recoding to exploit this performance benefit. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Given the performance implications, you should avoid =
using parent=20
            axis access in SQL Server 2005 / 2008. </P>
            <P> </P>
            <P>Using the following code as an example: </P>
            <P> </P>
            <P>SELECT c.value('(../../../title/text())[1]', =
'nvarchar(100)') AS=20
            Solution, </P>
            <P>c.value('(../../title/text())[1]', 'nvarchar(100)') AS=20
            ScenarioGroup, </P>
            <P>c.value('(../title/text())[1]', 'nvarchar(100)') AS =
Scenario,=20
</P>
            <P>c.value('(title/text())[1]', 'nvarchar(100)') AS =
Capability </P>
            <P>FROM=20
            =
@xml.nodes('/solutionmap[1]/level0-item/level1-item/process') </P>
            <P>AS t </P>
            <P> </P>
            <P>It should be replaced with this code. </P>
            <P> </P>
            <P>SELECT sm.sm.value('(title/text())[1]', 'nvarchar(100)') =
AS=20
            Solution, </P>
            <P>l0.item.value('(title/text())[1]', 'nvarchar(100)') AS=20
            ScenarioGroup, </P>
            <P>l1.item.value('(title/text())[1]', 'nvarchar(100)') AS =
Scenario,=20
            </P>
            <P>p.process.value('(title/text())[1]', 'nvarchar(100)') AS=20
            Capability </P>
            <P>FROM @xml.nodes('/solutionmap[1]') </P>
            <P>AS sm(sm) </P>
            <P>CROSS APPLY </P>
            <P>sm.sm.nodes('level0-item') </P>
            <P>AS l0(item) </P>
            <P>CROSS APPLY </P>
            <P>l0.item.nodes('level1-item') </P>
            <P>AS l1(item) </P>
            <P>CROSS APPLY </P>
            <P>l1.item.nodes('process') </P>
            <P>AS p(process) </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Parent navigations in =
.value=20
            results in absymal performance. | Microsoft Connect =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Objects have been identified that use the T-SQL syntax=20
            OPENXML</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>In SQL Server 2000, there was no alternative to OPENXML. =
In SQL=20
            2005 and above, the .nodes() syntax will generally provide =
more=20
            compact and maintainable code. In addition, it will =
typically=20
            perform better, with less consumption of server memory than =
OPENXML.=20
            </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Avoid using OPENXML in SQL Server 2005 and above. OPENXML =
should=20
            be used only in rare situations when it provides better =
performance=20
            and more compact code. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; XQuery Language =
Reference (SQL=20
            Server) | Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Objects were identified that use XML access and do not=20
            specify a single root node</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Specifying a single root node in XML access, when =
appropriate,=20
            will improve performance. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Given the performance implications, a single root node =
should be=20
            specified in all instances for which it is appropriate. If =
the XML=20
            is indexed, only marginal performance improvements will be =
realized.=20
            </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; XML Best Practices for =
Microsoft=20
            SQL Server 2005 </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Open transactions issue</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Opened transactions can lead to blocking issues. =
Transactions=20
            must remain open the shortest time possible. Long running=20
            transactions can generate problems with the usage of the log =
file as=20
            well. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>All stored procedures which open a transaction should =
ROLLBACK or=20
            COMMIT it in the same scope. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Long-Running =
Transactions </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; BEGIN TRANSACTION =
(Transact-SQL) |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Parallel INSERT reverts to single thread when targeting =
a=20
            table with an identity column</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>When using an INSERT with a TABLOCK hint specified for =
the target=20
            table, you expect SQL Server to leverage parallel insert =
operation.=20
            However, this is not the case when the target table has an =
identity=20
            column defined. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Check if the TABLOCK hint is really needed. Also, =
consider using=20
            a ROW_NUMBER() function to work around this behavior. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SQLSweet16!, Episode =
3: Parallel=20
            INSERT =E2=80=A6 SELECT | SQL Server Customer Advisory Team =
</P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Real World Parallel =
INSERT=E2=80=A6SELECT:=20
            What else you need to know! | SQL Server Customer Advisory =
Team=20
          </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Row goal issue</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Suboptimal plans in some cases. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Each case should be looked at by examining the query =
plan. In=20
            some cases, nothing has to be done. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Row Goals in Action =
=E2=80=93 Tips, Tricks,=20
            and Advice from the SQL Server Query Optimization Team </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Row Goals Gone Rogue =
=E2=80=93 Bart=20
            Duncan's SQL Weblog </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Page Free Space&nbsp;: =
Inside the=20
            Optimizer: Row Goals In Depth </P>
            <P>DISCLAIMER: Third-party link(s) are provided on an =
'as-is' basis.=20
            Microsoft does not offer any guarantees or warranties =
regarding the=20
            content on the third-party site(s). </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>UDF usage in JOIN predicate</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>The UDF will be evaluated once per candidate row in the =
JOIN=20
            predicate. If the UDF is complex, processing can be =
extremely slow,=20
            almost like a cursor usage scenario </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Try minimizing this kind of construct. Using it on =
smaller result=20
            sets is less of an impact than when used on very large data =
sets.=20
            Also, consider using a TVF or CROSS APPLY instead. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Use Table-Valued =
Parameters=20
            (Database Engine) | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Create User-defined =
Functions=20
            (Database Engine) | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Using APPLY =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>UDF usage in the output list</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>The UDF will be evaluated once per output row. If the UDF =
is=20
            complex, processing can be extremely slow, almost like a =
cursor=20
            usage scenario </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Try minimizing this kind of construct. Using it on =
smaller result=20
            sets is less of an impact than when used on very large data =
sets.=20
            Also, consider using a TVF and CROSS APPLY. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Use Table-Valued =
Parameters=20
            (Database Engine) | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Create User-defined =
Functions=20
            (Database Engine) | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Using APPLY =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>UDF usage in WHERE clause predicate</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>The UDF will be evaluated once per candidate row. If the =
UDF is=20
            complex, processing can be extremely slow, almost like a =
cursor=20
            usage scenario </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Try minimizing this kind of construct. Using it on =
smaller result=20
            sets is less of an impact than when used on very large data =
sets.=20
            Also, consider using a TVF and CROSS APPLY. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Use Table-Valued =
Parameters=20
            (Database Engine) | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Create User-defined =
Functions=20
            (Database Engine) | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Using APPLY =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>UDF without table access should specify =
SCHEMABINDING</B>=20
        </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>There is small but distinct performance hit if you do not =
mark an=20
            UDF (which does not access any table data) as SCHEMABINDING. =

        </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Use SCHEMABINDING when possible. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Improving query plans =
with the=20
            SCHEMABINDING option on T-SQL UDFs =E2=80=93 SQL =
Programmability &amp; API=20
            Development Team Blog </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Create User-defined =
Functions=20
            (Database Engine) | Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Usage of NEWID() in column default constraint</B> =
</TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>When a GUID column is used as a row identifier, it may =
not be=20
            advisable to use the NEWID function. This is because the =
NEWID=20
            function causes random activity and uses fewer cached data =
pages.=20
            </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Using NEWSEQUENTIALID can be faster than using the NEWID=20
            function. Using NEWSEQUENTIALID also helps to completely =
fill the=20
            data and index pages. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; NEWSEQUENTIALID =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Performance Comparison =
- Identity()=20
            x NewId() x NewSequentialId - CodeProject </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Using NewSequentialID =
Instead of=20
            NewID | Querying content from SQL Server Pro </P>
            <P>DISCLAIMER: Third-party link(s) are provided on an =
'as-is' basis.=20
            Microsoft does not offer any guarantees or warranties =
regarding the=20
            content on the third-party site(s). </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Wildcard pattern usage</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>This kind of wildcard query pattern will cause a table =
scan,=20
            resulting in poor query performance. </P>
            <P><BR>This rule checks for the following varieties of this =
pattern:=20
            </P>
            <P><BR>&nbsp;-- Pattern 1 </P>
            <P>&nbsp;SELECT * </P>
            <P>&nbsp;FROM TabFoo </P>
            <P>&nbsp;WHERE ColBar =3D @someparam OR @someparam IS NULL =
</P>
            <P><BR>&nbsp;-- Pattern 2 </P>
            <P>&nbsp;SELECT * </P>
            <P>&nbsp;FROM TabFoo </P>
            <P>&nbsp;WHERE ColBar =3D ISNULL(@someparam, ColBar) </P>
            <P><BR>Known limitation for case 2: we do not detect this =
pattern if=20
            the column name is prefixed with a table name or table =
alias.=20
        </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>In many cases, an OPTION (RECOMPILE) hint can be a quick=20
            workaround, but can also cause too many recompilations. From =
a=20
            design point of view, you can rewrite the code. Consider =
using=20
            separate IF clauses, separated stored procedures or (not=20
            recommended) use a dynamic SQL statement with sp_executesql, =

            watching for the risk of sql injection. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; OPTION(RECOMPILE) =
redux (a.k.a.=20
            Parameter Embedding Optimization not working) =E2=80=93 =
Esoteric </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; T-SQL Anti-pattern of =
the day:=20
            =E2=80=98all-in-one=E2=80=99 queries =E2=80=93 Esoteric =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>XML created from FOR XML PATH TYPE may lead to bad=20
            performance</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>When nested FOR XML PATH with TYPE construct is used, the =

            performance of query may be very poor. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Avoid using nested FOR XML PATH with TYPE construct. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; XML created from FOR =
XML PATH TYPE=20
            may lead to bad performance | Microsoft Connect =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR></TBODY></TABLE></TD>
    <TD></TD></TR></TBODY></TABLE>
<TABLE class=3Dwikitable>
  <TBODY>
  <TR>
    <TD></TD>
    <TD>
      <TABLE class=3Dwikitable>
        <TBODY>
        <TR>
          <TD colSpan=3D2><B>Query Hints</B> </TD></TR>
        <TR>
          <TD></TD>
          <TD><B>FORCE ORDER query hint usage</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>FORCE ORDER specifies that the join order indicated by =
the query=20
            syntax is preserved during query optimization. Explicit =
usage of=20
            this hint can cause sub-optimal plan to be selected. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>As far as possible let the optimizer decide what join =
strategy to=20
            use. Keep statistics up to date to reduce the risk of the =
optimizer=20
            choosing a bad join strategy. We recommend that hints be =
used only=20
            as a last resource by experienced developers and database=20
            administrators. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Query Hints =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Using the USE PLAN =
Query Hint </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Understanding Plan =
Forcing </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Plan Forcing Scenarios =
and Examples=20
            </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Specifying Query Plans =
with Plan=20
            Forcing </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Conor vs. =
=E2=80=9CDoes Join Order Matter?=E2=80=9D=20
            =E2=80=93 Conor vs. SQL </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>HASH JOIN query hint usage</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Hash join, unlike the other join methods, requires a =
memory grant=20
            to store the hash table. Thus, there is a limit to the =
number of=20
            concurrent hash joins that SQL Server can run at any given =
time.=20
            While these characteristics are generally not a problem for =
data=20
            warehouses, they are undesirable for most OLTP applications. =

            Explicit usage of this hint can cause sub-optimal plan to be =

            selected. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>As far as possible let the optimizer decide what join =
strategy to=20
            use. Keep statistics up to date to reduce the risk of the =
optimizer=20
            choosing a bad join strategy. We recommend that hints be =
used only=20
            as a last resource by experienced developers and database=20
            administrators. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Using the USE PLAN =
Query Hint </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Understanding Plan =
Forcing </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Plan Forcing Scenarios =
and Examples=20
            </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Specifying Query Plans =
with Plan=20
            Forcing </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Hash Join =E2=80=93 =
Craig Freedman's SQL=20
            Server Blog </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Understanding Hash =
Joins </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>KEEPFIXED PLAN query hint usage</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>The KEEPFIXED PLAN query hint forces the query optimizer =
to never=20
            recompile a query because of changes in statistics or =
indexed column=20
            changes (for example, update, delete, or insert). While in =
specific=20
            cases this hint may be required, the wrong use of the hint =
can cause=20
            suboptimal plans to be used. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Statement level recompilation in SQL 2005 and above =
minimizes the=20
            need to use such hints. Review the links in the Reading =
section=20
            below and decide if this hint is really required in your =
code.=20
          </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Using the USE PLAN =
Query Hint </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Understanding Plan =
Forcing </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Plan Forcing Scenarios =
and Examples=20
            </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Specifying Query Plans =
with Plan=20
            Forcing </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; HOW TO: Use KEEPFIXED =
PLAN to=20
            Disable Stored Procedure Recompilations </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>List all query hints</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Query hints specify that the indicated hints should be =
used=20
            throughout the query. They affect all operators in the =
statement. If=20
            UNION is involved in the main query, only the last query =
involving a=20
            UNION operation can have the OPTION clause. Query hints are=20
            specified as part of the OPTION clause. If one or more query =
hints=20
            cause the query optimizer not to generate a valid plan, =
error 8622=20
            is raised. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Because the SQL Server query optimizer typically selects =
the best=20
            execution plan for a query, we recommend only using hints as =
a last=20
            resource for experienced developers and database =
administrators.=20
          </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Query Hints =
(Transact-SQL) |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>LOOP JOIN query hint usage</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>In its simplest form, a nested loop join compares each =
row from=20
            one table (known as the outer table) to each row from the =
other=20
            table (known as the inner table) looking for rows that =
satisfy the=20
            join predicate. The total number of rows compared and, thus, =
the=20
            cost of this algorithm is proportional to the size of the =
outer=20
            table multiplied by the size of the inner table.&nbsp; Since =
this=20
            cost grows quickly as the size of the input tables grow, in =
practice=20
            we try to minimize the cost by reducing the number of inner =
rows=20
            that we must consider for each outer row. Explicit usage of =
this=20
            hint can cause sub-optimal plan to be selected. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>As far as possible let the optimizer decide what join =
strategy to=20
            use. Keep statistics up to date to reduce the risk of the =
optimizer=20
            choosing a bad join strategy. We recommend that hints be =
used only=20
            as a last resource by experienced developers and database=20
            administrators. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Using the USE PLAN =
Query Hint </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Understanding Plan =
Forcing </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Plan Forcing Scenarios =
and Examples=20
            </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Specifying Query Plans =
with Plan=20
            Forcing </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Query Hints =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Conor vs. Join =
Algorithms =E2=80=93 Conor=20
            vs. SQL </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>MAXDOP query hint usage</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Hints override the query optimizer and affect the =
resulting query=20
            optimizer plan. Thus, hints should be used judiciously and =
never by=20
            default in your code. In addition, misusing hints can result =
in=20
            unsatisfactory query performance and reduced database =
concurrency.=20
            In some cases, misusing hints can also result in data =
integrity=20
            issues. In particular, MAXDOP query hint overrides the max =
degree of=20
            parallelism configuration option of sp_configure and =
Resource=20
            Governor for the query specifying this option. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Determine the cause of the hint usage and test whether =
the hint=20
            is still overriding the original behavior that was intended. =
If=20
            possible, remove the hint from the code. If this is not =
possible,=20
            document the location and background of the hint so you can =
evaluate=20
            the benefits of using it in future service packs and =
versions of SQL=20
            Server. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Server=E2=80=99s =
=E2=80=9CMax Degree of=20
            Parallelism=E2=80=9D setting, Resource Governor=E2=80=99s =
MAX_DOP and query hint=20
            MAXDOP=E2=80=93which one should SQL Server use? =E2=80=93 =
CSS SQL Server Engineers=20
            </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; The ins and outs of =
MAXDOP =E2=80=93 Cindy=20
            Gross: Small Bites of Big Data, Small Data, All Data </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Understanding Plan =
Forcing </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Plan Forcing Scenarios =
and Examples=20
            </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Specifying Query Plans =
with Plan=20
            Forcing </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Query Hints =
(Transact-SQL) |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>MERGE JOIN query hint usage</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Merge join requires the inputs to be sorted on the join =
keys. If=20
            the inputs are not sorted, a Sort operator may be =
introduced.=20
            Explicit usage of this hint can cause sub-optimal plan to be =

            selected. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>As far as possible let the optimizer decide what join =
strategy to=20
            use. Keep statistics up to date to reduce the risk of the =
optimizer=20
            choosing a bad join strategy. We recommend that hints be =
used only=20
            as a last resource by experienced developers and database=20
            administrators. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Merge Join =E2=80=93 =
Craig Freedman's SQL=20
            Server Blog </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Using the USE PLAN =
Query Hint </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Understanding Plan =
Forcing </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Plan Forcing Scenarios =
and Examples=20
            </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Specifying Query Plans =
with Plan=20
            Forcing </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Query Hints =
(Transact-SQL) |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR></TBODY></TABLE></TD>
    <TD></TD></TR></TBODY></TABLE>
<TABLE class=3Dwikitable>
  <TBODY>
  <TR>
    <TD></TD>
    <TD>
      <TABLE class=3Dwikitable>
        <TBODY>
        <TR>
          <TD colSpan=3D2><B>Readability</B> </TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Avoid mixing named parameters with un-named parameters =
in=20
            EXECUTE procedure references</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Readability of code would be better if a consistent =
parameter=20
            passing style is used. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Either use all named parameters or all un-named =
parameters. In=20
            some cases, such as calling native compiled procedures, the =
un-named=20
            parameter scheme is preferred. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Specifying a Parameter =
Name </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; CREATE PROCEDURE =
(Transact-SQL) |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Consider using inbuilt T-SQL functionality over ODBC =
function=20
            calls</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>ODBC drivers support certain inbuilt functions, some of =
which may=20
            overlap with inbuilt T-SQL functions. Though there is not a =
major=20
            risk associated with invoking these, it is recommended to =
utilize=20
            the intrinsic T-SQL functions if there is a direct =
equivalent in=20
            T-SQL. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Review the list of ODBC Scalar Functions and restrict =
their usage=20
            to those which are not duplicated in T-SQL. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; ODBC Scalar Functions=20
            (Transact-SQL) | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Appendix E: Scalar =
Functions |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>DATEPART specifies abbreviation</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>The programmer can specify abbreviations when using =
DATEPART.=20
            Such abbreviations can have subtle but serious differences, =
such as=20
            the difference between 'y' (DayOfYear) and 'yy' (Year). =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>For better readability, it is recommended to use the =
complete=20
            expression such as Year, Quarter, DayOfYear etc. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; DATEPART =
(Transact-SQL) | Microsoft=20
            Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>IF statements should have a BEGIN...END for =
readability</B>=20
          </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Having explicit BEGIN...END blocks can improve =
readability in=20
            cases. Also, avoid future logic issues during the =
maintenance of the=20
            code. This is a matter of coding style. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Generally, use the explicit BEGIN...END block as a =
pattern.=20
          </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; BEGIN...END =
(Transact-SQL) |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Input parameter is not used</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Unused input parameters may be due to legacy code which =
has not=20
            been updated to reflect the current code logic. This may =
cause=20
            confusion in some cases. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Remove the parameter if not in use, after checking =
potential=20
            impact on client applications. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Using Variables and =
Parameters=20
            (Database Engine) </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>INSERT should specify the list of columns</B> =
</TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Any change in schema or the column ordering for the =
underlying=20
            table might result in incorrect data insertion. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Always specify the column names in the INSERT list. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; INSERT (Transact-SQL) =
| Microsoft=20
            Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Local variable is not used</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Unused local variables cause readability issues and =
confusion.=20
            They also present an opportunity to clean up. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Review and remove the local variable unless there are =
compelling=20
            reasons to retain it. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; DECLARE =
@local_variable=20
            (Transact-SQL) | Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Review the usage of the 'columnAlias =3D columnName' =
syntax</B>=20
          </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>We detected the usage of column alias syntax similar to: =
</P>
            <P><BR>&nbsp;colAlias =3D someColName </P>
            <P><BR>The usage of the 'equals sign' (also known as the =
assignment=20
            operator) to associate the column alias with an expression =
might not=20
            be preferred in certain coding standards / styles. =
Currently, this=20
            syntax is not explicitly deprecated / removed. This issue is =

            provided largely as information and the developer needs to =
consider=20
            the overall coding standard / style in remediating this. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>It is recommended to use the AS syntax as recommended in =
the=20
            reading links below. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SELECT Clause =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Assignment Operator =
(Transact-SQL)=20
            | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Aaron Bertrand&nbsp;: =
Bad Habits to=20
            Kick&nbsp;: Using AS instead of =3D for column aliases </P>
            <P>DISCLAIMER: Third-party link(s) are provided on an =
'as-is' basis.=20
            Microsoft does not offer any guarantees or warranties =
regarding the=20
            content on the third-party site(s). </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Review the use of PRINT statements</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>For the ODBC 3.5x compliant SQL Server driver, messages =
from=20
            consecutive PRINT, RAISERROR, DBCC, or similar statements, =
as in a=20
            batch or stored procedure, are returned in a separate result =
set for=20
            each statement. </P>
            <P><BR>Failure to process these messages completely might =
result in=20
            open transactions on the server side. </P>
            <P><BR>In many cases such PRINT statements may be 'left =
over' from=20
            debugging or development time tracing. Such 'debugging' =
statements=20
            should be removed from the code before it enters production. =
</P>
            <P><BR>Lastly, all such PRINT messages are sent over the =
network to=20
            the client, so it is not a good idea from a performance or =
security=20
            point of view to send debugging-level messages to the =
client.=20
        </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>If the PRINT statements are used for debugging purposes, =
please=20
            consider removing them from production code. Tools such as =
SQL=20
            Profiler can be used for similar purposes. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; PRINT (Transact-SQL) | =
Microsoft=20
            Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; RAISERROR =
(Transact-SQL) |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Usage of GOTO statement observed</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>GOTO is a T-SQL programming construct that allows =
processing to=20
            pass to another location in the stored procedure. However, =
using it=20
            contributes to poor performance in systems because of the =
overhead=20
            involved as well as the ordinary design of the procedures =
that=20
            employ it. You should be able to build a more effective and=20
            maintainable system by using alternative approaches to meet =
the=20
            coding requirement. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Whenever possible, do not use GOTO. Use the GOTO =
statement=20
            sparingly. Excessive use of the GOTO statement can make it =
difficult=20
            to understand the logic of a Transact-SQL batch. The logic=20
            implemented using GOTO can almost always be implemented =
using the=20
            other control-of-flow statements. GOTO is best used for =
breaking out=20
            of deeply nested control-of-flow statements. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; GOTO (Transact-SQL) | =
Microsoft=20
            Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Zero-length schema identifier</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>This issue is flagged when we detect code with a blank =
schema=20
            identifier. It is not normal to have a blank schema name and =
it can=20
            confuse readers. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Use the full schema name whenever you can. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; CREATE SCHEMA =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SQL Server Best =
Practices =E2=80=93=20
            Implementation of Database Object Schemas </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR></TBODY></TABLE></TD>
    <TD></TD></TR></TBODY></TABLE>
<TABLE class=3Dwikitable>
  <TBODY>
  <TR>
    <TD></TD>
    <TD>
      <TABLE class=3Dwikitable>
        <TBODY>
        <TR>
          <TD colSpan=3D2><B>Security</B> </TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Detected xp_cmdshell usage</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Potential exposure and elevation of privilege. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>The usage of xp_cmdshell can be avoided by using more =
restrictive=20
            options, such as customizing a SQL/CLR function / stored =
procedure=20
            to do the same. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; xp_cmdshell =
(Transact-SQL) |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>DROP TABLE statement usage</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>DROP TABLE if used wrongly can cause permanent data loss. =
In=20
            addition, DROP TABLE, when applied to a temporary table, can =
affect=20
            the caching behavior for temp table metadata. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Review the usage of DROP TABLE and avoid it for temporary =
tables.=20
            </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Is Tempdb Affecting =
Your Day-to-Day=20
            SQL Server Performance? | SQL Server content from SQL Server =
Pro=20
</P>
            <P>DISCLAIMER: Third-party link(s) are provided on an =
'as-is' basis.=20
            Microsoft does not offer any guarantees or warranties =
regarding the=20
            content on the third-party site(s). </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>EXECUTE used with string variable</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>The usage of unchecked variables in a EXECUTE statement =
can lead=20
            to SQL Injection attacks. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Before you call EXECUTE with a character string, validate =
the=20
            character string. Never execute a command constructed from =
user=20
            input that has not been validated. Use sp_executesql =
instead.=20
        </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; sp_executesql =
(Transact-SQL) </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SQL Injection </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Using sp_executesql =
</P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; EXECUTE (Transact-SQL) =
| Microsoft=20
            Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; How to configure =
URLScan 3.0 to=20
            mitigate SQL Injection Attacks =E2=80=93 IIS =
troubleshooting,=20
            administration, and concepts. </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Nazim's Security Blog =
- Filtering=20
            SQL injection from Classic ASP </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Dynamic SQL &amp; SQL =
injection =E2=80=93=20
            Raul Garcia's blog </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SQL injection: Dynamic =
SQL within=20
            stored procedures =E2=80=93 Varun Sharma's security blog =
</P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Do Stored Procedures =
Protect=20
            Against SQL Injection? =E2=80=93 Brian Swan </P>
            <P>DISCLAIMER: Third-party link(s) are provided on an =
'as-is' basis.=20
            Microsoft does not offer any guarantees or warranties =
regarding the=20
            content on the third-party site(s). </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>KILL statement usage</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Use KILL very carefully, especially when critical =
processes are=20
            running. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Avoid using KILL in any programmability objects. It =
should only=20
            be used by administrators on-demand. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; KILL (Transact-SQL) | =
Microsoft=20
            Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>OPENROWSET / OPENDATASOURCE usage</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Neither OPENDATASOURCE nor OPENROWSET provide all the=20
            functionality of linked server definitions. This includes =
security=20
            management and the ability to query catalog information. =
Every time=20
            that these functions are called, all connection information, =

            including passwords, must be provided. Also, enabling the =
use of=20
            'allow ad hoc distributed queries' means that any =
authenticated=20
            login to SQL Server can access the provider. SQL Server=20
            administrators should enable this feature for providers that =
are=20
            safe to be accessed by any local login. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Ad hoc distributed queries use the OPENROWSET and =
OPENDATASOURCE=20
            functions to connect to remote data sources that use OLE DB. =

            OPENROWSET and OPENDATASOURCE should be used only to =
reference OLE=20
            DB data sources that are accessed infrequently. For any data =
sources=20
            that will be accessed several times, define a linked server. =

        </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; OPENDATASOURCE =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; OPENROWSET =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Linked Servers =
(Database Engine) |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR></TBODY></TABLE></TD>
    <TD></TD></TR></TBODY></TABLE>
<TABLE class=3Dwikitable>
  <TBODY>
  <TR>
    <TD></TD>
    <TD>
      <TABLE class=3Dwikitable>
        <TBODY>
        <TR>
          <TD colSpan=3D2><B>Service Broker</B> </TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Service broker queue processing routine must consider=20
            automatic poison message detection behavior.</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Service Broker provides automatic poison message =
detection. When=20
            a transaction that contains a RECEIVE statement rolls back =
five=20
            times, Service Broker disables all queues that the =
transaction=20
            received messages from, by automatically setting the queue =
status to=20
            OFF. </P>
            <P><BR>IMPORTANT: Please note that this rule is fired =
anytime we=20
            detect a RECEIVE statement along with a ROLLBACK in the same =
context=20
            without a corresponding END CONVERSATION statement. Please =
manually=20
            cross check the logic of any items flagged by this rule to =
ensure=20
            that the issue is applicable. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>When you find a poison message, you should end the =
conversation.=20
            When a conversation ends, Service Broker discards the =
messages for=20
            that conversation. If a service cannot process a message, =
this means=20
            that the service cannot complete the task for the =
conversation.=20
            Ending the conversation with an error notifies the other =
participant=20
            in the conversation that the task failed. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Removing Poison =
Messages </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Handling Poison =
Messages </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR></TBODY></TABLE></TD>
    <TD></TD></TR></TBODY></TABLE>
<TABLE class=3Dwikitable>
  <TBODY>
  <TR>
    <TD></TD>
    <TD>
      <TABLE class=3Dwikitable>
        <TBODY>
        <TR>
          <TD colSpan=3D2><B>Spatial</B> </TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Spatial Index is not used when a subquery is used as =
the=20
            parameter to a spatial function</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Spatial indexes may not be utilized in specific cases =
when a=20
            subquery is used in a spatial function. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Rewrite the query to use a JOIN or collect the result of =
the=20
            subquery within a variable to be passed to the spatial =
function.=20
          </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Spatial Index is NOT =
used when=20
            SUBQUERY used =E2=80=93 CSS SQL Server Engineers </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Spatial Indexes =
Overview |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Spatial method must be on the left side of the =
predicate to=20
            use spatial indexes</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Spatial indexes may not be utilized in specific cases =
when the=20
            spatial function is on the right side of a comparison =
expression.=20
            </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Rewrite the expression so that the spatial function is on =
the=20
            left side. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Spatial Index is NOT =
used when=20
            SUBQUERY used =E2=80=93 CSS SQL Server Engineers </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Spatial Indexes =
Overview |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Values passed to spatial method must be 'constant like' =
in=20
            order to use spatial indexes</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Spatial indexes may not be utilized in specific cases if =
a=20
            variable expression is passed to a spatial function. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Refactor the expression so that only 'constant like' =
expressions=20
            are passed to the spatial function. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Spatial Index is NOT =
used when=20
            SUBQUERY used =E2=80=93 CSS SQL Server Engineers </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Spatial Indexes =
Overview |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR></TBODY></TABLE></TD>
    <TD></TD></TR></TBODY></TABLE>
<TABLE class=3Dwikitable>
  <TBODY>
  <TR>
    <TD></TD>
    <TD>
      <TABLE class=3Dwikitable>
        <TBODY>
        <TR>
          <TD colSpan=3D2><B>SQL Azure</B> </TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Azure SQL DB does not support filetable and =
filestreams</B>=20
          </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Azure SQL DB does not support filetable and filestreams=20
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>You can store your files in Azure Blob Storage and store =
metadata=20
            about files (name, type, URL location) in SQL Azure DB. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Public preview: =
Loading files from=20
            Azure Blob storage into Azure SQL Database </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SQL Server database =
migration to=20
            Azure SQL Database | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Azure SQL Database =
Features=20
            Overview | Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>SQL Azure does not support CDC Function Usage</B> =
</TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>This rule scans CDC Functions used in the database. These =

            functions are not supported in Windows Azure SQL Database.=20
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>CDC feature is not supported on Windows Azure SQL =
Database.=20
          </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Change Data Capture =
Functions=20
            (Transact-SQL) | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SQL Server database =
migration to=20
            Azure SQL Database | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Azure SQL Database =
Features=20
            Overview | Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>SQL Azure: OPENQUERY, OPENROWSET, OPENDATASOURCE, BULK =
INSERT=20
            is not supported</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>SQL Azure Transact-SQL syntax has specific limitations. =
Before=20
            migrating to SQL Azure one must examine the impact of these =
syntax=20
            and language limitations. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Elastic database query now supports querying across =
databases for=20
            read only queries in Azure SQL Database. This makes possible =
common=20
            cross-database querying tasks like selecting from a remote =
table=20
            into a local table. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Cross-Database Queries =
in Azure SQL=20
            Database | Blog | Microsoft Azure </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Azure SQL Database =
elastic query=20
            overview | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SQL Server database =
migration to=20
            Azure SQL Database | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Azure SQL Database =
Features=20
            Overview | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Resolving T-SQL=20
            differences-migration-Azure SQL Database | Microsoft Docs =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>SQL Azure: Unsupported system stored procedures</B> =
</TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>SQL Azure Transact-SQL syntax has specific limitations.=20
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Before migrating to SQL Azure one must examine the impact =
of=20
            these syntax and language limitations. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Restrictions of Stored =
Procedures=20
            in SQL Azure =E2=80=93 Sajid's TechnoTips </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; System Stored =
Procedures=20
            (Transact-SQL) | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SQL Server database =
migration to=20
            Azure SQL Database | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Azure SQL Database =
Features=20
            Overview | Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR></TBODY></TABLE></TD>
    <TD></TD></TR></TBODY></TABLE>
<TABLE class=3Dwikitable>
  <TBODY>
  <TR>
    <TD></TD>
    <TD>
      <TABLE class=3Dwikitable>
        <TBODY>
        <TR>
          <TD colSpan=3D2><B>Stability</B> </TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Code which is affected by the issue in KB article =
960770</B>=20
          </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>IMPORTANT: This issue only affects SQL Server 2008. =
Disregard=20
            this issue if you are on higher versions of SQL Server. </P>
            <P><BR>There is a specific issue related to code which =
inserts into=20
            temporary tables based on values which are selected from the =
same=20
            table. The KB article listed below has more details. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Review the KB article and consider re-writing the code to =
avoid=20
            the issue. OR apply the hotfix described in the KB article =
and use=20
            trace flag 4135. </P>
            <P><BR>For information, this issue does not occur in SQL =
Server=20
            2012. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; FIX: You receive error =
605 and=20
            error 824 when you run a query that inserts data into a =
temporary=20
            table in SQL Server </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Columns with IDENTITY property set may see 'jumps' in =
SQL=20
            2012 and above</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Starting in SQL 2012 the implementation of the IDENTITY =
property=20
            is shared with the SEQUENCE object, with a default behavior =
to=20
            pre-allocate values for performance reasons. The side effect =
of this=20
            is that anytime there is a restart of the instance for =
example, the=20
            identity value obtained 'jumps' by a sometimes considerable =
number.=20
            This may impact applications which rely on a contiguous =
sequence of=20
            numbers. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Be aware of this behavior change in SQL 2012 and above. =
Based on=20
            your application requirements, you can decide how severe (or =
not)=20
            this change is for your application. To revert to the older=20
            behavior, you can consider using trace flag 272 as =
documented in the=20
            linked Microsoft Connect article. Also, you can use the new =
data=20
            type sequence (SQL Server 2012 and above) </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Failover or Restart =
Results in=20
            Reseed of Identity | Microsoft Connect </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; CREATE SEQUENCE =
(Transact-SQL) |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Consider using SCOPE_IDENTITY instead of @@IDENTITY</B> =

</TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Because @@IDENTITY is a global identity value, it might =
have been=20
            updated outside the current scope and obtained an unexpected =
value.=20
            Triggers, including nested triggers used by replication, can =
update=20
            @@IDENTITY outside your current scope. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>To resolve this issue you must replace references to =
@@IDENTITY=20
            with SCOPE_IDENTITY, which returns the most recent identity =
value in=20
            the scope of the user statement. </P>
            <P><BR>Note: There is an open issue with very specific cases =

            involving parallel query plans, where neither @@IDENTITY nor =

            SCOPE_IDENTITY returns the 'correct' value. Please refer to =
the KB=20
            article mentioned below for more details. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; You may receive =
incorrect values=20
            when using SCOPE_IDENTITY() and @@IDENTITY </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Data type mismatch assigning a column to another</B> =
</TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Potential data loss or run time errors. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Review the affected columns for data type selection. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Data Type Precedence =
(Transact-SQL)=20
            | Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Data type mismatch assigning variable to a column</B> =
</TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Potential for data loss, runtime errors. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Review the affected columns for data type selection. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Data Type Precedence =
(Transact-SQL)=20
            | Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Database page verification should set to CHECKSUM for=20
            checking data integrity</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>The page verify checksum option discovers damaged =
database pages=20
            that are caused by disk I/O path errors. Setting it to any =
other=20
            value introduces a risk of not detecting corruption in time. =

        </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>As far as possible ensure the page verification level is =
set to=20
            CHECKSUM. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Set the PAGE_VERIFY =
Database Option=20
            to CHECKSUM | Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Filter expressions in MERGE statement search =
condition</B>=20
        </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Reducing the number of rows in the input stream early in =
the=20
            process by specifying the additional search condition to the =
ON=20
            clause (for example, by specifying ON Source.EmployeeID =3D=20
            Target.EmployeeID AND EmployeeName LIKE 'S%') might seem to =
improve=20
            query performance. However, doing so can cause unexpected =
and=20
            incorrect results. Because the additional search conditions=20
            specified in the ON clause are not used for matching the =
source and=20
            target data, they can be misapplied. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Specify only search conditions in the ON clause that =
determine=20
            the criteria for matching data in the source and target =
tables. That=20
            is, specify only columns from the target table that are =
compared to=20
            the corresponding columns of the source table. Do not =
include=20
            comparisons to other values such as a constant. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Optimizing MERGE =
Statement=20
            Performance </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Inserting, Updating, =
and Deleting=20
            Data by Using MERGE </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Optimize MERGE =
statement when only=20
            a =E2=80=9Cslice=E2=80=9D of target table is affected =
=E2=80=93 Random thoughts by SQL=20
            DBA/System Administrator </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Issue described in KB2606883</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Slow performance when an AFTER trigger runs on a =
partitioned=20
            table in SQL Server 2008 R2 or in SQL Server 2012 =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>To solve this issue, apply the hotfix available on =
References and=20
            then use the -T2470 trace flag OR apply workaround provided=20
        </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; FIX: Slow performance =
when an AFTER=20
            trigger runs on a partitioned table in SQL Server 2008 R2 or =
in SQL=20
            Server 2012 </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Issue described in KB2662301</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>If a concurrent statements that resemble the following =
are=20
            executed in the instance: </P>
            <P><BR>CREATE PROC p AS RETURN ( </P>
            <P>&nbsp;...query... </P>
            <P>); EXEC p; </P>
            <P><BR>OR </P>
            <P><BR>IF EXISTS( </P>
            <P>&nbsp;...subquery... </P>
            <P>); </P>
            <P><BR>Then in these cases, slow performance can occurs in =
SQL=20
            Server 2008 R2 or in SQL Server 2012. This behavior is =
generally=20
            co-related if high CPU usage is observed with contention =
over the=20
            QUERY_EXEC_STATS spinlock </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Run cumulative update package 5 for SQL Server 2008 R2 =
SP1 or=20
            cumulative update package 1 for SQL Server 2012 to fix this =
issue.=20
            </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; FIX: Slow performance =
occurs in SQL=20
            Server 2008 R2 or in SQL Server 2012 if high CPU usage is =
observed=20
            with contention over the QUERY_EXEC_STATS spinlock =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>List all calls to sp_OACreate</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>sp_OACreate is used to create COM objects within SQL =
Server. In=20
            specific cases, poorly implemented COM objects can =
negatively impact=20
            stability. Also, can lead to a security issue </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Review why these calls are made. Equivalents may exist =
inside SQL=20
            Server or related components such as CRL. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SQL Server 2012 =
Security Best=20
            Practice Whitepaper </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>REPLICATE can truncate data if max specifiers are not=20
            used</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>If string_expression is not of type varchar(max) or=20
            nvarchar(max), REPLICATE truncates the return value at 8,000 =
bytes.=20
            </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>To return values greater than 8,000 bytes, =
string_expression must=20
            be explicitly cast to the appropriate large-value data type. =

        </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; REPLICATE =
(Transact-SQL) |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>sp_OACreate should always be accompanied by a=20
            sp_OADestroy</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Failure to call sp_OADestroy can temporarily 'leak' =
memory=20
            associated with that object, till the batch completes =
execution.=20
          </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Though the engine will cleanup all objects created with=20
            sp_OACreate after the batch is completed, it is still =
recommended to=20
            call sp_OADestroy explicitly as soon as possible. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Leaky code? =E2=80=93 =
Ken Henderson's=20
            WebLog </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; High CPU consumed by =
Resource=20
            Monitor due to low virtual memory =E2=80=93 CSS SQL Server =
Engineers=20
        </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Temp table with explicit constraint name</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Concurrent execution of batches which create explicitly =
named=20
            constraints on temp tables will fail with the error 'There =
is=20
            already an object named constraint_name in the database'. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Avoid explicitly naming constraints on temp tables. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Temporary tables with =
named=20
            constraints | Microsoft Connect </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>VARCHAR / NVARCHAR declared without size =
specification</B>=20
        </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>When you use data types of variable length such as =
VARCHAR,=20
            NVARCHAR, it is always recommended to explicitly specify the =
size.=20
            Failure to do so means that SQL will select the size for =
you, either=20
            1 (when declaring parameters) or 30 (when converting) =
characters.=20
            </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Explicitly specify the size in all conditions. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Deprecate (n)varchar =
with out=20
            length specifcation | Microsoft Connect </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Make size of VARCHAR =
(no length)=20
            consistent | Microsoft Connect </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Aaron Bertrand&nbsp;: =
Bad habits to=20
            kick&nbsp;: declaring VARCHAR without (length) </P>
            <P>DISCLAIMER: Third-party link(s) are provided on an =
'as-is' basis.=20
            Microsoft does not offer any guarantees or warranties =
regarding the=20
            content on the third-party site(s). </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>XACT_STATE() cannot be used reliably in some cases</B> =
</TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>If a developer wants to find out whether a transaction is =
doomed,=20
            they can use the XACT_STATE() function, which would return =
-1 in=20
            this case. However, XACT_STATE() returns 0 if there is no =
active=20
            user-defined transaction. This means that if the transaction =
is a=20
            system transaction, you cannot tell whether the transaction =
is=20
            committable or not. There are at least two contexts where a =
SQL=20
            module can execute in the context of a system-defined =
transaction:=20
            triggers and code run from INSERT-EXEC. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Do not use XACT_STATE in triggers and INSERT-EXEC. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; xact_state() cannot be =
used=20
            reliably to determine whether a transaction is doomed | =
Microsoft=20
            Connect </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>XML sp_xml_preparedocument leak</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Failure to call sp_xml_removedocument can lead to memory=20
            starvation, performance issues and, eventually, failure of =
the SQL=20
            Server. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Add calls to sp_xml_removedocument as appropriate. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; sp_xml_removedocument=20
            (Transact-SQL) | Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; sp_xml_preparedocument =

            (Transact-SQL) | Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR></TBODY></TABLE></TD>
    <TD></TD></TR></TBODY></TABLE>
<TABLE class=3Dwikitable>
  <TBODY>
  <TR>
    <TD></TD>
    <TD>
      <TABLE class=3Dwikitable>
        <TBODY>
        <TR>
          <TD colSpan=3D2><B>Table Hints</B> </TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Index hint usage detected</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Forcing indexes to be used can cause sub-optimal plan =
selection.=20
            </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>As far as possible let the query optimizer select the =
index.=20
            Keeping statistics up to date can minimize the requirement =
to=20
            override the index selection choice. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Query Hints =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Using the INDEX and =
FORCESEEK Query=20
            Hints in Plan Guides </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>List of instances of table hints (all kinds)</B> =
</TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Table hints override the default behavior of the query =
optimizer=20
            for the duration of the data manipulation language (DML) =
statement=20
            by specifying a locking method, one or more indexes, a=20
            query-processing operation such as a table scan or index =
seek, or=20
            other options. Table hints are specified in the FROM clause =
of the=20
            DML statement and affect only the table or view referenced =
in that=20
            clause. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Because the SQL Server query optimizer typically selects =
the best=20
            execution plan for a query, we recommend that hints be used =
only as=20
            a last resort by experienced developers and database =
administrators.=20
            </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Table Hints =
(Transact-SQL) |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>NOLOCK table hint usage in context of INSERT =
statement</B>=20
        </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>The NOLOCK hint suppresses shared locks from being issued =
and, as=20
            a result, enables dirty reads. Dirty reads are reads from=20
            uncommitted transactions. Microsoft strongly advises against =
using=20
            the NOLOCK hint, especially in statements that perform data=20
            modification, because it can have serious implications for =
data=20
            consistency. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Avoid using these hints in this context in new =
development work,=20
            and plan to modify applications that currently use them. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Table Hints =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Using NOLOCK and =
READPAST table=20
            hints in SQL Server - TechRepublic </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; INSERT (Transact-SQL) =
| Microsoft=20
            Docs </P>
            <P>DISCLAIMER: Third-party link(s) are provided on an =
'as-is' basis.=20
            Microsoft does not offer any guarantees or warranties =
regarding the=20
            content on the third-party site(s). </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>NOLOCK table hint usage in context of SELECT =
statement</B>=20
        </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>The NOLOCK hint suppresses shared locks from being issued =
and, as=20
            a result, enables dirty reads. Dirty reads are reads from=20
            uncommitted transactions. Microsoft strongly advises against =
using=20
            the NOLOCK hint because it can have serious implications for =
data=20
            consistency. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Avoid using these hints in this context in new =
development work,=20
            and plan to modify applications that currently use them. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Table Hints =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Using NOLOCK and =
READPAST table=20
            hints in SQL Server - TechRepublic </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; UPDATE (Transact-SQL) =
| Microsoft=20
            Docs </P>
            <P>DISCLAIMER: Third-party link(s) are provided on an =
'as-is' basis.=20
            Microsoft does not offer any guarantees or warranties =
regarding the=20
            content on the third-party site(s). </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>PAGLOCK table hint usage in context of INSERT / UPDATE =
/=20
            DELETE statement</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Hints override the query optimizer and affect the =
resulting query=20
            optimizer plan. Thus, hints should be used judiciously and =
never by=20
            default in your code. In addition, misusing hints can result =
in=20
            unsatisfactory query performance and reduced database =
concurrency.=20
            In addition to this, using a hint in association with a data =

            modification could consume excessive locking resources. In=20
            particular, the PAGLOCK hint takes page locks either from =
where=20
            individual locks are taken on rows or keys, or from where a =
single=20
            table lock is usually taken. This approach can have serious=20
            implications for performance and concurrency in high-volume, =

            multi-user scenarios. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Determine the cause of the hint usage and test whether =
the hint=20
            is still overriding the original behavior that was intended. =
If=20
            possible, remove the hint from the code. If this is not =
possible,=20
            document the location and background of the hint so you can =
evaluate=20
            the benefits of using it in future service packs and =
versions of SQL=20
            Server. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Table Hints =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; INSERT (Transact-SQL) =
| Microsoft=20
            Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>PAGLOCK table hint usage in context of SELECT =
statement</B>=20
          </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Hints override the query optimizer and affect the =
resulting query=20
            optimizer plan. Thus, hints should be used judiciously and =
never by=20
            default in your code. In addition, misusing hints can result =
in=20
            unsatisfactory query performance and reduced database =
concurrency.=20
            In particular, the PAGLOCK hint takes page locks either =
where=20
            individual locks are taken on rows or keys, or where a =
single table=20
            lock is ordinarily taken. This approach can have serious=20
            implications for performance and concurrency in high-volume=20
            multi-user scenarios, and would appear unnecessary in =
scenarios=20
            where no data modification is performed. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Determine the cause of the hint usage and test whether =
the hint=20
            is still overriding the original behavior that was intended. =
If=20
            possible, remove the hint from the code. If this is not =
possible,=20
            document the location and background of the hint so you can =
evaluate=20
            the benefits of using it in future service packs and =
versions of SQL=20
            Server. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Table Hints =
(Transact-SQL) |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>ROWLOCK table hint usage in context of INSERT / UPDATE =
/=20
            DELETE statement</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Hints override the query optimizer and affect the =
resulting query=20
            optimizer plan. Thus, hints should be used judiciously and =
never by=20
            default in your code. In addition, misusing hints can result =
in=20
            unsatisfactory query performance and reduced database =
concurrency.=20
            In addition to this, using a hint in association with a data =

            modification could consume excessive locking resources. In=20
            particular, the ROWLOCK hint specifies that row-level locks =
be=20
            employed where page-level or table-level locks would =
generally be=20
            taken. Using this hint could result in a higher than =
expected number=20
            of locks being taken by the transaction and, thus, result in =

            performance and concurrency issues. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Determine the cause of the hint usage and test whether =
the hint=20
            is still overriding the original behavior that was intended. =
If=20
            possible, remove the hint from the code. If this is not =
possible,=20
            document the location and background of the hint so you can =
evaluate=20
            the benefits of using it in future service packs and =
versions of SQL=20
            Server. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Table Hints =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; INSERT (Transact-SQL) =
| Microsoft=20
            Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>ROWLOCK table hint usage in context of SELECT =
statement</B>=20
          </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Hints override the query optimizer and affect the =
resulting query=20
            optimizer plan. Thus, hints should be used judiciously and =
never by=20
            default in your code. In addition, misusing hints can result =
in=20
            unsatisfactory query performance and reduced database =
concurrency.=20
            In particular, the ROWLOCK hint specifies that row-level =
locks be=20
            employed where page-level or table-level locks would =
generally be=20
            taken. Using this hint could result in a higher than =
expected number=20
            of locks being taken by the transaction and, thus, result in =

            performance and concurrency issues. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Determine the cause of the hint usage and test whether =
the hint=20
            is still overriding the original behavior that was intended. =
If=20
            possible, remove the hint from the code. If this is not =
possible,=20
            document the location and background of the hint so you can =
evaluate=20
            the benefits of using it in future service packs and =
versions of SQL=20
            Server. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Table Hints =
(Transact-SQL) |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>SERIALIZABLE table hint usage</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>The usage of SERIALIZABLE makes shared locks more =
restrictive by=20
            holding them until a transaction is completed, instead of =
releasing=20
            the shared lock as soon as the required table or data page =
is no=20
            longer needed, whether the transaction has been completed or =
not.=20
            The scan is performed with the same semantics as a =
transaction=20
            running at the SERIALIZABLE isolation level. </P>
            <P><BR>Therefore, usage of this hint (if not carefully =
designed and=20
            implemented) can lead to blocking. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>We recommend that hints be used only as a last resort by=20
            experienced developers and database administrators. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Table Hints =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Inappropriate usage of =
high=20
            isolation level isn=E2=80=99t just about blocking when it =
comes to=20
            performance =E2=80=93 CSS SQL Server Engineers </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Serializable vs. =
Snapshot Isolation=20
            Level =E2=80=93 Craig Freedman's SQL Server Blog </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; SERIALIZABLE isolation =
level=20
            (serialized transactions) and duplicate key insertion =
attempts =E2=80=93 Sql=20
            Stuff </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Range locks | SQL =
Server Database=20
            Engine Blog </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>Table aliased with a reserved word</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>In some cases, this issue is flagged due to using NOLOCK =
without=20
            a WITH clause and braces. This mean that the NOLOCK hint is =
actually=20
            treated as a table alias. </P>
            <P><BR>The issue is also flagged if a table alias is =
actually a=20
            reserved word. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>For the NOLOCK case, review these highlighted instances =
as the=20
            'hint' is actually not effective in these cases. In the more =
generic=20
            case avoid using reserved words for table aliases. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; difference nolock with =
braces and=20
            without braces </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Using Table Aliases =
</P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Reserved Keywords =
(Transact-SQL) |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>TABLOCK table hint usage in context of INSERT / UPDATE =
/=20
            DELETE statement</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Hints override the query optimizer and affect the =
resulting query=20
            optimizer plan. Thus, hints should be used judiciously and =
never by=20
            default in your code. In addition, misusing hints can result =
in=20
            unsatisfactory query performance and reduced database =
concurrency.=20
            In particular, the TABLOCK hint specifies that a table-level =
lock be=20
            taken and held until end-of-statement. If data is being =
read, a=20
            shared lock is taken. If the table is being updated, then an =

            exclusive lock is taken. Using the TABLOCK hint can have a =
negative=20
            effect on concurrency and performance, particularly in =
scenarios=20
            where data is being modified. Thus, using the TABLOCK hint =
should be=20
            considered carefully. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>TABLOCK should be avoided in most highly concurrent =
workloads=20
            unless totally necessary. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Table Hints =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; INSERT (Transact-SQL) =
| Microsoft=20
            Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>TABLOCK table hint usage in context of SELECT =
statement</B>=20
          </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Hints override the query optimizer and affect the =
resulting query=20
            optimizer plan. Thus, hints should be used judiciously and =
never by=20
            default in your code. In addition, misusing hints can result =
in=20
            unsatisfactory query performance and reduced database =
concurrency.=20
            In particular, the TABLOCK hint specifies that a table-level =
lock be=20
            taken and held until end-of-statement. If data is being =
read, a=20
            shared lock is taken. If the table is being updated, then an =

            exclusive lock is taken. Using the TABLOCK hint can have a =
negative=20
            effect on concurrency and performance and, thus, should be=20
            considered carefully. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>TABLOCK should be avoided in most highly concurrent =
workloads=20
            unless totally necessary. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Table Hints =
(Transact-SQL) |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>TABLOCKX table hint usage in context of =
INSERT/UPDATE/DELETE=20
            statement</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Hints override the query optimizer and affect the =
resulting query=20
            optimizer plan. Thus, hints should be used judiciously and =
never by=20
            default in your code. In addition, misusing hints can result =
in=20
            unsatisfactory query performance and reduced database =
concurrency.=20
            In some cases, misusing hints can also result in data =
integrity=20
            issues. In addition to this, using a query hint in =
conjunction with=20
            a database modification operation could reduce query =
concurrency=20
            against the underlying table. In particular, the TABLOCKX =
hint=20
            specifies that an exclusive table-level lock be taken and =
held until=20
            the end of the transaction. Using the TABLOCKX hint can have =
a=20
            significant, negative effect on concurrency and, thus, =
should be=20
            considered carefully. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>TABLOCKX should be avoided in most highly concurrent =
workloads=20
            unless totally necessary. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Table Hints =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; INSERT (Transact-SQL) =
| Microsoft=20
            Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>TABLOCKX table hint usage in context of SELECT =
statement</B>=20
          </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Hints override the query optimizer and affect the =
resulting query=20
            optimizer plan. Thus, hints should be used judiciously and =
never by=20
            default in your code. In addition, misusing hints can result =
in=20
            unsatisfactory query performance and reduced database =
concurrency.=20
            In some cases, misusing hints can also result in data =
integrity=20
            issues. In particular, the TABLOCKX hint specifies that an =
exclusive=20
            table-level lock be taken and held until the end of the =
transaction.=20
            Using the TABLOCKX hint can have a significant, negative =
effect on=20
            concurrency and, thus, should be considered carefully. In =
addition,=20
            based on its purpose, using this hint in scenarios where =
data=20
            modification is not performed will not be helpful. =
</P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>TABLOCKX should be avoided in most highly concurrent =
workloads=20
            unless totally necessary. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Table Hints =
(Transact-SQL) |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>XLOCK table hint usage in context of INSERT / UPDATE / =
DELETE=20
            statement</B> </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Hints override the query optimizer and affect the =
resulting query=20
            optimizer plan. Thus, hints should be used judiciously and =
never by=20
            default in your code. In addition, misusing hints can result =
in=20
            unsatisfactory query performance and reduced database =
concurrency.=20
            In addition to this, using a hint in association with a data =

            modification could consume excessive locking resources. In=20
            particular, the XLOCK hint specifies that exclusive locks =
are to be=20
            taken and held until the transaction completes. This is the =
most=20
            aggressive locking strategy available in SQL Server and also =
implies=20
            that no other transactions will be able to access the locked =
objects=20
            until the transaction completes. This approach will have a =
negative=20
            effect on concurrency for the affected objects and could =
also lead=20
            to performance issues. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Determine the cause of the hint usage and test whether =
the hint=20
            is still overriding the original behavior that was intended. =
If=20
            possible, remove the hint from the code. If this is not =
possible,=20
            document the location and background of the hint so you can =
evaluate=20
            the benefits of using it in future service packs and =
versions of SQL=20
            Server. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Table Hints =
(Transact-SQL) |=20
            Microsoft Docs </P>
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; INSERT (Transact-SQL) =
| Microsoft=20
            Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR>
        <TR>
          <TD></TD>
          <TD><B>XLOCK table hint usage in context of SELECT =
statement</B>=20
        </TD></TR>
        <TR>
          <TD colSpan=3D2><B>Description</B>=20
            <P>Hints override the query optimizer and affect the =
resulting query=20
            optimizer plan. Thus, hints should be used judiciously and =
never by=20
            default in your code. In addition, misusing hints can result =
in=20
            unsatisfactory query performance and reduced database =
concurrency.=20
            In particular, the XLOCK hint specifies that exclusive locks =
are to=20
            be taken and held until the transaction completes. This is =
the most=20
            aggressive locking strategy available in SQL Server and also =
implies=20
            that no other transactions will be able to access the locked =
objects=20
            until the transaction completes. This approach will have a =
negative=20
            effect on concurrency for the affected objects and could =
also lead=20
            to performance issues. In addition, based on its purpose, =
using this=20
            hint in scenarios where data modification is not performed =
will not=20
            be helpful. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>Recommendation</B>=20
            <P>Determine the cause of the hint usage and test whether =
the hint=20
            is still overriding the original behavior that was intended. =
If=20
            possible, remove the hint from the code. If this is not =
possible,=20
            document the location and background of the hint so you can =
evaluate=20
            the benefits of using it in future service packs and =
versions of SQL=20
            Server. </P></TD></TR>
        <TR>
          <TD colSpan=3D2><B>References</B>=20
            <P>=C2=B7 &nbsp; &nbsp; &nbsp; &nbsp; Table Hints =
(Transact-SQL) |=20
            Microsoft Docs </P></TD></TR>
        <TR>
          <TD colSpan=3D2></TD></TR></TBODY></TABLE></TD>
    <TD></TD></TR></TBODY></TABLE><!-- =0A=
NewPP limit report=0A=
Cached time: 20210107133700=0A=
Cache expiry: 86400=0A=
Dynamic content: false=0A=
CPU time usage: 0.260 seconds=0A=
Real time usage: 0.279 seconds=0A=
Preprocessor visited node count: 37/1000000=0A=
Preprocessor generated node count: 146/1000000=0A=
Post=E2=80=90expand include size: 0/2097152 bytes=0A=
Template argument size: 0/2097152 bytes=0A=
Highest expansion depth: 2/40=0A=
Expensive parser function count: 0/100=0A=
Unstrip recursion depth: 0/20=0A=
Unstrip post=E2=80=90expand size: 110/5000000 bytes=0A=
--><!--=0A=
Transclusion expansion time report (%,ms,calls,template)=0A=
100.00%    0.000      1 -total=0A=
--><!-- Saved in parser cache with key =
mediawiki:pcache:idhash:2808-0!canonical and timestamp 20210107133659 =
and revision id 11456=0A=
 --></DIV></DIV>
<DIV class=3Dprintfooter>Retrieved from "<A dir=3Dltr=20
href=3D"http://iehpwiki.iehp.org/index.php?title=3DMicrosoft_T-SQL_Rule_D=
ictionary&amp;oldid=3D11456">http://iehpwiki.iehp.org/index.php?title=3DM=
icrosoft_T-SQL_Rule_Dictionary&amp;oldid=3D11456</A>"=20
</DIV>
<DIV id=3Dcatlinks class=3Dcatlinks data-mw=3D"interface">
<DIV id=3Dmw-normal-catlinks class=3Dmw-normal-catlinks><A =
title=3DSpecial:Categories=20
href=3D"https://iehpwiki.iehp.org/wiki/Special:Categories">Categories</A>=
:=20
<UL>
  <LI><A title=3D"Category:Data Systems"=20
  href=3D"https://iehpwiki.iehp.org/wiki/Category:Data_Systems">Data=20
  Systems</A></LI>
  <LI><A title=3D"Category:Data Systems A-Z Policy (page does not =
exist)"=20
  class=3Dnew=20
  =
href=3D"https://iehpwiki.iehp.org/index.php?title=3DCategory:Data_Systems=
_A-Z_Policy&amp;action=3Dedit&amp;redlink=3D1">Data=20
  Systems A-Z Policy</A></LI></UL></DIV></DIV>
<DIV class=3DvisualClear></DIV></DIV></DIV>
<DIV id=3Dmw-navigation>
<H2>Navigation menu</H2>
<DIV id=3Dmw-head>
<DIV role=3Dnavigation id=3Dp-personal =
aria-labelledby=3Dp-personal-label>
<H3 id=3Dp-personal-label>Personal tools</H3>
<UL>
  <LI id=3Dpt-userpage><A title=3D"Your user page (page does not exist) =
[.]"=20
  class=3Dnew accessKey=3D.=20
  =
href=3D"https://iehpwiki.iehp.org/wiki/User:Fernandez-r@iehp.org">Fernand=
ez-r@iehp.org</A></LI>
  <LI id=3Dpt-notifications-alert><A title=3D"Your alerts"=20
  class=3D"mw-echo-notifications-badge mw-echo-notification-badge-nojs"=20
  href=3D"https://iehpwiki.iehp.org/wiki/Special:Notifications"=20
  data-counter-text=3D"1" data-counter-num=3D"1">Alert (1)</A></LI>
  <LI id=3Dpt-notifications-notice><A title=3D"Your notices"=20
  class=3D"mw-echo-notifications-badge mw-echo-notification-badge-nojs"=20
  href=3D"https://iehpwiki.iehp.org/wiki/Special:Notifications"=20
  data-counter-text=3D"2" data-counter-num=3D"2">Notices (2)</A></LI>
  <LI id=3Dpt-mytalk><A title=3D"Your talk page (page does not exist) =
[n]" class=3Dnew=20
  accessKey=3Dn=20
  =
href=3D"https://iehpwiki.iehp.org/wiki/User_talk:Fernandez-r@iehp.org">Ta=
lk</A></LI>
  <LI id=3Dpt-preferences><A title=3D"Your preferences"=20
  =
href=3D"https://iehpwiki.iehp.org/wiki/Special:Preferences">Preferences</=
A></LI>
  <LI id=3Dpt-watchlist><A=20
  title=3D"A list of pages you are monitoring for changes [l]" =
accessKey=3Dl=20
  =
href=3D"https://iehpwiki.iehp.org/wiki/Special:Watchlist">Watchlist</A></=
LI>
  <LI id=3Dpt-mycontris><A title=3D"A list of your contributions [y]" =
accessKey=3Dy=20
  =
href=3D"https://iehpwiki.iehp.org/wiki/Special:Contributions/Fernandez-r@=
iehp.org">Contributions</A></LI>
  <LI id=3Dpt-logout><A title=3D"Log out"=20
  =
href=3D"https://iehpwiki.iehp.org/index.php?title=3DSpecial:UserLogout&am=
p;returnto=3DMicrosoft+T-SQL+Rule+Dictionary">Log=20
  out</A> </LI></UL></DIV>
<DIV id=3Dleft-navigation>
<DIV role=3Dnavigation id=3Dp-namespaces class=3DvectorTabs=20
aria-labelledby=3Dp-namespaces-label>
<H3 id=3Dp-namespaces-label>Namespaces</H3>
<UL>
  <LI id=3Dca-nstab-main class=3Dselected><SPAN><A title=3D"View the =
content page [c]"=20
  accessKey=3Dc=20
  =
href=3D"https://iehpwiki.iehp.org/wiki/Microsoft_T-SQL_Rule_Dictionary">P=
age</A></SPAN></LI>
  <LI id=3Dca-talk class=3Dnew><SPAN><A=20
  title=3D"Discussion about the content page (page does not exist) [t]"=20
  accessKey=3Dt=20
  =
href=3D"https://iehpwiki.iehp.org/index.php?title=3DTalk:Microsoft_T-SQL_=
Rule_Dictionary&amp;action=3Dedit&amp;redlink=3D1"=20
  rel=3Ddiscussion>Discussion</A></SPAN> </LI></UL></DIV>
<DIV role=3Dnavigation id=3Dp-variants class=3D"vectorMenu emptyPortlet" =

aria-labelledby=3Dp-variants-label><INPUT class=3DvectorMenuCheckbox=20
aria-labelledby=3Dp-variants-label type=3Dcheckbox>=20
<H3 id=3Dp-variants-label><SPAN>Variants</SPAN> </H3>
<DIV class=3Dmenu>
<UL></UL></DIV></DIV></DIV>
<DIV id=3Dright-navigation>
<DIV role=3Dnavigation id=3Dp-views class=3DvectorTabs =
aria-labelledby=3Dp-views-label>
<H3 id=3Dp-views-label>Views</H3>
<UL>
  <LI id=3Dca-view class=3D"collapsible selected"><SPAN><A=20
  =
href=3D"https://iehpwiki.iehp.org/wiki/Microsoft_T-SQL_Rule_Dictionary">R=
ead</A></SPAN></LI>
  <LI id=3Dca-ve-edit class=3Dcollapsible><SPAN><A title=3D"Edit this =
page [v]"=20
  accessKey=3Dv=20
  =
href=3D"https://iehpwiki.iehp.org/index.php?title=3DMicrosoft_T-SQL_Rule_=
Dictionary&amp;veaction=3Dedit">Edit</A></SPAN></LI>
  <LI id=3Dca-edit class=3Dcollapsible><SPAN><A title=3D"Edit this page =
[e]"=20
  accessKey=3De=20
  =
href=3D"https://iehpwiki.iehp.org/index.php?title=3DMicrosoft_T-SQL_Rule_=
Dictionary&amp;action=3Dedit">Edit=20
  source</A></SPAN></LI>
  <LI id=3Dca-history class=3Dcollapsible><SPAN><A=20
  title=3D"Past revisions of this page [h]" accessKey=3Dh=20
  =
href=3D"https://iehpwiki.iehp.org/index.php?title=3DMicrosoft_T-SQL_Rule_=
Dictionary&amp;action=3Dhistory">View=20
  history</A></SPAN></LI>
  <LI id=3Dca-watch class=3D"collapsible icon mw-watchlink"><SPAN><A=20
  title=3D"Add this page to your watchlist [w]" accessKey=3Dw=20
  =
href=3D"https://iehpwiki.iehp.org/index.php?title=3DMicrosoft_T-SQL_Rule_=
Dictionary&amp;action=3Dwatch"=20
  data-mw=3D"interface">Watch</A></SPAN> </LI></UL></DIV>
<DIV role=3Dnavigation id=3Dp-cactions class=3DvectorMenu=20
aria-labelledby=3Dp-cactions-label><INPUT class=3DvectorMenuCheckbox=20
aria-labelledby=3Dp-cactions-label type=3Dcheckbox>=20
<H3 id=3Dp-cactions-label><SPAN>More</SPAN></H3>
<DIV class=3Dmenu>
<UL>
  <LI id=3Dca-delete><A title=3D"Delete this page [d]" accessKey=3Dd=20
  =
href=3D"https://iehpwiki.iehp.org/index.php?title=3DMicrosoft_T-SQL_Rule_=
Dictionary&amp;action=3Ddelete">Delete</A>
  <LI id=3Dca-move><A title=3D"Move this page [m]" accessKey=3Dm=20
  =
href=3D"https://iehpwiki.iehp.org/wiki/Special:MovePage/Microsoft_T-SQL_R=
ule_Dictionary">Move</A>
  <LI id=3Dca-protect><A title=3D"Protect this page [=3D]" =
accessKey=3D=3D=20
  =
href=3D"https://iehpwiki.iehp.org/index.php?title=3DMicrosoft_T-SQL_Rule_=
Dictionary&amp;action=3Dprotect">Protect</A>=20
  </LI></UL></DIV></DIV>
<DIV role=3Dsearch id=3Dp-search>
<H3><LABEL for=3DsearchInput>Search</LABEL> </H3>
<FORM id=3Dsearchform action=3D/index.php>
<DIV id=3DsimpleSearch><INPUT id=3DsearchInput title=3D"Search IEHP Wiki =
[f]"=20
accessKey=3Df name=3Dsearch placeholder=3D"Search IEHP Wiki"><INPUT =
type=3Dhidden=20
value=3DSpecial:Search name=3Dtitle><INPUT id=3Dmw-searchButton =
title=3D"Search the pages for this text" class=3D"searchButton =
mw-fallbackSearchButton" type=3Dsubmit value=3DSearch =
name=3Dfulltext><INPUT id=3DsearchButton title=3D"Go to a page with this =
exact name if it exists" class=3DsearchButton type=3Dsubmit value=3DGo =
name=3Dgo>=20
</DIV></FORM></DIV></DIV></DIV>
<DIV id=3Dmw-panel>
<DIV role=3Dbanner id=3Dp-logo><A title=3D"Visit the main page" =
class=3Dmw-wiki-logo=20
href=3D"https://iehpwiki.iehp.org/wiki/Main_Page"></A></DIV>
<DIV role=3Dnavigation id=3Dp-navigation class=3Dportal=20
aria-labelledby=3Dp-navigation-label>
<H3 id=3Dp-navigation-label>Navigation</H3>
<DIV class=3Dbody>
<UL>
  <LI id=3Dn-Main-page><A =
href=3D"https://iehpwiki.iehp.org/wiki/Main_Page"=20
  rel=3Dnofollow>Main page</A>
  <LI id=3Dn-recentchanges><A title=3D"A list of recent changes in the =
wiki [r]"=20
  accessKey=3Dr =
href=3D"https://iehpwiki.iehp.org/wiki/Special:RecentChanges">Recent=20
  changes</A>
  <LI id=3Dn-All-Pages><A =
href=3D"https://iehpwiki.iehp.org/wiki/Special:AllPages"=20
  rel=3Dnofollow>All Pages</A>
  <LI id=3Dn-help><A title=3D"The place to find out"=20
  =
href=3D"https://www.mediawiki.org/wiki/Special:MyLanguage/Help:Contents">=
Help</A>=20
  </LI></UL></DIV></DIV>
<DIV role=3Dnavigation id=3Dp-Data_Governance class=3Dportal=20
aria-labelledby=3Dp-Data_Governance-label>
<H3 id=3Dp-Data_Governance-label>Data Governance</H3>
<DIV class=3Dbody>
<UL>
  <LI id=3Dn-Committee-.26-Charter><A=20
  href=3D"https://iehpwiki.iehp.org/wiki/Data_Governance" =
rel=3Dnofollow>Committee=20
  &amp; Charter</A>
  <LI id=3Dn-Industry-Terms><A=20
  href=3D"https://iehpwiki.iehp.org/wiki/Category:Industry_Terms"=20
  rel=3Dnofollow>Industry Terms</A>
  <LI id=3Dn-Approved-Definitions><A=20
  href=3D"https://iehpwiki.iehp.org/wiki/Category:DG_Approved"=20
  rel=3Dnofollow>Approved Definitions</A>
  <LI id=3Dn-Ready-for-Approval><A=20
  href=3D"https://iehpwiki.iehp.org/wiki/Category:DG_Ready_for_Approval" =

  rel=3Dnofollow>Ready for Approval</A>
  <LI id=3Dn-Pending-Definitions><A=20
  href=3D"https://iehpwiki.iehp.org/wiki/Category:DG_Pending" =
rel=3Dnofollow>Pending=20
  Definitions</A> </LI></UL></DIV></DIV>
<DIV role=3Dnavigation id=3Dp-Finance class=3Dportal =
aria-labelledby=3Dp-Finance-label>
<H3 id=3Dp-Finance-label>Finance</H3>
<DIV class=3Dbody>
<UL>
  <LI id=3Dn-Financial-Planning-.26-Analysis><A=20
  href=3D"https://iehpwiki.iehp.org/wiki/Category:Finance" =
rel=3Dnofollow>Financial=20
  Planning &amp; Analysis</A> </LI></UL></DIV></DIV>
<DIV role=3Dnavigation id=3Dp-Information_Technology class=3Dportal=20
aria-labelledby=3Dp-Information_Technology-label>
<H3 id=3Dp-Information_Technology-label>Information Technology</H3>
<DIV class=3Dbody>
<UL>
  <LI id=3Dn-Data-Integration><A=20
  href=3D"https://iehpwiki.iehp.org/wiki/Arch_Dev/Data_Integration"=20
  rel=3Dnofollow>Data Integration</A>
  <LI id=3Dn-Data-Science><A=20
  href=3D"https://iehpwiki.iehp.org/wiki/Category:Data_Science" =
rel=3Dnofollow>Data=20
  Science</A>
  <LI id=3Dn-Data-Systems><A=20
  href=3D"https://iehpwiki.iehp.org/wiki/Category:Data_Systems" =
rel=3Dnofollow>Data=20
  Systems</A>
  <LI id=3Dn-Data-Warehouse><A=20
  href=3D"https://iehpwiki.iehp.org/wiki/Category:Data_Warehouse"=20
  rel=3Dnofollow>Data Warehouse</A>
  <LI id=3Dn-Encounter><A =
href=3D"https://iehpwiki.iehp.org/wiki/Encounter"=20
  rel=3Dnofollow>Encounter</A>
  <LI id=3Dn-PMO><A=20
  =
href=3D"https://iehpwiki.iehp.org/wiki/Project_Management_Office_(PMO)"=20
  rel=3Dnofollow>PMO</A> </LI></UL></DIV></DIV>
<DIV role=3Dnavigation id=3Dp-Health_Services class=3Dportal=20
aria-labelledby=3Dp-Health_Services-label>
<H3 id=3Dp-Health_Services-label>Health Services</H3>
<DIV class=3Dbody>
<UL>
  <LI id=3Dn-Care-Mgmt><A =
href=3D"https://iehpwiki.iehp.org/wiki/Care_Management"=20
  rel=3Dnofollow>Care Mgmt</A>
  <LI id=3Dn-Quality-Systems><A=20
  href=3D"https://iehpwiki.iehp.org/wiki/Quality_Systems" =
rel=3Dnofollow>Quality=20
  Systems</A>
  <LI id=3Dn-Utilization-Mgmt><A=20
  href=3D"https://iehpwiki.iehp.org/wiki/Utilization_Management_(UM)"=20
  rel=3Dnofollow>Utilization Mgmt</A>
  <LI id=3Dn-Provider-Services><A=20
  href=3D"https://iehpwiki.iehp.org/wiki/Category:Provider_Services"=20
  rel=3Dnofollow>Provider Services</A>
  <LI id=3Dn-Pharmacy><A =
href=3D"https://iehpwiki.iehp.org/wiki/Pharmacy"=20
  rel=3Dnofollow>Pharmacy</A> </LI></UL></DIV></DIV>
<DIV role=3Dnavigation id=3Dp-Network_Development class=3Dportal=20
aria-labelledby=3Dp-Network_Development-label>
<H3 id=3Dp-Network_Development-label>Network Development</H3>
<DIV class=3Dbody>
<UL>
  <LI id=3Dn-Contracts><A =
href=3D"https://iehpwiki.iehp.org/wiki/Category:Contracts"=20
  rel=3Dnofollow>Contracts</A> </LI></UL></DIV></DIV>
<DIV role=3Dnavigation id=3Dp-Operations class=3Dportal=20
aria-labelledby=3Dp-Operations-label>
<H3 id=3Dp-Operations-label>Operations</H3>
<DIV class=3Dbody>
<UL>
  <LI id=3Dn-Call-Center><A=20
  href=3D"https://iehpwiki.iehp.org/wiki/Category:Call_Center" =
rel=3Dnofollow>Call=20
  Center</A>
  <LI id=3Dn-CORE><A href=3D"https://iehpwiki.iehp.org/wiki/CORE"=20
  rel=3Dnofollow>CORE</A> </LI></UL></DIV></DIV>
<DIV role=3Dnavigation id=3Dp-tb class=3Dportal =
aria-labelledby=3Dp-tb-label>
<H3 id=3Dp-tb-label>Tools</H3>
<DIV class=3Dbody>
<UL>
  <LI id=3Dt-whatlinkshere><A title=3D"A list of all wiki pages that =
link here [j]"=20
  accessKey=3Dj=20
  =
href=3D"https://iehpwiki.iehp.org/wiki/Special:WhatLinksHere/Microsoft_T-=
SQL_Rule_Dictionary">What=20
  links here</A>
  <LI id=3Dt-recentchangeslinked><A=20
  title=3D"Recent changes in pages linked from this page [k]" =
accessKey=3Dk=20
  =
href=3D"https://iehpwiki.iehp.org/wiki/Special:RecentChangesLinked/Micros=
oft_T-SQL_Rule_Dictionary"=20
  rel=3Dnofollow>Related changes</A>
  <LI id=3Dt-upload><A title=3D"Upload files [u]" accessKey=3Du=20
  href=3D"https://iehpwiki.iehp.org/wiki/Special:Upload">Upload file</A>
  <LI id=3Dt-specialpages><A title=3D"A list of all special pages [q]" =
accessKey=3Dq=20
  href=3D"https://iehpwiki.iehp.org/wiki/Special:SpecialPages">Special =
pages</A>
  <LI id=3Dt-print><A title=3D"Printable version of this page [p]" =
accessKey=3Dp=20
  =
href=3D"https://iehpwiki.iehp.org/index.php?title=3DMicrosoft_T-SQL_Rule_=
Dictionary&amp;printable=3Dyes"=20
  rel=3Dalternate>Printable version</A>
  <LI id=3Dt-permalink><A title=3D"Permanent link to this revision of =
the page"=20
  =
href=3D"https://iehpwiki.iehp.org/index.php?title=3DMicrosoft_T-SQL_Rule_=
Dictionary&amp;oldid=3D11456">Permanent=20
  link</A>
  <LI id=3Dt-info><A title=3D"More information about this page"=20
  =
href=3D"https://iehpwiki.iehp.org/index.php?title=3DMicrosoft_T-SQL_Rule_=
Dictionary&amp;action=3Dinfo">Page=20
  information</A>
  <LI id=3Dt-cite><A title=3D"Information on how to cite this page"=20
  =
href=3D"https://iehpwiki.iehp.org/index.php?title=3DSpecial:CiteThisPage&=
amp;page=3DMicrosoft_T-SQL_Rule_Dictionary&amp;id=3D11456">Cite=20
  this page</A> </LI></UL></DIV></DIV></DIV></DIV>
<DIV role=3Dcontentinfo id=3Dfooter>
<UL id=3Dfooter-info>
  <LI id=3Dfooter-info-lastmod>This page was last edited on 10 April =
2019, at=20
  16:21. </LI></UL>
<UL id=3Dfooter-places>
  <LI id=3Dfooter-places-privacy><A title=3D"IEHP MediaWiki:Privacy =
policy"=20
  =
href=3D"https://iehpwiki.iehp.org/wiki/IEHP_MediaWiki:Privacy_policy">Pri=
vacy=20
  policy</A> </LI>
  <LI id=3Dfooter-places-about><A title=3D"IEHP MediaWiki:About"=20
  href=3D"https://iehpwiki.iehp.org/wiki/IEHP_MediaWiki:About">About =
IEHP Wiki</A>=20
  </LI>
  <LI id=3Dfooter-places-disclaimer><A title=3D"IEHP MediaWiki:General =
disclaimer"=20
  =
href=3D"https://iehpwiki.iehp.org/wiki/IEHP_MediaWiki:General_disclaimer"=
>Disclaimers</A>=20
  </LI></UL>
<UL id=3Dfooter-icons class=3Dnoprint>
  <LI id=3Dfooter-poweredbyico><A =
href=3D"https://www.mediawiki.org/"><IMG=20
  alt=3D"Powered by MediaWiki"=20
  =
src=3D"https://iehpwiki.iehp.org/resources/assets/poweredby_mediawiki_88x=
31.png"=20
  width=3D88 height=3D31=20
  srcset=3D"/resources/assets/poweredby_mediawiki_132x47.png 1.5x, =
/resources/assets/poweredby_mediawiki_176x62.png 2x"></A>=20
  </LI></UL>
<DIV style=3D"CLEAR: both"></DIV></DIV>
<SCRIPT>(window.RLQ=3Dwindow.RLQ||[]).push(function(){mw.config.set({"wgP=
ageParseReport":{"limitreport":{"cputime":"0.260","walltime":"0.279","ppv=
isitednodes":{"value":37,"limit":1000000},"ppgeneratednodes":{"value":146=
,"limit":1000000},"postexpandincludesize":{"value":0,"limit":2097152},"te=
mplateargumentsize":{"value":0,"limit":2097152},"expansiondepth":{"value"=
:2,"limit":40},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-=
depth":{"value":0,"limit":20},"unstrip-size":{"value":110,"limit":5000000=
},"timingprofile":["100.00%    0.000      1 =
-total"]},"cachereport":{"timestamp":"20210107133700","ttl":86400,"transi=
entcontent":false}}});mw.config.set({"wgBackendResponseTime":66});});</SC=
RIPT>

<DIV id=3Dturnkey-credit>
<DIV style=3D"CLEAR: both"><A=20
href=3D"https://www.turnkeylinux.org/mediawiki">MediaWiki Appliance</A> =
- Powered=20
by <A href=3D"https://www.turnkeylinux.org/">TurnKey Linux</A>=20
</DIV></DIV></BODY></HTML>

------=_NextPart_000_0120_01D6E507.4B0F8B50
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://iehpwiki.iehp.org/resources/assets/poweredby_mediawiki_88x31.png

iVBORw0KGgoAAAANSUhEUgAAAFgAAAAfCAYAAABjyArgAAANaElEQVR4Ae2YBVAbW7jHc60uUOh1
d3d3d3d34/qtUnd3V+rFXUpTgoUQ4sQ9hIQQJw7U/+/seXd2hqGdW3taMvOf/eSc79v9rZ0Nh/nZ
bLbLiLKJXEQ4LfXJRVkSphSu1Wq9iagjFArh4MGDOHr0aJ9OXZQhw5JhSnQrAzgvHA7T5OHDh09f
faIsI5EIA7mQARw5dOgQ+nTmRdjGORaLBUeOHDnlIgcPJFjb7ahi7QMHus5muJQpw5YFTJ4dpySH
ZQ26OsNo5k+GuiaJxrzW1WizZoEdd6Cbbs8mnTHAIu6rMGsmQ1n/PYLqFMRCFlhlwwh0L7oSfnQF
NrNjEzHX2QfYbDafFmBV/c1wG0bCUJ2EgDIJLuUV0DUMgN0wHw4CPOjRwd8qhkX8OIKWSYgGzSdU
9/EFxfhmWw2mFEnZWDjR9a/zQvHOY8Y7esYR6+yGP5rA2DwhG3MEInh6cSk+2chDptB62oAJWwqY
vvkOHDhwQuru7kS3fxvr6ySXwWtKRaB5OPySIXCJB8AkHIK4bSgcijsI5KWIOy8FEqnoMN5xwn2+
yKjG/v0H8PKKcgjNbny7pQ7fbq9GpsCGjFoTVE4fNvG1sLhDWLFHj0ZzO8blN2FUbiNWVathdAfx
1upK1BrasHhvM0blNSA9S4GOSDcyBDp8S07e55t5eGtNJdhjcQVIvBY5Igt+3i7AwkoyPpYA39iO
1TVqOuYERZlSwCaTiXHIwezvoRe+WUG1cFM1gdqNvAo5rnp4JnbtlmH6rHcRN6bAbciFXvAGvNoh
CEkGIcI/D+31F6Bd0B/B5gEImUcg0Z6KqC8F3pa7kVMuwE23roJQ1gJfIILFGftwzztz8cfsnF79
75qRhx931GF9nQa/7uaDq3YgmujEZ2R/5pUpMblAgheXVWBWmRQT8kXUf3ftXqyv1eChuUWYXipB
2q56lCla8Mj8Ihp/bVUFftheR2uECLgmSzszh+1p8XTgqUUl+HprDWYUy7CMq0KO0IbxeU3gaR10
zAmKMiVsjw/43Ft+wzOfL2H9hRvzMPD2NAY29Wt33wWnJgleyUUICDnoFpyDo3UcRIki1UQSYhsG
Itiago7ARXBp/kKbORuzFj4DnTaXrZv68Dg8+MGCXv3fJFefLxyj9o8761CrdaGL9P5gPRcKmx+P
zivGzBI53e5qMmLRXgW+3FKNrCYz/tzVRE6MGjNKpQSME88uLUGW2ITx+UIs3deMDzfuRaKrC812
H95cVcn21Dj9+IbAZeC/vroCelcAzy4qx0/b+TR/SoCNRiNdVhBwPTTs/tF49cvV1I5HHTDKn8fB
wDVAdzK62u6BRfA0jOXnw111Dpzl/eHO6gfXzhQ4diYhUDQQB8Tno7P5fHRYhiOgHwGvZigQ4aCJ
m4wqfiPb55rnpuD5b1b06j+pUMTaSrsfn2dU4WsCcD1PT2OrqpUUyKLKZhgIiHZvAr9nNuD33Q1Y
ylVCYnNjWZUS8c4uTCuW4I8sPkbnNMIfiWFDnQbfba1l6pF4A9unLRDGO+SK/m57DbbxjTT2HDk5
GfW058mIMmXYHh/wfX/jlS83sH52cRMefeVj6LmPwModgrAgCYcb+mN/XT80LrwQ0hmXQjE9BdJx
wyCddxVMWy9CovoCJOT94ZH0h1MxDGr5eHBGjkXJHg1b9+pnJ+O5r5f/6w4nCChvKPqv49wdkROK
k7uDwO88Zp84EWMHI3H8uL0OAbI9ZcAGg4E6XV1dPTT0vlF4+eM11O70VEAsvBebNj2KgPkhxFtS
0akfisOqC+DZPQK6aUmo/7UfCr8fjsq0oRD93h/imRciWD4A3c3noEPfD07lk3C2ivDON6+gvEbK
9vkHMLX/F4rAjZ3KPMqUsD0+4CH3jcXLXy+ldiTkRn7eWHRYUpFwEnCOG+A3XYq4aDi0C1MhTR+E
Hb8nIWNqCjLSU1CQlgL5qCHoKBiOmPR8tEqS4FBeDo1oCl785GUUcRX/CvjZxaWYViLuEVtbq8Iz
i0tgdgdO+EB52lZMLhJB3uLGzzvrjj9O7UTaLjaPFVwVtgo11O7s7ELaznos5yppLa3Th99283vM
31inwYSCpt6A9Xo9s24jRTp7aCh5RLz81QbWLymvwvj0p+CSfY2g9FoklCNgr0hF7V9JqB2VhLXp
yZg5rh/WTU9G8eiRUE8ZBFdWMg7qzkdA9Q5bhzNoMvL2yFifAv5qea/+g3/LwJXjd8EdDFM/Fk/Q
lcV5P2+E2OJixyntHrT6OnrN17f54PSHkCs2kZNSCos7wEBg875QBBqHj62tdnhxydgdbK27pxXg
haVl//Tw4poJu1Grd2C30IA6sr1zRi5byxOMYJ/ajl1CAxtjmDJsWcCJRKKHKOCv17D+lq0S3Pf6
V4jZX0PCkYyYbhAOS/tDMWU4+H8mY9voi7Hkz4HI/CUFDWn9IZk2Es6c4YjKBsCn64eo4RrYrDJw
hk5A6T4lW/eq/wTcq/9Dcwvw5IJirK9TUZ+ndJLlViGeWFgEiaUdjvYonlpQipunZuGGyVmYUSSl
49yBCF5ZUYbrJmXijum5ZNlVjA/Xc+lJ+TKDR8fsFOgpsJunZJMeJXh0PlPTRexS5EvMCISjJJeD
+2YV0PErqhR0Tc03OMhLlA+B0YmH59McPltbh/VVemTU6fBXFp/dfxawTqc7PuCP1lM7FvWDW/Ij
AroUdLcmwyNORVRAVgq6ZHTyhkKVPhD70oah5LdkcL8biqq0wVAsHQFX6QC0NxHAhkFoUw2BS3Mj
Zi68DRbjarbPlU9OOSbgB+YUYDm3maxdy6j//SY+WfOK8fLyMshtbny8jofvt9QjEotD6/Ti6vRM
8FQO/LxVgBcWV6DFE4Sm1YtbJxbg7TV7UK2148mFxTC0+ZH8x3ZkCkxoD4Swcq8GnB82kprtmFYs
wqisRlSrHfhww16yoqiE1uHDpxursIanRrnCileWl0NoasPzS0uxZp8G908rofswuagJb6za0wMw
w5aj1Wrpl0c8Hu8h8pKjgKnvqQav8EHMnfcAXNJL4BLfiXDzRQirrkS3dSQ6qwejbU0/KAlowajB
0K8Yhu66ZMTlydAXDoeePxjdbcNhNYnAufw35FfWsn2ufGYynv1qWa/+t07NITB8uHdWHmSWdtwz
vQA6hxdPLypBpdKGK9N34qVl5eTK2oP3yNLqqvTd+HFHDe6dnYsmUxtbJ1NooAdeQwC/sqIca3n0
Od6jF7lbaL7J5MILBNyEfCGW71ViSr4Y8ytkeHx+MUwuHwqkJlpLanXh8vE7cPGYHdDaArTGlCIh
3llTydZkmDJsORqN5piAz7n1T7z6/RLW35K5Dve8+gHarVVImO+CveZiRM3XIGy4Ct2KwYB5EOz7
boCr4nJ0VQ1ArGkYIsZL0GFKhZY7Asb6+2GUzwbn+lHILZWydS97cgIe+Whhr/7MbR+NxZC2ox4P
zy4mB1YBCmNeAao1dpLPxOwyCYpkZhTLLORqV4CnbcHtM7NQJreydVaRK/R1MpcAJFd/OXYIdLh7
Vk6PXrdNywFXZUMsFscjcwtpb7HZhXJ5C66dtBsvLimj43JE9GRBZG7D/bMK8epiLibsUhwXMMOW
o1arqROLxXrorrdm495352Hehj2IRKLYkSlD/0vTIeM9iIqCzxBUXoyY5QrETRchpEhBtz0Zzqan
EHXejlBjfzh5QxGxXwGn/EokPCmAfzAKi1fjopvmYm+dFi63H/NJ7SufmYTPxmT06n8JuTp8wTCq
VHZwftyALTV6Gr95aia9oqdlqfDgvDxUqVuwhqfErZPzYHcHsbBYhavG5iBPbMSWOh2Gpe3CqyvL
sU9tw4Nz8+EOhHDd+Bz8vL0eFQorvtzMo/VJHVr/w7VVOC9tA0KRKFo8AZobldVAczsFOvpo4Otb
CeACtLgDuHTCFuTUt2BagYR5fLH7zzAlbClg+mkXjUaPqdY2L2tbjYXwOGRQSzLgUd0Fb/PlUAk+
h1t9DbpdydA3joFXeSOc9YNgEyTBrx+JgO06WJtXIWhNhUszBGZdde/avUU+T2sJjA50hCP4dWc9
Wj0BGv8rkw+t3UNPenq+gFlpENC5KBM62LlzS2S4fQZ5gS0qwvRiERbtkUFhc2F8fgPNKw1BvLG2
FLdMycbvu/hE9ZBY2miuRGbCmKxGxqY9vt9ag1qtnfrMdmaJGBq7G6Nz+TRWKXQjbWsDNtdosaBC
yu4Dw5QCVqlULOATlVo4CV6XGgbhx9T36q9Gh20w/G4bmqvugbx8GFS8gTDxX0O87WK0mUsRCnpg
1+Whw2elc/6fizJl2HKUSiV1IpHIyYjAFMNu4VHb0nQ3bNJh1LbppsIoGQJd0x/wWDNhU2+Gz3op
zZ1FokwZthyFQsECPlWp5J9BKZ3L+kLuC/AH2mHQr6e+WZUJn8dw1gFm2HLkcjn9cyIcDp859Yky
ZdhyZDJZH+D/IsAMW05jY2OEfHnQYCgUOn31ibJk/o8gbOMcHo9X2NLSQomTZ0cfoNMUYUhZMkwZ
tpzS0tJbiTr0ej1dXpBkn05dlCHDkmHKsOUwv+zs7MuI8og8RDgt9clDWRKmDNv/AKBCZq78CfnF
AAAAAElFTkSuQmCC

------=_NextPart_000_0120_01D6E507.4B0F8B50
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: https://iehpwiki.iehp.org/load.php?debug=false&lang=en&modules=ext.echo.badgeicons%7Cext.echo.styles.badge%7Cext.visualEditor.desktopArticleTarget.noscript%7Cmediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.skinning.interface%7Cmediawiki.toc.styles%7Cskins.vector.styles&only=styles&skin=vector

.oo-ui-icon-bell {
	BACKGROUND-IMAGE: =
url(/load.php?modules=3Dext.echo.badgeicons&image=3Dbell&format=3Drasteri=
zed&lang=3Den&skin=3Dvector)
}
.oo-ui-icon-tray {
	BACKGROUND-IMAGE: =
url(/load.php?modules=3Dext.echo.badgeicons&image=3Dtray&format=3Drasteri=
zed&lang=3Den&skin=3Dvector)
}
#pt-notifications-alert .mw-echo-notifications-badge {
	BOX-SIZING: border-box; CURSOR: pointer; TEXT-DECORATION: none; HEIGHT: =
20px; WIDTH: 20px; POSITION: relative; MARGIN: 0px 2px; DISPLAY: block; =
LINE-HEIGHT: normal; TOP: -1005px; -webkit-box-sizing: border-box; =
-moz-box-sizing: border-box
}
#pt-notifications-notice .mw-echo-notifications-badge {
	BOX-SIZING: border-box; CURSOR: pointer; TEXT-DECORATION: none; HEIGHT: =
20px; WIDTH: 20px; POSITION: relative; MARGIN: 0px 2px; DISPLAY: block; =
LINE-HEIGHT: normal; TOP: -1005px; -webkit-box-sizing: border-box; =
-moz-box-sizing: border-box
}
#pt-notifications-alert .mw-echo-notifications-badge:hover {
	OUTLINE-WIDTH: 0px; -moz-outline-style: 0
}
#pt-notifications-notice .mw-echo-notifications-badge:hover {
	OUTLINE-WIDTH: 0px; -moz-outline-style: 0
}
#pt-notifications-alert .mw-echo-notifications-badge:active {
	OUTLINE-WIDTH: 0px; -moz-outline-style: 0
}
#pt-notifications-notice .mw-echo-notifications-badge:active {
	OUTLINE-WIDTH: 0px; -moz-outline-style: 0
}
#pt-notifications-alert .mw-echo-notifications-badge:focus {
	OUTLINE-WIDTH: 0px; -moz-outline-style: 0
}
#pt-notifications-notice .mw-echo-notifications-badge:focus {
	OUTLINE-WIDTH: 0px; -moz-outline-style: 0
}
#pt-notifications-alert .mw-echo-notifications-badge-dimmed {
	opacity: 0.4
}
#pt-notifications-notice .mw-echo-notifications-badge-dimmed {
	opacity: 0.4
}
#pt-notifications-alert .mw-echo-notifications-badge:before {
	CURSOR: pointer; HEIGHT: 100%; WIDTH: 100%; BACKGROUND-REPEAT: =
no-repeat; POSITION: absolute; CONTENT: ''; LEFT: 0px; DISPLAY: =
inline-block; TOP: 1000px; opacity: 0.87
}
#pt-notifications-notice .mw-echo-notifications-badge:before {
	CURSOR: pointer; HEIGHT: 100%; WIDTH: 100%; BACKGROUND-REPEAT: =
no-repeat; POSITION: absolute; CONTENT: ''; LEFT: 0px; DISPLAY: =
inline-block; TOP: 1000px; opacity: 0.87
}
#pt-notifications-alert .mw-echo-notifications-badge:after {
	FONT-SIZE: 0.9em; CURSOR: pointer; BORDER-TOP: #fff 1px solid; =
BORDER-RIGHT: #fff 1px solid; BORDER-BOTTOM: #fff 1px solid; POSITION: =
absolute; FONT-WEIGHT: bold; COLOR: #fff; PADDING-BOTTOM: 0px; =
PADDING-TOP: 0px; CONTENT: attr(data-counter-text); PADDING-LEFT: 0.3em; =
LEFT: 55%; BORDER-LEFT: #fff 1px solid; DISPLAY: inline-block; TOP: =
1009px; PADDING-RIGHT: 0.3em; BACKGROUND-COLOR: #72777d; border-radius: =
2px
}
#pt-notifications-notice .mw-echo-notifications-badge:after {
	FONT-SIZE: 0.9em; CURSOR: pointer; BORDER-TOP: #fff 1px solid; =
BORDER-RIGHT: #fff 1px solid; BORDER-BOTTOM: #fff 1px solid; POSITION: =
absolute; FONT-WEIGHT: bold; COLOR: #fff; PADDING-BOTTOM: 0px; =
PADDING-TOP: 0px; CONTENT: attr(data-counter-text); PADDING-LEFT: 0.3em; =
LEFT: 55%; BORDER-LEFT: #fff 1px solid; DISPLAY: inline-block; TOP: =
1009px; PADDING-RIGHT: 0.3em; BACKGROUND-COLOR: #72777d; border-radius: =
2px
}
#pt-notifications-alert =
.mw-echo-notifications-badge-long-label.mw-echo-notifications-badge {
	MARGIN-RIGHT: 0.5em
}
#pt-notifications-notice =
.mw-echo-notifications-badge-long-label.mw-echo-notifications-badge {
	MARGIN-RIGHT: 0.5em
}
#pt-notifications-alert =
.mw-echo-notifications-badge-long-label.mw-echo-notifications-badge:after=
 {
	LEFT: 35%
}
#pt-notifications-notice =
.mw-echo-notifications-badge-long-label.mw-echo-notifications-badge:after=
 {
	LEFT: 35%
}
#pt-notifications-alert =
.mw-echo-notifications-badge-all-read.mw-echo-notifications-badge:before =
{
	opacity: 0.51
}
#pt-notifications-notice =
.mw-echo-notifications-badge-all-read.mw-echo-notifications-badge:before =
{
	opacity: 0.51
}
#pt-notifications-alert =
.mw-echo-notifications-badge-all-read.mw-echo-notifications-badge:after =
{
	VISIBILITY: hidden
}
#pt-notifications-notice =
.mw-echo-notifications-badge-all-read.mw-echo-notifications-badge:after =
{
	VISIBILITY: hidden
}
#pt-notifications-alert .mw-echo-notifications-badge:before {
	BACKGROUND-IMAGE: url(data:image/svg+xml,%3Csvg =
xmlns=3D%22http://www.w3.org/2000/svg%22 width=3D%2220%22 =
height=3D%2220%22 viewBox=3D%220 0 20 20%22%3E %3Ctitle%3E bell =
%3C/title%3E %3Cpath d=3D%22M16 7a5.38 5.38 0 0 0-4.46-4.85C11.6 1.46 =
11.53 0 10 0S8.4 1.46 8.46 2.15A5.38 5.38 0 0 0 4 7v6l-2 =
2v1h16v-1l-2-2zm-6 13a3 3 0 0 0 3-3H7a3 3 0 0 0 3 3z%22/%3E %3C/svg%3E)
}
#pt-notifications-notice .mw-echo-notifications-badge:before {
	BACKGROUND-IMAGE: url(data:image/svg+xml,%3Csvg =
xmlns=3D%22http://www.w3.org/2000/svg%22 width=3D%2220%22 =
height=3D%2220%22 viewBox=3D%220 0 20 20%22%3E %3Ctitle%3E tray =
%3C/title%3E %3Cpath d=3D%22M17 1H3a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 =
2 0 0 0 2-2V3a2 2 0 0 0-2-2zm0 12h-4l-1 2H8l-1-2H3V3h14z%22/%3E =
%3C/svg%3E)
}
#pt-notifications-alert =
.oo-ui-flaggedElement-unseen.mw-echo-notifications-badge:after {
	BACKGROUND-COLOR: #dd3333
}
#pt-notifications-alert =
.mw-echo-unseen-notifications.mw-echo-notifications-badge:after {
	BACKGROUND-COLOR: #dd3333
}
#pt-notifications-notice =
.oo-ui-flaggedElement-unseen.mw-echo-notifications-badge:after {
	BACKGROUND-COLOR: #3366cc
}
#pt-notifications-notice =
.mw-echo-unseen-notifications.mw-echo-notifications-badge:after {
	BACKGROUND-COLOR: #3366cc
}
#p-personal #pt-notifications-alert {
	MARGIN-RIGHT: 0.4em
}
#p-personal #pt-notifications-notice {
	MARGIN-RIGHT: 0.4em
}
.client-nojs #ca-ve-edit {
	DISPLAY: none
}
.client-nojs .mw-editsection-divider {
	DISPLAY: none
}
.client-nojs .mw-editsection-visualeditor {
	DISPLAY: none
}
.ve-not-available #ca-ve-edit {
	DISPLAY: none
}
.ve-not-available .mw-editsection-divider {
	DISPLAY: none
}
.ve-not-available .mw-editsection-visualeditor {
	DISPLAY: none
}
UNKNOWN {
	COLOR: #54595d; MARGIN-RIGHT: 0.25em
}
UNKNOWN {
	COLOR: #54595d; MARGIN-LEFT: 0.25em
}

@media Print   =20
{
.noprint {
	DISPLAY: none
}
.catlinks {
	DISPLAY: none
}
.magnify {
	DISPLAY: none
}
.mw-cite-backlink {
	DISPLAY: none
}
.mw-editsection {
	DISPLAY: none
}
.mw-editsection-like {
	DISPLAY: none
}
.mw-hidden-catlinks {
	DISPLAY: none
}
.mw-indicators {
	DISPLAY: none
}
.mw-redirectedfrom {
	DISPLAY: none
}
.patrollink {
	DISPLAY: none
}
.usermessage {
	DISPLAY: none
}
#column-one {
	DISPLAY: none
}
#footer-places {
	DISPLAY: none
}
#mw-navigation {
	DISPLAY: none
}
#siteNotice {
	DISPLAY: none
}
#f-poweredbyico {
	DISPLAY: none
}
#f-copyrightico {
	DISPLAY: none
}
LI#about {
	DISPLAY: none
}
LI#disclaimer {
	DISPLAY: none
}
LI#mobileview {
	DISPLAY: none
}
LI#privacy {
	DISPLAY: none
}
BODY {
	BACKGROUND: #fff; COLOR: #000; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; =
PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px
}
A {
	BACKGROUND: none transparent scroll repeat 0% 0%; PADDING-BOTTOM: 0px =
!important; PADDING-TOP: 0px !important; PADDING-LEFT: 0px !important; =
PADDING-RIGHT: 0px !important
}
A {
	TEXT-DECORATION: none !important; COLOR:  !important
}
A.external {
	TEXT-DECORATION: none !important; COLOR:  !important
}
A.new {
	TEXT-DECORATION: none !important; COLOR:  !important
}
A.stub {
	TEXT-DECORATION: none !important; COLOR:  !important
}
.mw-parser-output A.text.external:after {
	WORD-WRAP: break-word; WORD-BREAK: break-all; CONTENT: ' (' attr(href) =
')'
}
.mw-parser-output A.autonumber.external:after {
	WORD-WRAP: break-word; WORD-BREAK: break-all; CONTENT: ' (' attr(href) =
')'
}
.mw-parser-output A[href^=3D'//'].text.external:after {
	CONTENT: ' (https:' attr(href) ')'
}
.mw-parser-output A[href^=3D'//'].autonumber.external:after {
	CONTENT: ' (https:' attr(href) ')'
}
DT {
	FONT-WEIGHT: bold
}
H1 {
	PAGE-BREAK-AFTER: avoid; PAGE-BREAK-BEFORE: avoid; FONT-WEIGHT: bold
}
H2 {
	PAGE-BREAK-AFTER: avoid; PAGE-BREAK-BEFORE: avoid; FONT-WEIGHT: bold
}
H3 {
	PAGE-BREAK-AFTER: avoid; PAGE-BREAK-BEFORE: avoid; FONT-WEIGHT: bold
}
H4 {
	PAGE-BREAK-AFTER: avoid; PAGE-BREAK-BEFORE: avoid; FONT-WEIGHT: bold
}
H5 {
	PAGE-BREAK-AFTER: avoid; PAGE-BREAK-BEFORE: avoid; FONT-WEIGHT: bold
}
H6 {
	PAGE-BREAK-AFTER: avoid; PAGE-BREAK-BEFORE: avoid; FONT-WEIGHT: bold
}
P {
	ORPHANS: 3; WIDOWS: 3; MARGIN: 1em 0px; LINE-HEIGHT: 1.2
}
IMG {
	PAGE-BREAK-INSIDE: avoid
}
figure {
	PAGE-BREAK-INSIDE: avoid
}
.wikitable {
	PAGE-BREAK-INSIDE: avoid
}
.thumb {
	PAGE-BREAK-INSIDE: avoid
}
IMG {
	BORDER-LEFT-WIDTH: 0px; BORDER-RIGHT-WIDTH: 0px; VERTICAL-ALIGN: =
middle; BORDER-BOTTOM-WIDTH: 0px; BORDER-TOP-WIDTH: 0px
}
PRE {
	FONT-SIZE: 8pt; WORD-WRAP: break-word; BORDER-TOP: #000 1pt dashed; =
BORDER-RIGHT: #000 1pt dashed; BACKGROUND: #fff; WHITE-SPACE: pre-wrap; =
BORDER-BOTTOM: #000 1pt dashed; COLOR: #000; PADDING-BOTTOM: 1em; =
PADDING-TOP: 1em; PADDING-LEFT: 0px; BORDER-LEFT: #000 1pt dashed; =
PADDING-RIGHT: 0px
}
.mw-code {
	FONT-SIZE: 8pt; WORD-WRAP: break-word; BORDER-TOP: #000 1pt dashed; =
BORDER-RIGHT: #000 1pt dashed; BACKGROUND: #fff; WHITE-SPACE: pre-wrap; =
BORDER-BOTTOM: #000 1pt dashed; COLOR: #000; PADDING-BOTTOM: 1em; =
PADDING-TOP: 1em; PADDING-LEFT: 0px; BORDER-LEFT: #000 1pt dashed; =
PADDING-RIGHT: 0px
}
SUP {
	LINE-HEIGHT: 1
}
SUB {
	LINE-HEIGHT: 1
}
UL {
	LIST-STYLE-TYPE: square
}
#globalWrapper {
	WIDTH: 100% !important; MIN-WIDTH: 0px !important
}
.mw-body {
	BORDER-LEFT-WIDTH: 0px !important; BORDER-RIGHT-WIDTH: 0px !important; =
BACKGROUND: #fff; BORDER-BOTTOM-WIDTH: 0px !important; COLOR: #000; =
PADDING-BOTTOM: 0px !important; DIRECTION: ltr; PADDING-TOP: 0px =
!important; PADDING-LEFT: 0px !important; MARGIN: 0px; PADDING-RIGHT: =
0px !important; BORDER-TOP-WIDTH: 0px !important
}
#column-content {
	MARGIN: 0px
}
#column-content .mw-body {
	PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; MARGIN: 0px; =
PADDING-RIGHT: 1em
}
.toc {
	BORDER-TOP: #aaa 1pt solid; BORDER-RIGHT: #aaa 1pt solid; =
BORDER-BOTTOM: #aaa 1pt solid; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; =
PADDING-LEFT: 5px; BORDER-LEFT: #aaa 1pt solid; DISPLAY: table; =
PADDING-RIGHT: 5px; BACKGROUND-COLOR: #f9f9f9
}
.tocnumber {
	DISPLAY: table-cell
}
.toctext {
	DISPLAY: table-cell
}
.tocnumber {
	PADDING-LEFT: 0px; PADDING-RIGHT: 0.5em
}
.mw-content-ltr .tocnumber {
	PADDING-LEFT: 0px; PADDING-RIGHT: 0.5em
}
.mw-content-rtl .tocnumber {
	PADDING-LEFT: 0.5em; PADDING-RIGHT: 0px
}
TABLE.floatright {
	POSITION: relative; FLOAT: right; CLEAR: right
}
DIV.floatright {
	POSITION: relative; FLOAT: right; CLEAR: right
}
DIV.tright {
	POSITION: relative; FLOAT: right; CLEAR: right
}
TABLE.floatleft {
	POSITION: relative; FLOAT: left; CLEAR: left
}
DIV.floatleft {
	POSITION: relative; FLOAT: left; CLEAR: left
}
DIV.tleft {
	POSITION: relative; FLOAT: left; CLEAR: left
}
DIV.tleft {
	MARGIN: 0.5em 1.4em 1.3em 0px
}
DIV.tright {
	MARGIN: 0.5em 0px 1.3em 1.4em
}
TABLE.floatright {
	BORDER-LEFT-WIDTH: 0px; BORDER-RIGHT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: =
0px; MARGIN: 0px 0px 0.5em 0.5em; BORDER-TOP-WIDTH: 0px
}
DIV.floatright {
	BORDER-LEFT-WIDTH: 0px; BORDER-RIGHT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: =
0px; MARGIN: 0px 0px 0.5em 0.5em; BORDER-TOP-WIDTH: 0px
}
TABLE.floatleft {
	BORDER-LEFT-WIDTH: 0px; BORDER-RIGHT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: =
0px; MARGIN: 0px 0.5em 0.5em 0px; BORDER-TOP-WIDTH: 0px
}
DIV.floatleft {
	BORDER-LEFT-WIDTH: 0px; BORDER-RIGHT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: =
0px; MARGIN: 0px 0.5em 0.5em 0px; BORDER-TOP-WIDTH: 0px
}
.center {
	TEXT-ALIGN: center
}
DIV.thumb {
	WIDTH: auto; BACKGROUND-COLOR: transparent
}
DIV.thumb A {
	BORDER-BOTTOM-WIDTH: 0px
}
DIV.thumbinner {
	BORDER-LEFT-WIDTH: 0px; FONT-SIZE: 10pt; OVERFLOW: hidden; =
BORDER-RIGHT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; MIN-WIDTH: 100px; =
COLOR: #666; PADDING-BOTTOM: 5px; TEXT-ALIGN: center; PADDING-TOP: 5px; =
PADDING-LEFT: 5px; PADDING-RIGHT: 5px; BORDER-TOP-WIDTH: 0px; =
BACKGROUND-COLOR: #fff; border-radius: 2px
}
HTML .thumbcaption {
	PADDING-BOTTOM: 3px; TEXT-ALIGN: left; PADDING-TOP: 3px; PADDING-LEFT: =
3px; LINE-HEIGHT: 1.4; PADDING-RIGHT: 3px
}
IMG.thumbborder {
	BORDER-TOP: #ddd 1pt solid; BORDER-RIGHT: #ddd 1pt solid; =
BORDER-BOTTOM: #ddd 1pt solid; BORDER-LEFT: #ddd 1pt solid
}
TABLE.wikitable {
	FONT-SIZE: 10pt; BORDER-TOP: #aaa 1pt solid; BORDER-RIGHT: #aaa 1pt =
solid; BACKGROUND: #fff; BORDER-COLLAPSE: collapse; BORDER-BOTTOM: #aaa =
1pt solid; BORDER-LEFT: #aaa 1pt solid; MARGIN: 1em 0px
}
.mw_metadata {
	FONT-SIZE: 10pt; BORDER-TOP: #aaa 1pt solid; BORDER-RIGHT: #aaa 1pt =
solid; BACKGROUND: #fff; BORDER-COLLAPSE: collapse; BORDER-BOTTOM: #aaa =
1pt solid; BORDER-LEFT: #aaa 1pt solid; MARGIN: 1em 0px
}
TABLE.wikitable > CAPTION {
	FONT-SIZE: 10pt; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: =
5px; PADDING-RIGHT: 5px
}
.mw_metadata CAPTION {
	FONT-SIZE: 10pt; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: =
5px; PADDING-RIGHT: 5px
}
TABLE.wikitable > TR > TH {
	BORDER-TOP: #aaa 1pt solid; BORDER-RIGHT: #aaa 1pt solid; BACKGROUND: =
#fff; BORDER-BOTTOM: #aaa 1pt solid; COLOR: #000 !important; =
PADDING-BOTTOM: 0.4em; PADDING-TOP: 0.4em; PADDING-LEFT: 0.6em; =
BORDER-LEFT: #aaa 1pt solid; PADDING-RIGHT: 0.6em
}
TABLE.wikitable > TR > TD {
	BORDER-TOP: #aaa 1pt solid; BORDER-RIGHT: #aaa 1pt solid; BACKGROUND: =
#fff; BORDER-BOTTOM: #aaa 1pt solid; COLOR: #000 !important; =
PADDING-BOTTOM: 0.4em; PADDING-TOP: 0.4em; PADDING-LEFT: 0.6em; =
BORDER-LEFT: #aaa 1pt solid; PADDING-RIGHT: 0.6em
}
TABLE.wikitable > * > TR > TH {
	BORDER-TOP: #aaa 1pt solid; BORDER-RIGHT: #aaa 1pt solid; BACKGROUND: =
#fff; BORDER-BOTTOM: #aaa 1pt solid; COLOR: #000 !important; =
PADDING-BOTTOM: 0.4em; PADDING-TOP: 0.4em; PADDING-LEFT: 0.6em; =
BORDER-LEFT: #aaa 1pt solid; PADDING-RIGHT: 0.6em
}
TABLE.wikitable > * > TR > TD {
	BORDER-TOP: #aaa 1pt solid; BORDER-RIGHT: #aaa 1pt solid; BACKGROUND: =
#fff; BORDER-BOTTOM: #aaa 1pt solid; COLOR: #000 !important; =
PADDING-BOTTOM: 0.4em; PADDING-TOP: 0.4em; PADDING-LEFT: 0.6em; =
BORDER-LEFT: #aaa 1pt solid; PADDING-RIGHT: 0.6em
}
.mw_metadata TH {
	BORDER-TOP: #aaa 1pt solid; BORDER-RIGHT: #aaa 1pt solid; BACKGROUND: =
#fff; BORDER-BOTTOM: #aaa 1pt solid; COLOR: #000 !important; =
PADDING-BOTTOM: 0.4em; PADDING-TOP: 0.4em; PADDING-LEFT: 0.6em; =
BORDER-LEFT: #aaa 1pt solid; PADDING-RIGHT: 0.6em
}
.mw_metadata TD {
	BORDER-TOP: #aaa 1pt solid; BORDER-RIGHT: #aaa 1pt solid; BACKGROUND: =
#fff; BORDER-BOTTOM: #aaa 1pt solid; COLOR: #000 !important; =
PADDING-BOTTOM: 0.4em; PADDING-TOP: 0.4em; PADDING-LEFT: 0.6em; =
BORDER-LEFT: #aaa 1pt solid; PADDING-RIGHT: 0.6em
}
TABLE.wikitable > TR > TH {
	TEXT-ALIGN: center
}
TABLE.wikitable > * > TR > TH {
	TEXT-ALIGN: center
}
.mw_metadata TH {
	TEXT-ALIGN: center
}
TABLE.listing {
	BORDER-TOP: #000 1pt solid; BORDER-RIGHT: #000 1pt solid; =
BORDER-COLLAPSE: collapse; BORDER-BOTTOM: #000 1pt solid; BORDER-LEFT: =
#000 1pt solid
}
TABLE.listing TD {
	BORDER-TOP: #000 1pt solid; BORDER-RIGHT: #000 1pt solid; =
BORDER-COLLAPSE: collapse; BORDER-BOTTOM: #000 1pt solid; BORDER-LEFT: =
#000 1pt solid
}
.catlinks UL {
	LIST-STYLE-TYPE: none; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; =
PADDING-LEFT: 0px; LIST-STYLE-IMAGE: none; DISPLAY: inline; =
PADDING-RIGHT: 0px
}
.catlinks LI {
	PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0.4em; =
BORDER-LEFT: #aaa 1pt solid; MARGIN: 0.1em 0px; DISPLAY: inline-block; =
LINE-HEIGHT: 1.15; PADDING-RIGHT: 0.4em
}
.catlinks LI:first-child {
	BORDER-LEFT-WIDTH: 0px; PADDING-LEFT: 0.2em
}
.printfooter {
	PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 0px; =
PADDING-RIGHT: 0px
}
#footer {
	BORDER-TOP: #aaa 1pt solid; BACKGROUND: #fff; MARGIN-TOP: 1em; COLOR: =
#000; DIRECTION: ltr; PADDING-TOP: 5px
}

}

@media Screen   =20
{
.mw-content-ltr {
	DIRECTION: ltr
}
.mw-content-rtl {
	DIRECTION: rtl
}
.sitedir-ltr TEXTAREA {
	DIRECTION: ltr
}
.sitedir-ltr INPUT {
	DIRECTION: ltr
}
.sitedir-rtl TEXTAREA {
	DIRECTION: rtl
}
.sitedir-rtl INPUT {
	DIRECTION: rtl
}
.mw-userlink {
	unicode-bidi: embed
}
mark {
	COLOR: #000; BACKGROUND-COLOR: #ff0
}
WBR {
	DISPLAY: inline-block
}
INPUT[type=3D'submit'] {
	DIRECTION: ltr
}
INPUT[type=3D'button'] {
	DIRECTION: ltr
}
INPUT[type=3D'reset'] {
	DIRECTION: ltr
}
INPUT[type=3D'file'] {
	DIRECTION: ltr
}
TEXTAREA[dir=3D'ltr'] {
	DIRECTION: ltr
}
INPUT[dir=3D'ltr'] {
	DIRECTION: ltr
}
TEXTAREA[dir=3D'rtl'] {
	DIRECTION: rtl
}
INPUT[dir=3D'rtl'] {
	DIRECTION: rtl
}
ABBR[title] {
	CURSOR: help; BORDER-BOTTOM: 1px dotted
}
[title].explain {
	CURSOR: help; BORDER-BOTTOM: 1px dotted
}
SPAN.comment {
	FONT-STYLE: italic
}
#editform {
	CLEAR: both
}
#toolbar {
	CLEAR: both
}
#wpTextbox1 {
	CLEAR: both
}
#toolbar {
	HEIGHT: 22px
}
.mw-underline-always A {
	TEXT-DECORATION: underline
}
.mw-underline-never A {
	TEXT-DECORATION: none
}
LI SPAN.deleted {
	TEXT-DECORATION: line-through; COLOR: #72777d; FONT-STYLE: italic
}
SPAN.history-deleted {
	TEXT-DECORATION: line-through; COLOR: #72777d; FONT-STYLE: italic
}
.not-patrolled {
	BACKGROUND-COLOR: #ffa
}
.unpatrolled {
	FONT-WEIGHT: bold; COLOR: #d33
}
DIV.patrollink {
	FONT-SIZE: 75%; TEXT-ALIGN: right
}
TD.mw-label {
	VERTICAL-ALIGN: middle; TEXT-ALIGN: right
}
TD.mw-input {
	TEXT-ALIGN: left
}
TD.mw-submit {
	WHITE-SPACE: nowrap; TEXT-ALIGN: left
}
.mw-input-with-label {
	WHITE-SPACE: nowrap; DISPLAY: inline-block
}
.mw-content-ltr .thumbcaption {
	TEXT-ALIGN: left
}
.mw-content-ltr .magnify {
	FLOAT: right
}
.mw-content-rtl .thumbcaption {
	TEXT-ALIGN: right
}
.mw-content-rtl .magnify {
	FLOAT: left
}
#catlinks {
	TEXT-ALIGN: left
}
.catlinks UL {
	LIST-STYLE-TYPE: none; VERTICAL-ALIGN: middle; PADDING-BOTTOM: 0px; =
PADDING-TOP: 0px; PADDING-LEFT: 0px; LIST-STYLE-IMAGE: none; MARGIN: =
0px; DISPLAY: inline; PADDING-RIGHT: 0px
}
.catlinks LI {
	ZOOM: 1; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0.5em; =
BORDER-LEFT: #a2a9b1 1px solid; MARGIN: 0.12em 0px; DISPLAY: inline; =
LINE-HEIGHT: 1.25em; PADDING-RIGHT: 0.5em
}
.catlinks LI:first-child {
	BORDER-LEFT-WIDTH: 0px; PADDING-LEFT: 0.25em
}
.catlinks LI A.mw-redirect {
	FONT-STYLE: italic
}
.mw-hidden-cats-hidden {
	DISPLAY: none
}
.catlinks-allhidden {
	DISPLAY: none
}
P.mw-protect-editreasons {
	FONT-SIZE: 90%; TEXT-ALIGN: right
}
P.mw-filedelete-editreasons {
	FONT-SIZE: 90%; TEXT-ALIGN: right
}
P.mw-delete-editreasons {
	FONT-SIZE: 90%; TEXT-ALIGN: right
}
.autocomment {
	COLOR: #72777d
}
.newpage {
	FONT-WEIGHT: bold
}
.minoredit {
	FONT-WEIGHT: bold
}
.botedit {
	FONT-WEIGHT: bold
}
DIV.mw-warning-with-logexcerpt {
	MARGIN-BOTTOM: 3px; BORDER-TOP: #2a4b8d 2px solid; BORDER-RIGHT: =
#2a4b8d 2px solid; BORDER-BOTTOM: #2a4b8d 2px solid; PADDING-BOTTOM: =
3px; PADDING-TOP: 3px; PADDING-LEFT: 3px; CLEAR: both; BORDER-LEFT: =
#2a4b8d 2px solid; PADDING-RIGHT: 3px
}
DIV.mw-warning-with-logexcerpt UL LI {
	FONT-SIZE: 90%
}
SPAN.mw-revdelundel-link {
	FONT-SIZE: 90%
}
STRONG.mw-revdelundel-link {
	FONT-SIZE: 90%
}
SPAN.mw-revdelundel-hidden {
	VISIBILITY: hidden
}
INPUT.mw-revdelundel-hidden {
	VISIBILITY: hidden
}
TD.mw-revdel-checkbox {
	TEXT-ALIGN: center; PADDING-RIGHT: 10px
}
TH.mw-revdel-checkbox {
	TEXT-ALIGN: center; PADDING-RIGHT: 10px
}
A.new {
	COLOR: #ba0000
}
.plainlinks A.external {
	BACKGROUND: none transparent scroll repeat 0% 0%; PADDING-BOTTOM: 0px =
!important; PADDING-TOP: 0px !important; PADDING-LEFT: 0px !important; =
PADDING-RIGHT: 0px !important
}
.rtl A.free.external {
	unicode-bidi: embed; DIRECTION: ltr
}
.rtl A.autonumber.external {
	unicode-bidi: embed; DIRECTION: ltr
}
TABLE.wikitable {
	BORDER-TOP: #a2a9b1 1px solid; BORDER-RIGHT: #a2a9b1 1px solid; =
BORDER-COLLAPSE: collapse; BORDER-BOTTOM: #a2a9b1 1px solid; COLOR: =
#222; BORDER-LEFT: #a2a9b1 1px solid; MARGIN: 1em 0px; BACKGROUND-COLOR: =
#f8f9fa
}
TABLE.wikitable > TR > TH {
	BORDER-TOP: #a2a9b1 1px solid; BORDER-RIGHT: #a2a9b1 1px solid; =
BORDER-BOTTOM: #a2a9b1 1px solid; PADDING-BOTTOM: 0.2em; PADDING-TOP: =
0.2em; PADDING-LEFT: 0.4em; BORDER-LEFT: #a2a9b1 1px solid; =
PADDING-RIGHT: 0.4em
}
TABLE.wikitable > TR > TD {
	BORDER-TOP: #a2a9b1 1px solid; BORDER-RIGHT: #a2a9b1 1px solid; =
BORDER-BOTTOM: #a2a9b1 1px solid; PADDING-BOTTOM: 0.2em; PADDING-TOP: =
0.2em; PADDING-LEFT: 0.4em; BORDER-LEFT: #a2a9b1 1px solid; =
PADDING-RIGHT: 0.4em
}
TABLE.wikitable > * > TR > TH {
	BORDER-TOP: #a2a9b1 1px solid; BORDER-RIGHT: #a2a9b1 1px solid; =
BORDER-BOTTOM: #a2a9b1 1px solid; PADDING-BOTTOM: 0.2em; PADDING-TOP: =
0.2em; PADDING-LEFT: 0.4em; BORDER-LEFT: #a2a9b1 1px solid; =
PADDING-RIGHT: 0.4em
}
TABLE.wikitable > * > TR > TD {
	BORDER-TOP: #a2a9b1 1px solid; BORDER-RIGHT: #a2a9b1 1px solid; =
BORDER-BOTTOM: #a2a9b1 1px solid; PADDING-BOTTOM: 0.2em; PADDING-TOP: =
0.2em; PADDING-LEFT: 0.4em; BORDER-LEFT: #a2a9b1 1px solid; =
PADDING-RIGHT: 0.4em
}
TABLE.wikitable > TR > TH {
	TEXT-ALIGN: center; BACKGROUND-COLOR: #eaecf0
}
TABLE.wikitable > * > TR > TH {
	TEXT-ALIGN: center; BACKGROUND-COLOR: #eaecf0
}
TABLE.wikitable > CAPTION {
	FONT-WEIGHT: bold
}
.error {
	FONT-SIZE: larger
}
.warning {
	FONT-SIZE: larger
}
.success {
	FONT-SIZE: larger
}
.error {
	COLOR: #d33
}
.warning {
	COLOR: #705000
}
.success {
	COLOR: #009000
}
.errorbox {
	MARGIN-BOTTOM: 1em; BORDER-TOP: 1px solid; BORDER-RIGHT: 1px solid; =
BORDER-BOTTOM: 1px solid; ZOOM: 1; PADDING-BOTTOM: 0.5em; PADDING-TOP: =
0.5em; PADDING-LEFT: 1em; BORDER-LEFT: 1px solid; DISPLAY: inline; =
PADDING-RIGHT: 1em
}
.warningbox {
	MARGIN-BOTTOM: 1em; BORDER-TOP: 1px solid; BORDER-RIGHT: 1px solid; =
BORDER-BOTTOM: 1px solid; ZOOM: 1; PADDING-BOTTOM: 0.5em; PADDING-TOP: =
0.5em; PADDING-LEFT: 1em; BORDER-LEFT: 1px solid; DISPLAY: inline; =
PADDING-RIGHT: 1em
}
.successbox {
	MARGIN-BOTTOM: 1em; BORDER-TOP: 1px solid; BORDER-RIGHT: 1px solid; =
BORDER-BOTTOM: 1px solid; ZOOM: 1; PADDING-BOTTOM: 0.5em; PADDING-TOP: =
0.5em; PADDING-LEFT: 1em; BORDER-LEFT: 1px solid; DISPLAY: inline; =
PADDING-RIGHT: 1em
}
.errorbox H2 {
	BORDER-LEFT-WIDTH: 0px; FONT-SIZE: 1em; BORDER-RIGHT-WIDTH: 0px; =
BORDER-BOTTOM-WIDTH: 0px; FONT-WEIGHT: bold; COLOR: ; MARGIN: 0px 0.5em =
0px 0px; DISPLAY: inline; BORDER-TOP-WIDTH: 0px
}
.warningbox H2 {
	BORDER-LEFT-WIDTH: 0px; FONT-SIZE: 1em; BORDER-RIGHT-WIDTH: 0px; =
BORDER-BOTTOM-WIDTH: 0px; FONT-WEIGHT: bold; COLOR: ; MARGIN: 0px 0.5em =
0px 0px; DISPLAY: inline; BORDER-TOP-WIDTH: 0px
}
.successbox H2 {
	BORDER-LEFT-WIDTH: 0px; FONT-SIZE: 1em; BORDER-RIGHT-WIDTH: 0px; =
BORDER-BOTTOM-WIDTH: 0px; FONT-WEIGHT: bold; COLOR: ; MARGIN: 0px 0.5em =
0px 0px; DISPLAY: inline; BORDER-TOP-WIDTH: 0px
}
.errorbox {
	BORDER-TOP-COLOR: #fac5c5; BORDER-LEFT-COLOR: #fac5c5; COLOR: #d33; =
BORDER-BOTTOM-COLOR: #fac5c5; BORDER-RIGHT-COLOR: #fac5c5; =
BACKGROUND-COLOR: #fae3e3
}
.warningbox {
	BORDER-TOP-COLOR: #fde29b; BORDER-LEFT-COLOR: #fde29b; COLOR: #705000; =
BORDER-BOTTOM-COLOR: #fde29b; BORDER-RIGHT-COLOR: #fde29b; =
BACKGROUND-COLOR: #fdf1d1
}
.successbox {
	BORDER-TOP-COLOR: #b7fdb5; BORDER-LEFT-COLOR: #b7fdb5; COLOR: #008000; =
BORDER-BOTTOM-COLOR: #b7fdb5; BORDER-RIGHT-COLOR: #b7fdb5; =
BACKGROUND-COLOR: #e1fddf
}
.mw-infobox {
	OVERFLOW: hidden; BORDER-TOP: #ff7f00 2px solid; BORDER-RIGHT: #ff7f00 =
2px solid; BORDER-BOTTOM: #ff7f00 2px solid; CLEAR: left; BORDER-LEFT: =
#ff7f00 2px solid; MARGIN: 0.5em
}
.mw-infobox-left {
	WIDTH: 35px; FLOAT: left; MARGIN: 7px
}
.mw-infobox-right {
	MARGIN: 0.5em 0.5em 0.5em 49px
}
.previewnote {
	MARGIN-BOTTOM: 1em; COLOR: #d33
}
.previewnote P {
	MARGIN: 0.8em 0px; TEXT-INDENT: 3em
}
.visualClear {
	CLEAR: both
}
.mw-datatable {
	BORDER-COLLAPSE: collapse
}
.mw-datatable {
	BORDER-TOP: #a2a9b1 1px solid; BORDER-RIGHT: #a2a9b1 1px solid; =
BORDER-BOTTOM: #a2a9b1 1px solid; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; =
PADDING-LEFT: 0.15em; BORDER-LEFT: #a2a9b1 1px solid; PADDING-RIGHT: =
0.15em
}
.mw-datatable TD {
	BORDER-TOP: #a2a9b1 1px solid; BORDER-RIGHT: #a2a9b1 1px solid; =
BORDER-BOTTOM: #a2a9b1 1px solid; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; =
PADDING-LEFT: 0.15em; BORDER-LEFT: #a2a9b1 1px solid; PADDING-RIGHT: =
0.15em
}
.mw-datatable TH {
	BORDER-TOP: #a2a9b1 1px solid; BORDER-RIGHT: #a2a9b1 1px solid; =
BORDER-BOTTOM: #a2a9b1 1px solid; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; =
PADDING-LEFT: 0.15em; BORDER-LEFT: #a2a9b1 1px solid; PADDING-RIGHT: =
0.15em
}
.mw-datatable TH {
	BACKGROUND-COLOR: #ddf
}
.mw-datatable TD {
	BACKGROUND-COLOR: #fff
}
.mw-datatable TR:hover TD {
	BACKGROUND-COLOR: #eaf3ff
}
.mw-content-ltr UL {
	PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.3em =
0px 0px 1.6em; PADDING-RIGHT: 0px
}
.mw-content-rtl .mw-content-ltr UL {
	PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.3em =
0px 0px 1.6em; PADDING-RIGHT: 0px
}
.mw-content-rtl UL {
	PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.3em =
1.6em 0px 0px; PADDING-RIGHT: 0px
}
.mw-content-ltr .mw-content-rtl UL {
	PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.3em =
1.6em 0px 0px; PADDING-RIGHT: 0px
}
.mw-content-ltr OL {
	PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.3em =
0px 0px 3.2em; PADDING-RIGHT: 0px
}
.mw-content-rtl .mw-content-ltr OL {
	PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.3em =
0px 0px 3.2em; PADDING-RIGHT: 0px
}
.mw-content-rtl OL {
	PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.3em =
3.2em 0px 0px; PADDING-RIGHT: 0px
}
.mw-content-ltr .mw-content-rtl OL {
	PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.3em =
3.2em 0px 0px; PADDING-RIGHT: 0px
}
.mw-content-ltr DD {
	MARGIN-LEFT: 1.6em; MARGIN-RIGHT: 0px
}
.mw-content-rtl .mw-content-ltr DD {
	MARGIN-LEFT: 1.6em; MARGIN-RIGHT: 0px
}
.mw-content-rtl DD {
	MARGIN-LEFT: 0px; MARGIN-RIGHT: 1.6em
}
.mw-content-ltr .mw-content-rtl DD {
	MARGIN-LEFT: 0px; MARGIN-RIGHT: 1.6em
}
.mw-ajax-loader {
	BACKGROUND-IMAGE: =
url(/resources/src/mediawiki.legacy/images/ajax-loader.gif?57f34); =
BACKGROUND-REPEAT: no-repeat; POSITION: relative; BACKGROUND-POSITION: =
center center; PADDING-BOTTOM: 16px; PADDING-TOP: 16px; PADDING-LEFT: =
16px; TOP: -16px; PADDING-RIGHT: 16px
}
.mw-small-spinner {
	BACKGROUND-IMAGE: =
url(/resources/src/mediawiki.legacy/images/spinner.gif?ca65b); =
BACKGROUND-REPEAT: no-repeat; BACKGROUND-POSITION: center center; =
PADDING-BOTTOM: 10px !important; PADDING-TOP: 10px !important; =
PADDING-LEFT: 10px !important; PADDING-RIGHT: 10px !important; =
MARGIN-RIGHT: 0.6em
}
UNKNOWN {
	LINE-HEIGHT: 1.6em !important
}
UNKNOWN {
	LINE-HEIGHT: 1.2em
}
UNKNOWN {
=09
}
UNKNOWN {
=09
}
UNKNOWN {
=09
}
UNKNOWN {
=09
}
UNKNOWN {
=09
}
.toc UL {
	MARGIN: 0.3em 0px
}
.mw-content-ltr .toc UL {
	TEXT-ALIGN: left
}
.mw-content-rtl .mw-content-ltr .toc UL {
	TEXT-ALIGN: left
}
.mw-content-rtl .toc UL {
	TEXT-ALIGN: right
}
.mw-content-ltr .mw-content-rtl .toc UL {
	TEXT-ALIGN: right
}
.mw-content-ltr .toc UL UL {
	MARGIN: 0px 0px 0px 2em
}
.mw-content-rtl .mw-content-ltr .toc UL UL {
	MARGIN: 0px 0px 0px 2em
}
.mw-content-rtl .toc UL UL {
	MARGIN: 0px 2em 0px 0px
}
.mw-content-ltr .mw-content-rtl .toc UL UL {
	MARGIN: 0px 2em 0px 0px
}
.toc .toctitle {
	DIRECTION: ltr
}
#mw-clearyourcache {
	unicode-bidi: embed; DIRECTION: ltr
}
#mw-sitecsspreview {
	unicode-bidi: embed; DIRECTION: ltr
}
#mw-sitejspreview {
	unicode-bidi: embed; DIRECTION: ltr
}
#mw-usercsspreview {
	unicode-bidi: embed; DIRECTION: ltr
}
#mw-userjspreview {
	unicode-bidi: embed; DIRECTION: ltr
}
#mw-revision-info {
	DIRECTION: ltr
}
#mw-revision-info-current {
	DIRECTION: ltr
}
#mw-revision-nav {
	DIRECTION: ltr
}
DIV.tright {
	FLOAT: right; CLEAR: right
}
DIV.floatright {
	FLOAT: right; CLEAR: right
}
TABLE.floatright {
	FLOAT: right; CLEAR: right
}
DIV.tleft {
	FLOAT: left; CLEAR: left
}
DIV.floatleft {
	FLOAT: left; CLEAR: left
}
TABLE.floatleft {
	FLOAT: left; CLEAR: left
}
DIV.floatright {
	POSITION: relative
}
TABLE.floatright {
	POSITION: relative
}
DIV.floatleft {
	POSITION: relative
}
TABLE.floatleft {
	POSITION: relative
}
#mw-credits A {
	unicode-bidi: embed
}
.printfooter {
	DISPLAY: none
}
.xdebug-error {
	POSITION: absolute; Z-INDEX: 99
}
.mw-editsection {
	-moz-user-select: none; -webkit-user-select: none; -ms-user-select: =
none; user-select: none
}
.mw-editsection {
	FONT-SIZE: small; VERTICAL-ALIGN: baseline; FONT-WEIGHT: normal; =
MARGIN-LEFT: 1em; LINE-HEIGHT: 1em
}
.mw-editsection-like {
	FONT-SIZE: small; VERTICAL-ALIGN: baseline; FONT-WEIGHT: normal; =
MARGIN-LEFT: 1em; LINE-HEIGHT: 1em
}
.mw-content-ltr .mw-editsection {
	MARGIN-LEFT: 1em
}
.mw-content-rtl .mw-content-ltr .mw-editsection {
	MARGIN-LEFT: 1em
}
.mw-content-rtl .mw-editsection {
	MARGIN-RIGHT: 1em
}
.mw-content-ltr .mw-content-rtl .mw-editsection {
	MARGIN-RIGHT: 1em
}
SUP {
	LINE-HEIGHT: 1
}
SUB {
	LINE-HEIGHT: 1
}
A {
	TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% =
0%; COLOR: #0645ad
}
UNKNOWN {
	CURSOR: pointer
}
A:visited {
	COLOR: #0b0080
}
A:active {
	COLOR: #faa700
}
A:hover {
	TEXT-DECORATION: underline
}
A:focus {
	TEXT-DECORATION: underline
}
UNKNOWN {
	TEXT-DECORATION: none
}
A.stub {
	COLOR: #723
}
A.new {
	COLOR: #ba0000
}
#p-personal A.new {
	COLOR: #ba0000
}
A.mw-selflink {
	FONT-WEIGHT: bold; COLOR:=20
}
A.mw-selflink:hover {
	CURSOR: inherit
}
A.mw-selflink:active {
	COLOR:=20
}
A.mw-selflink:visited {
	COLOR:=20
}
A.new:visited {
	COLOR: #a55858
}
#p-personal A.new:visited {
	COLOR: #a55858
}
.mw-parser-output A.extiw {
	COLOR: #36b
}
.mw-parser-output A.extiw:active {
	COLOR: #36b
}
.mw-parser-output A.extiw:visited {
	COLOR: #636
}
.mw-parser-output A.extiw:active {
	COLOR: #b63
}
.mw-parser-output A.external {
	COLOR: #36b
}
.mw-parser-output A.external:visited {
	COLOR: #636
}
.mw-parser-output A.external:active {
	COLOR: #b63
}
.mw-parser-output A.free.external {
	WORD-WRAP: break-word
}
IMG {
	BORDER-LEFT-WIDTH: 0px; BORDER-RIGHT-WIDTH: 0px; VERTICAL-ALIGN: =
middle; BORDER-BOTTOM-WIDTH: 0px; BORDER-TOP-WIDTH: 0px
}
HR {
	BORDER-LEFT-WIDTH: 0px; HEIGHT: 1px; BORDER-RIGHT-WIDTH: 0px; =
BORDER-BOTTOM-WIDTH: 0px; COLOR: #a2a9b1; MARGIN: 0.2em 0px; =
BORDER-TOP-WIDTH: 0px; BACKGROUND-COLOR: #a2a9b1
}
H1 {
	OVERFLOW: hidden; BACKGROUND: none transparent scroll repeat 0% 0%; =
BORDER-BOTTOM: #a2a9b1 1px solid; FONT-WEIGHT: normal; COLOR: #000; =
PADDING-BOTTOM: 0.17em; PADDING-TOP: 0.5em; MARGIN: 0px
}
H2 {
	OVERFLOW: hidden; BACKGROUND: none transparent scroll repeat 0% 0%; =
BORDER-BOTTOM: #a2a9b1 1px solid; FONT-WEIGHT: normal; COLOR: #000; =
PADDING-BOTTOM: 0.17em; PADDING-TOP: 0.5em; MARGIN: 0px
}
H3 {
	OVERFLOW: hidden; BACKGROUND: none transparent scroll repeat 0% 0%; =
BORDER-BOTTOM: #a2a9b1 1px solid; FONT-WEIGHT: normal; COLOR: #000; =
PADDING-BOTTOM: 0.17em; PADDING-TOP: 0.5em; MARGIN: 0px
}
H4 {
	OVERFLOW: hidden; BACKGROUND: none transparent scroll repeat 0% 0%; =
BORDER-BOTTOM: #a2a9b1 1px solid; FONT-WEIGHT: normal; COLOR: #000; =
PADDING-BOTTOM: 0.17em; PADDING-TOP: 0.5em; MARGIN: 0px
}
H5 {
	OVERFLOW: hidden; BACKGROUND: none transparent scroll repeat 0% 0%; =
BORDER-BOTTOM: #a2a9b1 1px solid; FONT-WEIGHT: normal; COLOR: #000; =
PADDING-BOTTOM: 0.17em; PADDING-TOP: 0.5em; MARGIN: 0px
}
H6 {
	OVERFLOW: hidden; BACKGROUND: none transparent scroll repeat 0% 0%; =
BORDER-BOTTOM: #a2a9b1 1px solid; FONT-WEIGHT: normal; COLOR: #000; =
PADDING-BOTTOM: 0.17em; PADDING-TOP: 0.5em; MARGIN: 0px
}
H1 {
	FONT-SIZE: 188%
}
H2 {
	FONT-SIZE: 150%
}
H3 {
	BORDER-BOTTOM-WIDTH: 0px; FONT-WEIGHT: bold
}
H4 {
	BORDER-BOTTOM-WIDTH: 0px; FONT-WEIGHT: bold
}
H5 {
	BORDER-BOTTOM-WIDTH: 0px; FONT-WEIGHT: bold
}
H6 {
	BORDER-BOTTOM-WIDTH: 0px; FONT-WEIGHT: bold
}
H3 {
	FONT-SIZE: 128%
}
H4 {
	FONT-SIZE: 116%
}
H5 {
	FONT-SIZE: 108%
}
H6 {
	FONT-SIZE: 100%
}
H1 {
	MARGIN-BOTTOM: 0.6em
}
H2 {
	MARGIN-BOTTOM: 0.6em
}
H3 {
	MARGIN-BOTTOM: 0.3em
}
H4 {
	MARGIN-BOTTOM: 0.3em
}
H5 {
	MARGIN-BOTTOM: 0.3em
}
P {
	MARGIN: 0.4em 0px 0.5em
}
P IMG {
	MARGIN: 0px
}
UL {
	LIST-STYLE-TYPE: square; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; =
PADDING-LEFT: 0px; MARGIN: 0.3em 0px 0px 1.6em; PADDING-RIGHT: 0px
}
OL {
	PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; =
LIST-STYLE-IMAGE: none; MARGIN: 0.3em 0px 0px 3.2em; PADDING-RIGHT: 0px
}
LI {
	MARGIN-BOTTOM: 0.1em
}
DT {
	MARGIN-BOTTOM: 0.1em; FONT-WEIGHT: bold
}
DL {
	MARGIN-BOTTOM: 0.5em; MARGIN-TOP: 0.2em
}
DD {
	MARGIN-BOTTOM: 0.1em; MARGIN-LEFT: 1.6em
}
PRE {
	FONT-FAMILY: monospace,monospace
}
CODE {
	FONT-FAMILY: monospace,monospace
}
TT {
	FONT-FAMILY: monospace,monospace
}
KBD {
	FONT-FAMILY: monospace,monospace
}
SAMP {
	FONT-FAMILY: monospace,monospace
}
.mw-code {
	FONT-FAMILY: monospace,monospace
}
CODE {
	BORDER-TOP: #eaecf0 1px solid; BORDER-RIGHT: #eaecf0 1px solid; =
BORDER-BOTTOM: #eaecf0 1px solid; COLOR: #000; PADDING-BOTTOM: 1px; =
PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: #eaecf0 1px solid; =
PADDING-RIGHT: 4px; BACKGROUND-COLOR: #f8f9fa; border-radius: 2px
}
PRE {
	BORDER-TOP: #eaecf0 1px solid; BORDER-RIGHT: #eaecf0 1px solid; =
WHITE-SPACE: pre-wrap; BORDER-BOTTOM: #eaecf0 1px solid; COLOR: #000; =
PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: =
#eaecf0 1px solid; PADDING-RIGHT: 1em; BACKGROUND-COLOR: #f8f9fa
}
.mw-code {
	BORDER-TOP: #eaecf0 1px solid; BORDER-RIGHT: #eaecf0 1px solid; =
WHITE-SPACE: pre-wrap; BORDER-BOTTOM: #eaecf0 1px solid; COLOR: #000; =
PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: =
#eaecf0 1px solid; PADDING-RIGHT: 1em; BACKGROUND-COLOR: #f8f9fa
}
TABLE {
	FONT-SIZE: 100%
}
FIELDSET {
	BORDER-TOP: #2a4b8d 1px solid; BORDER-RIGHT: #2a4b8d 1px solid; =
BORDER-BOTTOM: #2a4b8d 1px solid; PADDING-BOTTOM: 1em; PADDING-TOP: 0px; =
PADDING-LEFT: 1em; BORDER-LEFT: #2a4b8d 1px solid; MARGIN: 1em 0px; =
PADDING-RIGHT: 1em
}
FIELDSET.nested {
	PADDING-BOTTOM: 0.5em; PADDING-TOP: 0px; PADDING-LEFT: 0.5em; MARGIN: =
0px 0px 0.5em; PADDING-RIGHT: 0.5em
}
LEGEND {
	FONT-SIZE: 95%; PADDING-BOTTOM: 0.5em; PADDING-TOP: 0.5em; =
PADDING-LEFT: 0.5em; PADDING-RIGHT: 0.5em
}
FORM {
	BORDER-LEFT-WIDTH: 0px; BORDER-RIGHT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: =
0px; MARGIN: 0px; BORDER-TOP-WIDTH: 0px
}
TEXTAREA {
	BOX-SIZING: border-box; WIDTH: 100%; PADDING-BOTTOM: 0.1em; =
PADDING-TOP: 0.1em; PADDING-LEFT: 0.1em; DISPLAY: block; PADDING-RIGHT: =
0.1em; -webkit-box-sizing: border-box; -moz-box-sizing: border-box
}
.center {
	WIDTH: 100%; TEXT-ALIGN: center
}
*.center * {
	MARGIN-LEFT: auto; MARGIN-RIGHT: auto
}
.small {
	FONT-SIZE: 94%
}
TABLE.small {
	FONT-SIZE: 100%
}
.toc {
	FONT-SIZE: 95%; BORDER-TOP: #a2a9b1 1px solid; BORDER-RIGHT: #a2a9b1 =
1px solid; BORDER-BOTTOM: #a2a9b1 1px solid; PADDING-BOTTOM: 5px; =
PADDING-TOP: 5px; PADDING-LEFT: 5px; BORDER-LEFT: #a2a9b1 1px solid; =
PADDING-RIGHT: 5px; BACKGROUND-COLOR: #f8f9fa
}
.mw-warning {
	FONT-SIZE: 95%; BORDER-TOP: #a2a9b1 1px solid; BORDER-RIGHT: #a2a9b1 =
1px solid; BORDER-BOTTOM: #a2a9b1 1px solid; PADDING-BOTTOM: 5px; =
PADDING-TOP: 5px; PADDING-LEFT: 5px; BORDER-LEFT: #a2a9b1 1px solid; =
PADDING-RIGHT: 5px; BACKGROUND-COLOR: #f8f9fa
}
.toccolours {
	FONT-SIZE: 95%; BORDER-TOP: #a2a9b1 1px solid; BORDER-RIGHT: #a2a9b1 =
1px solid; BORDER-BOTTOM: #a2a9b1 1px solid; PADDING-BOTTOM: 5px; =
PADDING-TOP: 5px; PADDING-LEFT: 5px; BORDER-LEFT: #a2a9b1 1px solid; =
PADDING-RIGHT: 5px; BACKGROUND-COLOR: #f8f9fa
}
.toc {
	ZOOM: 1; PADDING-BOTTOM: 7px; PADDING-TOP: 7px; PADDING-LEFT: 7px; =
DISPLAY: inline; PADDING-RIGHT: 7px
}
TABLE.toc {
	BORDER-COLLAPSE: collapse
}
TABLE.toc TD {
	PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; =
PADDING-RIGHT: 0px
}
.toc H2 {
	BORDER-LEFT-WIDTH: 0px; FONT-SIZE: 100%; BORDER-RIGHT-WIDTH: 0px; =
BORDER-BOTTOM-WIDTH: 0px; FONT-WEIGHT: bold; PADDING-BOTTOM: 0px; =
PADDING-TOP: 0px; PADDING-LEFT: 0px; DISPLAY: inline; PADDING-RIGHT: =
0px; BORDER-TOP-WIDTH: 0px
}
.toc .toctitle {
	TEXT-ALIGN: center
}
.toc UL {
	LIST-STYLE-TYPE: none; PADDING-BOTTOM: 0px; TEXT-ALIGN: left; =
PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; LIST-STYLE-IMAGE: =
none; PADDING-RIGHT: 0px
}
.toc UL UL {
	MARGIN: 0px 0px 0px 2em
}
.tocnumber {
	DISPLAY: table-cell
}
.toctext {
	DISPLAY: table-cell
}
.tocnumber {
	COLOR: #222; PADDING-LEFT: 0px; PADDING-RIGHT: 0.5em
}
.mw-content-ltr .tocnumber {
	PADDING-LEFT: 0px; PADDING-RIGHT: 0.5em
}
.mw-content-rtl .tocnumber {
	PADDING-LEFT: 0.5em; PADDING-RIGHT: 0px
}
.mw-warning {
	TEXT-ALIGN: center; MARGIN-LEFT: 50px; MARGIN-RIGHT: 50px
}
DIV.floatright {
	MARGIN: 0px 0px 0.5em 0.5em
}
TABLE.floatright {
	MARGIN: 0px 0px 0.5em 0.5em
}
DIV.floatleft {
	MARGIN: 0px 0.5em 0.5em 0px
}
TABLE.floatleft {
	MARGIN: 0px 0.5em 0.5em 0px
}
DIV.thumb {
	MARGIN-BOTTOM: 0.5em; WIDTH: auto; BACKGROUND-COLOR: transparent
}
DIV.thumbinner {
	FONT-SIZE: 94%; OVERFLOW: hidden; BORDER-TOP: #c8ccd1 1px solid; =
BORDER-RIGHT: #c8ccd1 1px solid; BORDER-BOTTOM: #c8ccd1 1px solid; =
PADDING-BOTTOM: 3px; TEXT-ALIGN: center; PADDING-TOP: 3px; PADDING-LEFT: =
3px; BORDER-LEFT: #c8ccd1 1px solid; PADDING-RIGHT: 3px; =
BACKGROUND-COLOR: #f8f9fa
}
HTML .thumbimage {
	BORDER-TOP: #c8ccd1 1px solid; BORDER-RIGHT: #c8ccd1 1px solid; =
BORDER-BOTTOM: #c8ccd1 1px solid; BORDER-LEFT: #c8ccd1 1px solid; =
BACKGROUND-COLOR: #fff
}
HTML .thumbcaption {
	BORDER-LEFT-WIDTH: 0px; FONT-SIZE: 94%; BORDER-RIGHT-WIDTH: 0px; =
BORDER-BOTTOM-WIDTH: 0px; PADDING-BOTTOM: 3px; TEXT-ALIGN: left; =
PADDING-TOP: 3px; PADDING-LEFT: 3px; LINE-HEIGHT: 1.4em; PADDING-RIGHT: =
3px; BORDER-TOP-WIDTH: 0px
}
DIV.magnify {
	FLOAT: right; MARGIN-LEFT: 3px
}
DIV.magnify A {
	OVERFLOW: hidden; HEIGHT: 11px; WIDTH: 15px; BACKGROUND-IMAGE: =
url(/resources/src/mediawiki.skinning/images/magnify-clip-ltr.png?4f704);=
 WHITE-SPACE: nowrap; DISPLAY: block; TEXT-INDENT: 15px; =
-moz-user-select: none; -webkit-user-select: none; -ms-user-select: =
none; user-select: none
}
IMG.thumbborder {
	BORDER-TOP: #eaecf0 1px solid; BORDER-RIGHT: #eaecf0 1px solid; =
BORDER-BOTTOM: #eaecf0 1px solid; BORDER-LEFT: #eaecf0 1px solid
}
.mw-content-ltr .thumbcaption {
	TEXT-ALIGN: left
}
.mw-content-ltr .magnify {
	FLOAT: right; MARGIN-LEFT: 3px; MARGIN-RIGHT: 0px
}
.mw-content-ltr DIV.magnify A {
	BACKGROUND-IMAGE: =
url(/resources/src/mediawiki.skinning/images/magnify-clip-ltr.png?4f704)
}
.mw-content-rtl .thumbcaption {
	TEXT-ALIGN: right
}
.mw-content-rtl .magnify {
	FLOAT: left; MARGIN-LEFT: 0px; MARGIN-RIGHT: 3px
}
.mw-content-rtl DIV.magnify A {
	BACKGROUND-IMAGE: =
url(/resources/src/mediawiki.skinning/images/magnify-clip-rtl.png?a9fb3)
}
DIV.tright {
	MARGIN: 0.5em 0px 1.3em 1.4em
}
DIV.tleft {
	MARGIN: 0.5em 1.4em 1.3em 0px
}
BODY.mw-hide-empty-elt .mw-empty-elt {
	DISPLAY: none
}
.catlinks {
	BORDER-TOP: #a2a9b1 1px solid; BORDER-RIGHT: #a2a9b1 1px solid; =
MARGIN-TOP: 1em; BORDER-BOTTOM: #a2a9b1 1px solid; PADDING-BOTTOM: 5px; =
PADDING-TOP: 5px; PADDING-LEFT: 5px; CLEAR: both; BORDER-LEFT: #a2a9b1 =
1px solid; PADDING-RIGHT: 5px; BACKGROUND-COLOR: #f8f9fa
}
TEXTAREA {
	BORDER-TOP: #c8ccd1 1px solid; BORDER-RIGHT: #c8ccd1 1px solid; =
BORDER-BOTTOM: #c8ccd1 1px solid; BORDER-LEFT: #c8ccd1 1px solid
}
.editOptions {
	MARGIN-BOTTOM: 2em; BORDER-TOP: #c8ccd1 0px solid; BORDER-RIGHT: =
#c8ccd1 1px solid; BORDER-BOTTOM: #c8ccd1 1px solid; COLOR: #222; =
PADDING-BOTTOM: 1.5em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: =
#c8ccd1 1px solid; PADDING-RIGHT: 1em; BACKGROUND-COLOR: #eaecf0
}
.usermessage {
	BORDER-TOP: #ffa500 1px solid; BORDER-RIGHT: #ffa500 1px solid; =
VERTICAL-ALIGN: middle; BORDER-BOTTOM: #ffa500 1px solid; FONT-WEIGHT: =
bold; COLOR: #000; PADDING-BOTTOM: 0.5em; PADDING-TOP: 0.5em; =
PADDING-LEFT: 1em; BORDER-LEFT: #ffa500 1px solid; MARGIN: 2em 0px 1em; =
PADDING-RIGHT: 1em; BACKGROUND-COLOR: #ffce7b
}
#siteNotice {
	POSITION: relative; TEXT-ALIGN: center; MARGIN: 0px
}
#localNotice {
	MARGIN-BOTTOM: 0.9em
}
.firstHeading {
	MARGIN-BOTTOM: 0.1em; PADDING-BOTTOM: 0px; LINE-HEIGHT: 1.2em
}
#siteSub {
	DISPLAY: none
}
#contentSub {
	FONT-SIZE: 84%; WIDTH: auto; COLOR: #54595d; MARGIN: 0px 0px 1.4em 1em; =
LINE-HEIGHT: 1.2em
}
#contentSub2 {
	FONT-SIZE: 84%; WIDTH: auto; COLOR: #54595d; MARGIN: 0px 0px 1.4em 1em; =
LINE-HEIGHT: 1.2em
}
SPAN.subpages {
	DISPLAY: block
}
    }
.mw-wiki-logo {
	BACKGROUND-IMAGE: url(/resources/assets/IEHPWikiIcon.png?b8c09)
}
.toctogglecheckbox:unknown ~ UL {
	DISPLAY: none
}

@media Screen   =20
{
UNKNOWN {
	POSITION: absolute; DISPLAY: inline !important; opacity: 0
}
.toctogglespan {
	FONT-SIZE: 94%
}
UNKNOWN {
=09
}
UNKNOWN {
=09
}
.toctogglelabel {
	CURSOR: pointer; COLOR: #0645ad
}
.toctogglelabel:hover {
	TEXT-DECORATION: underline
}
.toctogglecheckbox:focus + .toctitle .toctogglelabel {
	TEXT-DECORATION: underline; OUTLINE-WIDTH: 1px; OUTLINE-STYLE: dotted
}
.toctogglecheckbox:unknown + .toctitle .toctogglelabel:after {
=09
}
UNKNOWN {
=09
}
.toctogglespan ~ .toctoggle {
	DISPLAY: none
}

}

@media Print   =20
{
.toctogglecheckbox:unknown + .toctitle {
	DISPLAY: none
}

}

@media Screen   =20
{
HTML {
	FONT-SIZE: 100%
}
HTML {
	HEIGHT: 100%; FONT-FAMILY: sans-serif; PADDING-BOTTOM: 0px; =
PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px
}
BODY {
	HEIGHT: 100%; FONT-FAMILY: sans-serif; PADDING-BOTTOM: 0px; =
PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px
}
BODY {
	BACKGROUND-COLOR: #f6f6f6
}
.mw-body {
	COLOR: #222222; PADDING-BOTTOM: 1em; DIRECTION: ltr; PADDING-TOP: 1em; =
PADDING-LEFT: 1em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: #ffffff
}
.parsoid-body {
	COLOR: #222222; PADDING-BOTTOM: 1em; DIRECTION: ltr; PADDING-TOP: 1em; =
PADDING-LEFT: 1em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: #ffffff
}
.mw-body {
	BORDER-TOP: #a7d7f9 1px solid; BORDER-RIGHT: #a7d7f9 0px solid; =
MARGIN-TOP: -1px; BORDER-BOTTOM: #a7d7f9 1px solid; MARGIN-LEFT: 10em; =
BORDER-LEFT: #a7d7f9 1px solid
}
.mw-body H1 {
	MARGIN-BOTTOM: 0.25em; FONT-FAMILY: 'Linux =
Libertine','Georgia','Times',serif; PADDING-BOTTOM: 0px; PADDING-TOP: =
0px; PADDING-LEFT: 0px; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px
}
.mw-body-content H1 {
	MARGIN-BOTTOM: 0.25em; FONT-FAMILY: 'Linux =
Libertine','Georgia','Times',serif; PADDING-BOTTOM: 0px; PADDING-TOP: =
0px; PADDING-LEFT: 0px; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px
}
.mw-body-content H2 {
	MARGIN-BOTTOM: 0.25em; FONT-FAMILY: 'Linux =
Libertine','Georgia','Times',serif; PADDING-BOTTOM: 0px; PADDING-TOP: =
0px; PADDING-LEFT: 0px; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px
}
UNKNOWN {
	FONT-FAMILY: sans-serif
}
UNKNOWN {
	LINE-HEIGHT: normal
}
.mw-body H1 {
	FONT-SIZE: 1.8em
}
.mw-body-content H1 {
	FONT-SIZE: 1.8em
}
.mw-body .firstHeading {
	OVERFLOW: visible
}
.mw-body .mw-indicators {
	FONT-SIZE: 0.87em; POSITION: relative; FLOAT: right; Z-INDEX: 1; =
LINE-HEIGHT: 1.6
}
.mw-body .mw-indicator {
	ZOOM: 1; DISPLAY: inline
}
.mw-body-content {
	FONT-SIZE: 0.87em; POSITION: relative; Z-INDEX: 0; LINE-HEIGHT: 1.6
}
.mw-body-content P {
	MARGIN: 0.5em 0px
}
.mw-body-content H1 {
	MARGIN-TOP: 1em
}
.mw-body-content H2 {
	FONT-SIZE: 1.5em; MARGIN-TOP: 1em
}
.mw-body-content H3 {
	MARGIN-BOTTOM: 0px; MARGIN-TOP: 0.3em; PADDING-BOTTOM: 0px; =
LINE-HEIGHT: 1.6
}
.mw-body-content H4 {
	MARGIN-BOTTOM: 0px; MARGIN-TOP: 0.3em; PADDING-BOTTOM: 0px; =
LINE-HEIGHT: 1.6
}
.mw-body-content H5 {
	MARGIN-BOTTOM: 0px; MARGIN-TOP: 0.3em; PADDING-BOTTOM: 0px; =
LINE-HEIGHT: 1.6
}
.mw-body-content H6 {
	MARGIN-BOTTOM: 0px; MARGIN-TOP: 0.3em; PADDING-BOTTOM: 0px; =
LINE-HEIGHT: 1.6
}
.mw-body-content H3 {
	FONT-SIZE: 1.2em
}
.mw-body-content H3 {
	FONT-WEIGHT: bold
}
.mw-body-content H4 {
	FONT-WEIGHT: bold
}
.mw-body-content H4 {
	FONT-SIZE: 100%
}
.mw-body-content H5 {
	FONT-SIZE: 100%
}
.mw-body-content H6 {
	FONT-SIZE: 100%
}
.mw-body-content .toc H2 {
	FONT-SIZE: 100%; FONT-FAMILY: sans-serif
}
.mw-editsection {
	FONT-FAMILY: sans-serif
}
.mw-editsection-like {
	FONT-FAMILY: sans-serif
}
DIV.emptyPortlet {
	DISPLAY: none
}
UL {
	LIST-STYLE-TYPE: disc; LIST-STYLE-IMAGE: =
url(/skins/Vector/images/bullet-icon.png?e31f8)
}
PRE {
	LINE-HEIGHT: 1.3em
}
.mw-code {
	LINE-HEIGHT: 1.3em
}
#siteNotice {
	FONT-SIZE: 0.8em
}
#p-personal {
	RIGHT: 0.75em; POSITION: absolute; Z-INDEX: 100; TOP: 0.33em
}
#p-personal H3 {
	DISPLAY: none
}
#p-personal UL {
	LIST-STYLE-TYPE: none; PADDING-LEFT: 10em; LIST-STYLE-IMAGE: none; =
MARGIN: 0px
}
#p-personal LI {
	FONT-SIZE: 0.75em; WHITE-SPACE: nowrap; MARGIN-TOP: 0.5em; FLOAT: left; =
MARGIN-LEFT: 0.75em; LINE-HEIGHT: 1.16em
}
#pt-userpage A {
	BACKGROUND-IMAGE: url(/skins/Vector/images/user-avatar.png?59494); =
BACKGROUND-REPEAT: no-repeat; BACKGROUND-POSITION: left top; =
PADDING-LEFT: 16px !important; background-size: 1.16666667em =
1.16666667em
}
#pt-anonuserpage {
	BACKGROUND-IMAGE: url(/skins/Vector/images/user-avatar.png?59494); =
BACKGROUND-REPEAT: no-repeat; BACKGROUND-POSITION: left top; =
PADDING-LEFT: 16px !important; background-size: 1.16666667em =
1.16666667em
}
#pt-anonuserpage {
	COLOR: #54595d
}
#p-search {
	FLOAT: left; MARGIN-LEFT: 0.5em; MARGIN-RIGHT: 0.5em
}
#p-search H3 {
	BORDER-LEFT-WIDTH: 0px; OVERFLOW: hidden; HEIGHT: 1px; =
BORDER-RIGHT-WIDTH: 0px; WIDTH: 1px; BORDER-BOTTOM-WIDTH: 0px; POSITION: =
absolute !important; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; =
PADDING-LEFT: 0px; MARGIN: -1px; DISPLAY: block; PADDING-RIGHT: 0px; =
BORDER-TOP-WIDTH: 0px
}
#p-search FORM {
	MARGIN: 0.4em 0px 0px
}
#p-search INPUT {
	MARGIN: 0.4em 0px 0px
}
#simpleSearch {
	MAX-WIDTH: 20em; BORDER-TOP: #a2a9b1 1px solid; HEIGHT: 1.4em; =
BORDER-RIGHT: #a2a9b1 1px solid; WIDTH: 12.6em; BACKGROUND-IMAGE: =
url(/skins/Vector/images/search-fade.png?50f7b); MARGIN-TOP: 0.65em; =
BACKGROUND-REPEAT: repeat-x; MIN-WIDTH: 5em; BORDER-BOTTOM: #a2a9b1 1px =
solid; POSITION: relative; BACKGROUND-POSITION: left top; COLOR: #000; =
MIN-HEIGHT: 1px; BORDER-LEFT: #a2a9b1 1px solid; DISPLAY: block; =
PADDING-RIGHT: 1.4em; BACKGROUND-COLOR: #fff; border-radius: 2px; =
-webkit-transition: border-color 250ms; -moz-transition: border-color =
250ms; transition: border-color 250ms
}
#simpleSearch:hover {
	BORDER-TOP-COLOR: #72777d; BORDER-LEFT-COLOR: #72777d; =
BORDER-BOTTOM-COLOR: #72777d; BORDER-RIGHT-COLOR: #72777d
}
#simpleSearch INPUT {
	BORDER-LEFT-WIDTH: 0px; BORDER-RIGHT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: =
0px; COLOR: #000; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: =
0px; MARGIN: 0px; PADDING-RIGHT: 0px; BORDER-TOP-WIDTH: 0px; =
BACKGROUND-COLOR: transparent
}
#simpleSearch #searchInput {
	FONT-SIZE: 0.81em; WIDTH: 100%; PADDING-BOTTOM: 0.2em; DIRECTION: ltr; =
PADDING-TOP: 0.2em; PADDING-LEFT: 0.2em; PADDING-RIGHT: 0px; =
-webkit-appearance: textfield
}
#simpleSearch #searchInput:focus {
	OUTLINE-WIDTH: 0px
}
#simpleSearch #searchInput:unknown {
	COLOR: #72777d; opacity: 1
}
#simpleSearch #searchInput:unknown {
	COLOR: #72777d; opacity: 1
}
#simpleSearch #searchInput:unknown {
	COLOR: #72777d; opacity: 1
}
#simpleSearch #searchInput:unknown {
	COLOR: #72777d; opacity: 1
}
#simpleSearch #searchInput:unknown {
	COLOR: #72777d; opacity: 1
}
#simpleSearch #searchInput:unknown {
	-webkit-appearance: textfield
}
#simpleSearch #searchInput:unknown {
	-webkit-appearance: textfield
}
#simpleSearch #searchInput:unknown {
	-webkit-appearance: textfield
}
#simpleSearch #searchInput:unknown {
	-webkit-appearance: textfield
}
#simpleSearch #searchButton {
	OVERFLOW: hidden; CURSOR: pointer; HEIGHT: 100%; WIDTH: 1.65em; =
WHITE-SPACE: nowrap; RIGHT: 0px; POSITION: absolute; DIRECTION: ltr; =
TOP: 0px; TEXT-INDENT: -99999px
}
#simpleSearch #mw-searchButton {
	OVERFLOW: hidden; CURSOR: pointer; HEIGHT: 100%; WIDTH: 1.65em; =
WHITE-SPACE: nowrap; RIGHT: 0px; POSITION: absolute; DIRECTION: ltr; =
TOP: 0px; TEXT-INDENT: -99999px
}
#simpleSearch #searchButton {
	BACKGROUND-IMAGE: url(/skins/Vector/images/search-ltr.png?39f97); =
BACKGROUND-REPEAT: no-repeat; BACKGROUND-POSITION: center center
}
#simpleSearch #mw-searchButton {
	Z-INDEX: 1
}
.vectorTabs H3 {
	DISPLAY: none
}
.vectorTabs {
	HEIGHT: 2.5em; BACKGROUND-IMAGE: =
url(/skins/Vector/images/tab-break.png?09d4b); BACKGROUND-REPEAT: =
no-repeat; BACKGROUND-POSITION: left bottom; FLOAT: left; PADDING-LEFT: =
1px
}
.vectorTabs UL {
	LIST-STYLE-TYPE: none; HEIGHT: 100%; BACKGROUND-IMAGE: =
url(/skins/Vector/images/tab-break.png?09d4b); BACKGROUND-REPEAT: =
no-repeat; BACKGROUND-POSITION: right bottom; FLOAT: left; =
PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; =
LIST-STYLE-IMAGE: none; MARGIN: 0px; PADDING-RIGHT: 0px
}
.vectorTabs UL LI {
	HEIGHT: 100%; BACKGROUND-IMAGE: =
url(/skins/Vector/images/tab-normal-fade.png?1cc52); WHITE-SPACE: =
nowrap; BACKGROUND-REPEAT: repeat-x; BACKGROUND-POSITION: left bottom; =
FLOAT: left; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; =
MARGIN: 0px; DISPLAY: block; LINE-HEIGHT: 1.12em; PADDING-RIGHT: 0px
}
.vectorTabs LI.new A {
	COLOR: #a55858
}
.vectorTabs LI.new A:visited {
	COLOR: #a55858
}
.vectorTabs LI.selected {
	BACKGROUND-IMAGE: url(/skins/Vector/images/tab-current-fade.png?22887)
}
.vectorTabs LI.selected A {
	TEXT-DECORATION: none; COLOR: #222
}
.vectorTabs LI.selected A:visited {
	TEXT-DECORATION: none; COLOR: #222
}
.vectorTabs LI.icon A {
	BACKGROUND-REPEAT: no-repeat; BACKGROUND-POSITION: right bottom
}
.vectorTabs LI A {
	FONT-SIZE: 0.81em; CURSOR: pointer; HEIGHT: 1.9em; COLOR: #0645ad; =
PADDING-LEFT: 0.61em; DISPLAY: block; PADDING-RIGHT: 0.61em
}
.vectorTabs SPAN {
	HEIGHT: 100%; BACKGROUND-IMAGE: =
url(/skins/Vector/images/tab-break.png?09d4b); BACKGROUND-REPEAT: =
no-repeat; BACKGROUND-POSITION: right bottom; DISPLAY: inline-block
}
.vectorTabs SPAN A {
	POSITION: relative; FLOAT: left; PADDING-TOP: 1.25em; DISPLAY: block
}
.vectorMenu {
	CURSOR: pointer; POSITION: relative; FLOAT: left; DIRECTION: ltr; =
LINE-HEIGHT: 1.12em
}
#mw-head .vectorMenu H3 {
	FONT-SIZE: 1em; HEIGHT: 2.5em; BACKGROUND-IMAGE: =
url(/skins/Vector/images/tab-break.png?09d4b); BACKGROUND-REPEAT: =
no-repeat; BACKGROUND-POSITION: right bottom; FLOAT: left; =
PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px =
-1px 0px 0px; PADDING-RIGHT: 0.5em
}
.vectorMenu H3 SPAN {
	FONT-SIZE: 0.81em; POSITION: relative; FONT-WEIGHT: normal; COLOR: =
#444; PADDING-TOP: 1.25em; PADDING-LEFT: 0.61em; DISPLAY: block; =
PADDING-RIGHT: 16px
}
.vectorMenu H3 SPAN:after {
	BACKGROUND-IMAGE: url(/skins/Vector/images/arrow-down.png?42edd); =
RIGHT: 0px; BACKGROUND-REPEAT: no-repeat; POSITION: absolute; =
BACKGROUND-POSITION: 100% 50%; LEFT: 0px; TOP: 1.25em; BOTTOM: 0px; =
opacity: 0.85
}
.vectorMenu H3:hover SPAN {
	COLOR: #222222
}
.vectorMenu H3:focus SPAN {
	COLOR: #222222
}
.vectorMenu H3:hover SPAN:after {
	opacity: 1
}
.vectorMenu H3:focus SPAN:after {
	opacity: 1
}
.vectorMenu .vectorMenuCheckbox:unknown + H3 SPAN:after {
	transform: scaleY(-1)
}
.vectorMenu .vectorMenuCheckbox:focus + H3 {
	OUTLINE-WIDTH: 1px; OUTLINE-STYLE: dotted
}
.vectorMenu .menu {
	BORDER-TOP: #a2a9b1 0px solid; BORDER-RIGHT: #a2a9b1 1px solid; =
MIN-WIDTH: 100%; BORDER-BOTTOM: #a2a9b1 1px solid; POSITION: absolute; =
TEXT-ALIGN: left; CLEAR: both; LEFT: -1px; BORDER-LEFT: #a2a9b1 1px =
solid; Z-INDEX: 2; DISPLAY: none; TOP: 2.5em; BACKGROUND-COLOR: #ffffff; =
box-shadow: 0 1px 1px 0 rgba(0,0,0,0.1)
}
.vectorMenu:hover .menu {
	DISPLAY: block
}
.vectorMenu .vectorMenuCheckbox:unknown ~ .menu {
	DISPLAY: block
}
.vectorMenu UL {
	LIST-STYLE-TYPE: none; PADDING-BOTTOM: 0px; TEXT-ALIGN: left; =
PADDING-TOP: 0px; PADDING-LEFT: 0px; LIST-STYLE-IMAGE: none; MARGIN: =
0px; PADDING-RIGHT: 0px
}
.vectorMenu LI {
	PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; PADDING-LEFT: =
0px; MARGIN: 0px; LINE-HEIGHT: 1em; PADDING-RIGHT: 0px
}
.vectorMenu LI A {
	FONT-SIZE: 0.81em; CURSOR: pointer; WHITE-SPACE: nowrap; COLOR: =
#0645ad; PADDING-BOTTOM: 0.62em; PADDING-TOP: 0.62em; PADDING-LEFT: =
0.62em; DISPLAY: block; PADDING-RIGHT: 0.62em
}
.vectorMenu LI.selected A {
	TEXT-DECORATION: none; COLOR: #222
}
.vectorMenu LI.selected A:visited {
	TEXT-DECORATION: none; COLOR: #222
}
.vectorMenuCheckbox {
	CURSOR: pointer; HEIGHT: 100%; WIDTH: 100%; POSITION: absolute; =
PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; LEFT: 0px; =
MARGIN: 0px; Z-INDEX: 1; DISPLAY: none; TOP: 0px; PADDING-RIGHT: 0px; =
opacity: 0
}
UNKNOWN {
	DISPLAY: block
}
.vectorTabs .icon#ca-unwatch A {
	OVERFLOW: hidden; HEIGHT: 0px; WIDTH: 28px; BACKGROUND-REPEAT: =
no-repeat; BACKGROUND-POSITION: 5px 60%; PADDING-BOTTOM: 0px; =
PADDING-TOP: 3.07em; PADDING-LEFT: 0px; MARGIN: 0px; DISPLAY: block; =
PADDING-RIGHT: 0px
}
.vectorTabs .icon#ca-watch A {
	OVERFLOW: hidden; HEIGHT: 0px; WIDTH: 28px; BACKGROUND-REPEAT: =
no-repeat; BACKGROUND-POSITION: 5px 60%; PADDING-BOTTOM: 0px; =
PADDING-TOP: 3.07em; PADDING-LEFT: 0px; MARGIN: 0px; DISPLAY: block; =
PADDING-RIGHT: 0px
}
.vectorTabs .icon#ca-unwatch A {
	BACKGROUND-IMAGE: url(/skins/Vector/images/unwatch-icon.png?fccbe)
}
.vectorTabs .icon#ca-watch A {
	BACKGROUND-IMAGE: url(/skins/Vector/images/watch-icon.png?e1b42)
}
.vectorTabs .icon#ca-unwatch A:hover {
	BACKGROUND-IMAGE: url(/skins/Vector/images/unwatch-icon-hl.png?c4723)
}
.vectorTabs .icon#ca-unwatch A:focus {
	BACKGROUND-IMAGE: url(/skins/Vector/images/unwatch-icon-hl.png?c4723)
}
.vectorTabs .icon#ca-watch A:hover {
	BACKGROUND-IMAGE: url(/skins/Vector/images/watch-icon-hl.png?f4c7e)
}
.vectorTabs .icon#ca-watch A:focus {
	BACKGROUND-IMAGE: url(/skins/Vector/images/watch-icon-hl.png?f4c7e)
}
.vectorTabs .icon#ca-unwatch A.loading {
	CURSOR: default; BACKGROUND-IMAGE: =
url(/skins/Vector/images/watch-icon-loading.png?5cb92); =
BACKGROUND-POSITION: 50% 60%; OUTLINE-WIDTH: 0px; -webkit-animation: =
rotate 700ms infinite linear; -moz-animation: rotate 700ms infinite =
linear; animation: rotate 700ms infinite linear; pointer-events: none; =
-webkit-transform-origin: 50% 57%; transform-origin: 50% 57%
}
.vectorTabs .icon#ca-watch A.loading {
	CURSOR: default; BACKGROUND-IMAGE: =
url(/skins/Vector/images/watch-icon-loading.png?5cb92); =
BACKGROUND-POSITION: 50% 60%; OUTLINE-WIDTH: 0px; -webkit-animation: =
rotate 700ms infinite linear; -moz-animation: rotate 700ms infinite =
linear; animation: rotate 700ms infinite linear; pointer-events: none; =
-webkit-transform-origin: 50% 57%; transform-origin: 50% 57%
}
.vectorTabs .icon#ca-unwatch A SPAN {
	DISPLAY: none
}
.vectorTabs .icon#ca-watch A SPAN {
	DISPLAY: none
}
#mw-navigation H2 {
	POSITION: absolute; TOP: -9999px
}
UNKNOWN {
	BORDER-LEFT-WIDTH: 0px; OVERFLOW: hidden; HEIGHT: 1px; =
BORDER-RIGHT-WIDTH: 0px; WIDTH: 1px; BORDER-BOTTOM-WIDTH: 0px; POSITION: =
absolute !important; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; =
PADDING-LEFT: 0px; MARGIN: -1px; DISPLAY: block; PADDING-RIGHT: 0px; =
BORDER-TOP-WIDTH: 0px
}
#mw-page-base {
	HEIGHT: 5em; BACKGROUND-IMAGE: =
url(/skins/Vector/images/page-fade.png?1d168); BACKGROUND-REPEAT: =
repeat-x; BACKGROUND-POSITION: left bottom; BACKGROUND-COLOR: #ffffff
}
#mw-head-base {
	HEIGHT: 5em; MARGIN-TOP: -5em; MARGIN-LEFT: 10em
}
#mw-head {
	WIDTH: 100%; RIGHT: 0px; POSITION: absolute; TOP: 0px
}
#left-navigation {
	MARGIN-BOTTOM: -2.5em; MARGIN-TOP: 2.5em; FLOAT: left; MARGIN-LEFT: =
10em
}
#right-navigation {
	MARGIN-TOP: 2.5em; FLOAT: right
}
#p-logo {
	HEIGHT: 160px; WIDTH: 10em
}
#p-logo A {
	TEXT-DECORATION: none; HEIGHT: 160px; WIDTH: 10em; BACKGROUND-REPEAT: =
no-repeat; BACKGROUND-POSITION: center center; DISPLAY: block
}
#mw-panel {
	WIDTH: 10em; POSITION: absolute; LEFT: 0px; TOP: 0px
}
#mw-panel .portal {
	BACKGROUND-REPEAT: no-repeat; BACKGROUND-POSITION: left top; =
PADDING-BOTTOM: 0.25em; DIRECTION: ltr; PADDING-TOP: 0.25em; =
PADDING-LEFT: 0px; MARGIN: 0px 0.6em 0px 0.7em; PADDING-RIGHT: 0px
}
#mw-panel .portal H3 {
	BORDER-LEFT-WIDTH: 0px; FONT-SIZE: 0.75em; CURSOR: default; =
BORDER-RIGHT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; FONT-WEIGHT: normal; =
COLOR: #444444; PADDING-BOTTOM: 0.25em; PADDING-TOP: 0.25em; =
PADDING-LEFT: 0px; MARGIN: 0.5em 0px 0px 0.66em; PADDING-RIGHT: 0px; =
BORDER-TOP-WIDTH: 0px
}
#mw-panel .portal .body {
	BACKGROUND-IMAGE: url(/skins/Vector/images/portal-break.png?3ea1b); =
BACKGROUND-REPEAT: no-repeat; PADDING-TOP: 0px; MARGIN-LEFT: 0.5em
}
#mw-panel .portal .body UL {
	LIST-STYLE-TYPE: none; PADDING-BOTTOM: 0px; PADDING-TOP: 0.3em; =
PADDING-LEFT: 0px; LIST-STYLE-IMAGE: none; MARGIN: 0px; PADDING-RIGHT: =
0px
}
#mw-panel .portal .body LI {
	FONT-SIZE: 0.75em; WORD-WRAP: break-word; PADDING-BOTTOM: 0.25em; =
PADDING-TOP: 0.25em; PADDING-LEFT: 0px; MARGIN: 0px; LINE-HEIGHT: =
1.12em; PADDING-RIGHT: 0px
}
#mw-panel .portal .body LI A {
	COLOR: #0645ad
}
#mw-panel .portal .body LI A:visited {
	COLOR: #0b0080
}
#mw-panel #p-logo + .portal {
	BACKGROUND-IMAGE: none; MARGIN-TOP: 1em
}
#mw-panel #p-logo + .portal H3 {
	DISPLAY: none
}
#mw-panel #p-logo + .portal .body {
	BACKGROUND-IMAGE: none; MARGIN-LEFT: 0.5em
}
#footer {
	MARGIN-TOP: 0px; PADDING-BOTTOM: 0.75em; DIRECTION: ltr; PADDING-TOP: =
0.75em; PADDING-LEFT: 0.75em; MARGIN-LEFT: 10em; PADDING-RIGHT: 0.75em
}
#footer UL {
	LIST-STYLE-TYPE: none; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; =
PADDING-LEFT: 0px; LIST-STYLE-IMAGE: none; MARGIN: 0px; PADDING-RIGHT: =
0px
}
#footer UL LI {
	FONT-SIZE: 0.7em; COLOR: #222; PADDING-BOTTOM: 0.5em; PADDING-TOP: =
0.5em; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px
}
#footer #footer-icons {
	FLOAT: right
}
#footer #footer-icons LI {
	FLOAT: left; TEXT-ALIGN: right; MARGIN-LEFT: 0.5em; LINE-HEIGHT: 2em
}
#footer #footer-info LI {
	LINE-HEIGHT: 1.4em
}
#footer #footer-places LI {
	FLOAT: left; LINE-HEIGHT: 2em; MARGIN-RIGHT: 1em
}
.mw-parser-output .external {
	BACKGROUND-IMAGE: =
url(/skins/Vector/images/external-link-ltr-icon.png?325de); =
BACKGROUND-REPEAT: no-repeat; BACKGROUND-POSITION: right center; =
PADDING-RIGHT: 13px
}

}

@media Unknown   =20
{
.mw-body {
	MARGIN-LEFT: 11em
}
#mw-head-base {
	MARGIN-LEFT: 11em
}
#left-navigation {
	MARGIN-LEFT: 11em
}
#footer {
	MARGIN-LEFT: 11em
}
.mw-body {
	PADDING-BOTTOM: 1.5em; PADDING-TOP: 1.25em; PADDING-LEFT: 1.5em; =
PADDING-RIGHT: 1.5em
}
#footer {
	PADDING-BOTTOM: 1.25em; PADDING-TOP: 1.25em; PADDING-LEFT: 1.25em; =
PADDING-RIGHT: 1.25em
}
#mw-panel {
	PADDING-LEFT: 0.5em
}
#p-search {
	MARGIN-RIGHT: 1em
}
#p-personal {
	RIGHT: 1em
}

}

@media Print   =20
{
.toc {
	FONT-FAMILY: 'Linux Libertine','Georgia','Times',serif; PADDING-BOTTOM: =
10px; PADDING-TOP: 10px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px
}
BODY {
	FONT-FAMILY: 'Linux Libertine','Georgia','Times',serif; PADDING-BOTTOM: =
10px; PADDING-TOP: 10px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px
}
.printfooter {
	FONT-FAMILY: sans-serif
}
#footer {
	FONT-FAMILY: sans-serif
}
.thumb {
	FONT-FAMILY: sans-serif
}
TABLE {
	FONT-FAMILY: sans-serif
}
OL {
	FONT-FAMILY: sans-serif
}
DL {
	FONT-FAMILY: sans-serif
}
UL {
	FONT-FAMILY: sans-serif
}
H3 {
	FONT-FAMILY: sans-serif
}
H4 {
	FONT-FAMILY: sans-serif
}
H5 {
	FONT-FAMILY: sans-serif
}
H6 {
	FONT-FAMILY: sans-serif
}
IMG {
	FONT-FAMILY: 'Linux Libertine','Georgia','Times',serif
}
A {
	BORDER-BOTTOM: #aaa 1px solid
}
.firstHeading {
	FONT-SIZE: 25pt; MARGIN-BOTTOM: 20px; PADDING-BOTTOM: 5px; LINE-HEIGHT: =
28pt
}
.firstHeading {
	OVERFLOW: hidden; BORDER-BOTTOM: #000000 2px solid
}
H2 {
	OVERFLOW: hidden; BORDER-BOTTOM: #000000 2px solid
}
H3 {
	MARGIN: 30px 0px 0px
}
H4 {
	MARGIN: 30px 0px 0px
}
H5 {
	MARGIN: 30px 0px 0px
}
H6 {
	MARGIN: 30px 0px 0px
}
H2 {
	POSITION: relative; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; =
PADDING-LEFT: 0px; PADDING-RIGHT: 0px
}
H3 {
	POSITION: relative; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; =
PADDING-LEFT: 0px; PADDING-RIGHT: 0px
}
H4 {
	POSITION: relative; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; =
PADDING-LEFT: 0px; PADDING-RIGHT: 0px
}
H5 {
	POSITION: relative; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; =
PADDING-LEFT: 0px; PADDING-RIGHT: 0px
}
H6 {
	POSITION: relative; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; =
PADDING-LEFT: 0px; PADDING-RIGHT: 0px
}
H2 {
	FONT-SIZE: 18pt; MARGIN-BOTTOM: 0.25em; LINE-HEIGHT: 24pt
}
H3 {
	FONT-SIZE: 13pt; LINE-HEIGHT: 20pt
}
H4 {
	FONT-SIZE: 10pt; LINE-HEIGHT: 15pt
}
H5 {
	FONT-SIZE: 10pt; LINE-HEIGHT: 15pt
}
H6 {
	FONT-SIZE: 10pt; LINE-HEIGHT: 15pt
}
P {
	FONT-SIZE: 10pt; MARGIN-TOP: 5px; TEXT-ALIGN: justify; LINE-HEIGHT: =
16pt
}
P:before {
	OVERFLOW: hidden; WIDTH: 120pt; DISPLAY: block
}
BLOCKQUOTE {
	PADDING-LEFT: 20px; BORDER-LEFT: #000000 2px solid
}
OL {
	PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 10px =
0px 0px 1.6em; PADDING-RIGHT: 0px
}
UL {
	PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 10px =
0px 0px 1.6em; PADDING-RIGHT: 0px
}
OL LI {
	FONT-SIZE: 10pt; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: =
0px; PADDING-RIGHT: 0px
}
UL LI {
	FONT-SIZE: 10pt; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; PADDING-LEFT: =
0px; PADDING-RIGHT: 0px
}
TABLE OL LI {
=09
}
TABLE UL LI {
=09
}
.toc {
	BORDER-LEFT-WIDTH: 0px; BORDER-RIGHT-WIDTH: 0px; BACKGROUND: none =
transparent scroll repeat 0% 0%; BORDER-BOTTOM-WIDTH: 0px; =
PAGE-BREAK-AFTER: avoid; PAGE-BREAK-BEFORE: avoid; DISPLAY: table; =
BORDER-TOP-WIDTH: 0px
}
.toc A {
	BORDER-LEFT-WIDTH: 0px; BORDER-RIGHT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: =
0px; FONT-WEIGHT: normal; BORDER-TOP-WIDTH: 0px
}
.toc > UL > LI {
	MARGIN-BOTTOM: 4px; FONT-WEIGHT: bold
}
.toc UL {
	LIST-STYLE-TYPE: none; MARGIN: 0px
}
.toc UL UL {
	PADDING-LEFT: 30px
}
.toc LI.toclevel-1 > A {
	FONT-SIZE: 10pt; FONT-WEIGHT: bold
}
.mw-jump-link {
	DISPLAY: none
}
.toc .tocnumber {
	DISPLAY: none
}
.printfooter {
	FONT-SIZE: 10pt; BORDER-TOP: #000000 3px solid; MARGIN-TOP: 10px; =
PADDING-TOP: 10px; CLEAR: both
}
#footer {
	BORDER-TOP: #eeeeee 1px solid; MARGIN-TOP: 12px; PADDING-TOP: 5px
}
#footer-info {
	PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; =
PADDING-RIGHT: 0px
}
#footer-info LI {
	LIST-STYLE-TYPE: none; FONT-SIZE: 10pt; COLOR: #999; PADDING-BOTTOM: =
10px; DISPLAY: block
}
#footer-info LI A {
	COLOR: #999 !important
}
#footer-info-lastmod {
	FONT-SIZE: 12pt; FONT-WEIGHT: bold; COLOR: #000000
}

}

------=_NextPart_000_0120_01D6E507.4B0F8B50--
